{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxClusterUri",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          },
          {
            "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxDatabase",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          }
        ],
        "style": "pills",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "neverShow",
        "comparison": "isNotEqualTo"
      },
      "name": "link_adx_parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Data store",
        "expandable": true,
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "a762a2ae-beec-4bf5-9f4a-28bea2d2f737",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResourceId",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "value": ""
                },
                {
                  "id": "83420d36-0646-40aa-9637-d06a3d2a6145",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResource",
                  "type": 1,
                  "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{watcherResourceId}?api-version=2023-03-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":null}",
                  "isHiddenWhenLocked": true,
                  "queryType": 12
                },
                {
                  "id": "a6cd9521-127a-43bd-9227-6bcd67756456",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherName",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.name\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxClusterUri",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.properties.datastore.adxClusterUri\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8,
                  "id": "f0889b5f-3fa4-40a0-838d-443b4c0472b6"
                },
                {
                  "id": "0797c608-2ecf-4711-ba9b-6d110f10acd3",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxDatabase",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$.properties.datastore.adxDatabaseResourceId\",\"columnid\":\"value\",\"columnType\":\"string\",\"substringRegexMatch\":\".*/(.*)\",\"substringReplace\":\"$1\"}]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "id": "1b7d18f3-88a9-40ed-9162-92710b29ba69",
                  "version": "KqlParameterItem/1.0",
                  "name": "dataStore",
                  "label": "Choose a data store",
                  "type": 10,
                  "description": "By default, the workbook loads data from the data store for the current database watcher. You may use an alternate data store by entering its Kusto query URI and database name.",
                  "isRequired": true,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"[{\\\"value\\\":\\\"watcher\\\",\\\"label\\\":\\\"{watcherName}\\\"},{\\\"value\\\":\\\"alternate\\\",\\\"label\\\":\\\"Alternate\\\"}]\",\"transformers\":null}",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "queryType": 8,
                  "value": "watcher"
                }
              ],
              "style": "above",
              "queryType": 12
            },
            "customWidth": "30",
            "name": "watcher_adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Kusto query URI: `{watcherAdxClusterUri}` </p>\r\nKusto database: `{watcherAdxDatabase}`"
            },
            "customWidth": "70",
            "conditionalVisibilities": [
              {
                "parameterName": "watcherName",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxDatabase",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "dataStore",
                "comparison": "isEqualTo",
                "value": "watcher"
              }
            ],
            "name": "watcher_data_store"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "bbce4b83-dae6-46e0-bf67-c99ee0ea21f0",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxClusterUri",
                  "label": "Kusto query URI",
                  "type": 1,
                  "description": "Enter a Kusto query URI for the alternate data store. Most commonly, Kusto query URI format is: https://{kusto-cluster-name}.{region}.kusto.windows.net/",
                  "isRequired": true,
                  "value": ""
                },
                {
                  "id": "99cdb447-94d3-40c7-b902-c98628fb736a",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxDatabase",
                  "label": "Kusto database",
                  "type": 1,
                  "description": "Enter a Kusto database name for the alternate data store",
                  "isRequired": true
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "70",
            "conditionalVisibility": {
              "parameterName": "dataStore",
              "comparison": "isEqualTo",
              "value": "alternate"
            },
            "name": "override_adx_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterUri",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxClusterUri",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    }
                  ]
                },
                {
                  "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxDatabase",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxDatabase",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    }
                  ]
                },
                {
                  "id": "c5aca9de-de62-466e-bea8-9a149e935c4f",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterPingResult",
                  "label": "Kusto query URI ping result",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show databases\\r\\n| where DatabaseName == @\\\"{adxDatabase}\\\"\\r\\n| project 1\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9,
                  "value": null
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Cannot connect to Kusto query URI `{adxClusterUri}`, database `{adxDatabase}`. The Kusto cluster may be stopped or unreachable, specified cluster URI may be invalid, or permissions may be insufficient.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "adxClusterPingResult",
                "comparison": "isNotEqualTo",
                "value": "1"
              },
              {
                "parameterName": "adxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "adxDatabase",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "missing_data_bad_permissions_text"
          }
        ],
        "exportParameters": true
      },
      "name": "data_store_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "4efc99f1-4cd2-417f-94ca-60fec15d41c5",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_properties",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_properties\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "a8baece8-02e2-4bb6-bb1c-1be94863de6f",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_database_storage_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_database_storage_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "f027ff10-2be9-46a1-b9b7-9f97d452b9e2",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_cpu_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_cpu_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "507ba9c1-409b-41a9-820e-6d751909ea83",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_performance_counters_common",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_performance_counters_common\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "68caf2eb-6dad-4e75-b5b4-82d6126cbafb",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "64dd65f6-d23b-40e6-a05b-bb3b758dcc6a",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_memory_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_memory_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "d1d1dc40-780a-441f-b50d-333f440abb10",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_storage_io",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_storage_io\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "0d0bfe52-8bba-4f30-aa12-6ec03515f3fc",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_active_sessions",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_active_sessions\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "9452e0c1-772b-47fb-ade0-5cd94ba80660",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_table_metadata",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_table_metadata\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          },
          {
            "id": "19988ff6-3caa-4488-a84c-b90d0e1f52d6",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_volume_storage_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_volume_storage_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          },
          {
            "id": "458fb223-8160-43f9-929d-39ff2161c5f6",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_database_properties",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_database_properties\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          },
          {
            "id": "9e77448f-b0ce-4d0b-bee2-a2f9eb7da12a",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_sqlagent_job_state",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_sqlagent_job_state\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_sqlagent_job_history",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_sqlagent_job_history\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "5967f4a0-d34a-464a-b8b3-4b198b606b10"
          },
          {
            "id": "4ce1cdeb-24b7-43d2-a046-090effed1d59",
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_database_replicas",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_database_replicas\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_query_runtime_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_query_runtime_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "8e89ba85-1ad8-4d00-a7da-9cdd2bdea420"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_query_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_query_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "f19804c3-bc54-4c85-a914-3236c9085ec5"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_connectivity",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_connectivity\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "8a1f07e6-c893-45ee-b011-18e3ec302650"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlserver_sql_backup_history",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_sql_backup_history\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "c48e61a0-b44a-41a5-8ac0-1b52fa312544"
          }
        ],
        "style": "above",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "name": "table_presence_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "eecd0908-04fd-4739-bef2-bcab66117f39",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 3600000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "af2070be-277a-4367-bf50-0023e84eb8c9",
            "version": "KqlParameterItem/1.0",
            "name": "machineName",
            "label": "Machine name",
            "type": 2,
            "description": "Select a machine (computer) name hosting SQL Server instances",
            "isRequired": true,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where isnotempty(machine_name)\\r\\n| distinct machine_name\\r\\n| order by machine_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": "WUS2HISTDB9001"
          },
          {
            "id": "e61b3c5d-3911-4a7b-8c92-133c352a4b86",
            "version": "KqlParameterItem/1.0",
            "name": "instanceCount",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name in~ (\\\"{machineName}\\\")\\r\\n| summarize instance_count = dcount(server_name)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "40ec86a0-0188-4e9a-96c1-d2dc85c512eb",
            "version": "KqlParameterItem/1.0",
            "name": "singleServerName",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name in~ (\\\"{machineName}\\\")\\r\\n| summarize server_name = take_any(server_name)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "be3eb2c6-0152-47c6-8e25-93ebc524308b",
            "version": "KqlParameterItem/1.0",
            "name": "selectedServerName",
            "label": "SQL instance name",
            "type": 2,
            "description": "Select a specific SQL Server instance when multiple instances are running on the machine",
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name in~ (\\\"{machineName}\\\")\\r\\n| distinct server_name\\r\\n| order by tolower(server_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "859e1723-fba2-4371-88a2-3cce7b3cada6",
            "version": "KqlParameterItem/1.0",
            "name": "showDescriptions",
            "label": "Show descriptions",
            "type": 10,
            "description": "Shows descriptions next to charts",
            "isRequired": true,
            "isGlobal": true,
            "value": "false",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"true\",\"label\":\"Yes\"},{\"value\":\"false\",\"label\":\"No\"}]"
          },
          {
            "id": "d540415a-9c4e-45fc-b7b8-1c37d0f06501",
            "version": "KqlParameterItem/1.0",
            "name": "grainFactor",
            "label": "Grain factor",
            "type": 2,
            "description": "Higher time grain provides more details on charts when granular data exists.",
            "isRequired": true,
            "value": "4",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3},{\"value\":4,\"label\":4},{\"value\":5,\"label\":5},{\"value\":6,\"label\":6}]"
          },
          {
            "id": "32f86b95-6a99-4fc2-9124-5a6e46963d82",
            "version": "KqlParameterItem/1.0",
            "name": "tabName",
            "type": 1,
            "value": "Overview",
            "isHiddenWhenLocked": true
          },
          {
            "id": "b92c695f-6e64-4075-bc04-fa9e5d6408d9",
            "version": "KqlParameterItem/1.0",
            "name": "serverName",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "instanceCount",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "1",
                  "resultValType": "param",
                  "resultVal": "singleServerName"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "selectedServerName"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "674f7ad3-f7c9-4c67-b8a0-276eef385362",
            "version": "KqlParameterItem/1.0",
            "name": "connectivityTabName",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_connectivity\\\"\\r\\n| project tab_name = \\\"Connectivity\\\"\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "tablesTabName",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_table_metadata\\\"\\r\\n| project tab_name = \\\"Tables\\\"\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "ecf0cb84-7ae7-45de-b301-c1c19b59a235"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "backupTabName",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlserver_sql_backup_history\\\"\\r\\n| project tab_name = \\\"Backup\\\"\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "99c74dec-d7cc-40b9-bf4e-3c5d0fdef5aa"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlserver_properties",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "filter_parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Overview",
        "expandable": true,
        "expanded": true,
        "loadType": "always",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let time_range = datatable(key:int, time_range_start:datetime, time_range_end:datetime) [\\r\\n1, datetime(\\\"{timeRange:startISO}\\\"), datetime(\\\"{timeRange:endISO}\\\")\\r\\n];\\r\\ntime_range\\r\\n| project time_range_start, time_range_end, time_range_duration = datetime_diff('second', time_range_end, time_range_start), last_refresh_time = now(), fleet_link = \\\"Community-Workbooks/Database watcher/SQL Server/estate\\\", adx_link = strcat(trim_end(\\\"/\\\", \\\"{adxClusterUri}\\\"), \\\"/\\\", \\\"{adxDatabase}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "time_range_start",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Start of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_end",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "End of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_duration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "last_refresh_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Workbook refresh date and time"
                    }
                  },
                  {
                    "columnMatch": "fleet_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "linkLabel": "All SQL Server instances",
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "column",
                        "templateId": "fleet_link",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "SQL Server instances",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "linkAdxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "linkAdxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "showDescriptions",
                            "source": "parameter",
                            "value": "showDescriptions"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "View all monitored SQL Server instances"
                    }
                  },
                  {
                    "columnMatch": "adx_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "Url",
                      "linkLabel": "Query ADX database"
                    },
                    "tooltipFormat": {
                      "tooltip": "Explore monitoring data using ad-hoc KQL queries"
                    }
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "$gen_date_time_range_start_0",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "time_range_start",
                    "label": "Time range start"
                  },
                  {
                    "columnId": "time_range_end",
                    "label": "Time range end"
                  },
                  {
                    "columnId": "time_range_duration",
                    "label": "Time range duration"
                  },
                  {
                    "columnId": "last_refresh_time",
                    "label": "Last refresh"
                  },
                  {
                    "columnId": "fleet_link",
                    "label": "Estate"
                  },
                  {
                    "columnId": "adx_link",
                    "label": "Data store"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "$gen_date_time_range_start_0",
                  "sortOrder": 1
                }
              ],
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "name": "header_time_range"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let user_databases = (\\r\\nsqlserver_database_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name !in~ ('master','tempdb','model','msdb') // do not consider \\\"distribution\\\" and \\\"ssisdb\\\" system databases in this context\\r\\n| extend replica_type = case(is_primary_replica == true, \\\"Primary\\\", is_primary_replica == false, \\\"Secondary\\\", \\\"Not in AG\\\")\\r\\n| summarize arg_max(collection_time_utc, replica_type) by database_name\\r\\n| summarize count_user_databases = count(),\\r\\n            count_primary_databases = countif(replica_type == \\\"Primary\\\"),\\r\\n            count_secondary_databases = countif(replica_type == \\\"Secondary\\\"),\\r\\n            count_not_in_ag_databases = countif(replica_type == \\\"Not in AG\\\"),\\r\\n            key = int(1)\\r\\n);\\r\\nsqlserver_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| top 1 by sample_time_utc desc\\r\\n| extend key = int(1)\\r\\n| join kind=leftouter user_databases on key\\r\\n| project server_name, uptime = format_timespan(1s * datetime_diff(\\\"second\\\", now(), database_engine_start_time_utc), \\\"d.hh:mm:ss\\\"), logical_cpu_count, max_server_memory_mb = iif(max_server_memory_mb == 2147483647, int(null), max_server_memory_mb), count_user_databases, count_primary_databases, count_secondary_databases, count_not_in_ag_databases, sql_server_version, sql_server_edition, product_level, product_update_level\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "server_name",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "SQL server (instance) name"
                    }
                  },
                  {
                    "columnMatch": "uptime",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "14ch"
                    }
                  },
                  {
                    "columnMatch": "logical_cpu_count",
                    "formatter": 2,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": []
                      },
                      "customColumnWidthSetting": "16ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "max_server_memory_mb",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      },
                      "emptyValCustomText": "Not set"
                    }
                  },
                  {
                    "columnMatch": "count_user_databases",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "[\"count_user_databases\"] user database(s)",
                        "columnSettings": [
                          {
                            "columnName": "count_primary_databases",
                            "color": "green"
                          },
                          {
                            "columnName": "count_secondary_databases",
                            "color": "turquoise"
                          },
                          {
                            "columnName": "count_not_in_ag_databases",
                            "color": "gray"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"count_primary_databases\"] primary replica database(s), [\"count_secondary_databases\"] secondary replica database(s), [\"count_not_in_ag_databases\"] database(s) not in an availability group."
                    }
                  },
                  {
                    "columnMatch": "count_primary_databases",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_secondary_databases",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_not_in_ag_databases",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "server_name",
                    "label": "Server name"
                  },
                  {
                    "columnId": "uptime",
                    "label": "Uptime"
                  },
                  {
                    "columnId": "logical_cpu_count",
                    "label": "Logical CPUs"
                  },
                  {
                    "columnId": "max_server_memory_mb",
                    "label": "Max server memory"
                  },
                  {
                    "columnId": "count_user_databases",
                    "label": "Databases"
                  },
                  {
                    "columnId": "sql_server_version",
                    "label": "Version"
                  },
                  {
                    "columnId": "sql_server_edition",
                    "label": "Edition"
                  },
                  {
                    "columnId": "product_level",
                    "label": "Product level"
                  },
                  {
                    "columnId": "product_update_level",
                    "label": "Update level"
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "name": "header_db_properties"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlserver_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlserver_cpu_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "header_group"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "tabStyle": "bigger",
        "links": [
          {
            "id": "e108c42f-d83e-470e-baf3-579e5018fb7b",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Performance",
            "subTarget": "Overview",
            "style": "secondary"
          },
          {
            "id": "341b21d7-3e64-49aa-8665-cbf41f016c7e",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Activity",
            "subTarget": "Activity",
            "style": "secondary"
          },
          {
            "id": "f6ba5859-e201-4379-bb5f-b8e229071604",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Top queries",
            "subTarget": "Top queries",
            "style": "link"
          },
          {
            "id": "9f26ac72-497e-4b7b-bd31-9e1216f83fb8",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Storage",
            "subTarget": "Storage",
            "style": "secondary"
          },
          {
            "id": "ab2803fd-2ec2-43e1-bde6-5e67cf38c912",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Databases",
            "subTarget": "Databases",
            "style": "secondary"
          },
          {
            "id": "4cfe8309-a399-4bbc-9bd2-67f4b14aa278",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Availability groups",
            "subTarget": "Replicas",
            "style": "secondary"
          },
          {
            "id": "e82e4e12-9ac6-47b5-a648-f7feda64b5f0",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "{connectivityTabName}",
            "subTarget": "Connectivity",
            "style": "link"
          },
          {
            "id": "82cd7eb3-4133-4243-8626-788aae2ab230",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "{backupTabName}",
            "subTarget": "Backup",
            "style": "link"
          },
          {
            "id": "9dae20d7-1ebb-4b08-b95f-c34b8bc9bfd6",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "SQL Agent",
            "subTarget": "SQLAgent",
            "style": "secondary"
          },
          {
            "id": "5f25321e-8c04-44b8-9867-bcbe0f949016",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Properties",
            "subTarget": "Properties",
            "style": "secondary"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "top_tabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "CPU and requests",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"SQL CPU\\\",\\r\\n1, \\\"SQL process CPU\\\",\\r\\n1, \\\"Other process CPU\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_cpu_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, avg_cpu_percent, sql_process_cpu_percent, other_process_cpu_percent\\r\\n| extend metric = case(\\r\\n                    metric_name == \\\"SQL CPU\\\", avg_cpu_percent,\\r\\n                    metric_name == \\\"SQL process CPU\\\", todecimal(sql_process_cpu_percent),\\r\\n                    metric_name == \\\"Other process CPU\\\", todecimal(other_process_cpu_percent),\\r\\n                    decimal(null))\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "CPU utilization",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "exportToExcelOptions": "all",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "SQL CPU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "SQL process CPU",
                    "color": "red"
                  },
                  {
                    "seriesName": "Other process CPU",
                    "color": "orange"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "textSettings": {
                "style": "markdown"
              }
            },
            "name": "resource_utilization"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`SQL CPU`|CPU utilization, as measured by the database engine across all resource pools. Query latency may noticeably increase once utilization exceeds 70-80%.|\r\n|`SQL process CPU`|CPU utilization by the `sqlservr.exe` process, as measured by the operating system. Recorded at one minute granularity and rounded to whole percent values.|\r\n|`Other process CPU`|CPU utilization by other processes on the same machine, as measured by the operating system. Recorded at one minute granularity and rounded to whole percent values.|\r\n\r\nData is collected from [sys.dm_resource_governor_resource_pools](https://go.microsoft.com/fwlink/?linkid=2201910), sys.dm_os_ring_buffers, and [sys.dm_os_sys_info](https://go.microsoft.com/fwlink/?linkid=2198867)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "resource_stats_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"Batch Requests/sec\\\")\\r\\n| project sample_time_utc, object_name, counter_name, cntr_value\\r\\n| sort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away object_name, cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Request rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Batch Requests/sec",
                    "label": "Batch requests",
                    "color": "greenDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "requests"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Batch requests`|A batch request, or just request, is one or more SQL statements (queries) that a client sends to the database engine to execute. Batch requests rate is a commonly used measure of workload throughput. |\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqlserver_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlserver_cpu_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "cpu_and_requests_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Waits",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "7ae3f51d-d369-4ab7-aa86-76f80ccdc98b",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Cumulative waits",
                  "subTarget": "wait_stats_resource_cumulative",
                  "style": "link"
                },
                {
                  "id": "7b11612a-5427-4472-b1ed-e56aab7e01af",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Average waits",
                  "subTarget": "wait_stats_resource_average",
                  "style": "link"
                },
                {
                  "id": "cea87ec4-e50a-4eba-a8e8-c4ca7fc3c123",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Average signal waits",
                  "subTarget": "wait_stats_signal_average",
                  "style": "link"
                },
                {
                  "id": "0f53f0f1-53b2-43bf-9c97-b26ea4d74609",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Waiting tasks",
                  "subTarget": "wait_stats_waiting_tasks",
                  "style": "link"
                }
              ]
            },
            "name": "waits_tabs"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, wait_type, wait_time_ms\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms), wait_time_ms - prev(wait_time_ms), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = toreal(delta_wait_time_ms) / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_resource_cumulative"
            },
            "name": "wait_stats_resource_cumulative"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, wait_type, wait_time_ms, waiting_tasks_count\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms), wait_time_ms - prev(wait_time_ms), long(null)),\\r\\n         delta_waiting_tasks_count = iif(waiting_tasks_count >= prev(waiting_tasks_count) and wait_type == prev(wait_type), waiting_tasks_count - prev(waiting_tasks_count), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend delta_avg_wait_time_ms = iif(delta_waiting_tasks_count != 0, toreal(delta_wait_time_ms) / delta_waiting_tasks_count, real(null))\\r\\n| make-series metric = avg(delta_avg_wait_time_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_resource_average"
            },
            "name": "wait_stats_resource_average"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, wait_type, signal_wait_time_ms, waiting_tasks_count\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_signal_wait_time_ms = iif(signal_wait_time_ms >= prev(signal_wait_time_ms), signal_wait_time_ms - prev(signal_wait_time_ms), long(null)),\\r\\n         delta_waiting_tasks_count = iif(waiting_tasks_count >= prev(waiting_tasks_count), waiting_tasks_count - prev(waiting_tasks_count), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend delta_avg_signal_wait_time_ms = iif(delta_waiting_tasks_count != 0, toreal(delta_signal_wait_time_ms) / delta_waiting_tasks_count, real(null))\\r\\n| make-series metric = avg(delta_avg_signal_wait_time_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_signal_average"
            },
            "name": "wait_stats_signal_average"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, wait_type, waiting_tasks_count\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_waiting_tasks_count = iif(waiting_tasks_count >= prev(waiting_tasks_count), waiting_tasks_count - prev(waiting_tasks_count), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = toreal(delta_waiting_tasks_count) / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_waiting_tasks"
            },
            "name": "wait_stats_waiting_tasks"
          },
          {
            "type": 1,
            "content": {
              "json": "|Chart|Description|\r\n|:-|:-|\r\n|Cumulative waits|The Y axis shows the cumulative time all tasks spent waiting per second, for top wait types.|\r\n|Average waits|The Y axis shows the average time a task has spent waiting, for wait types. Calculated as *cumulative resource wait time* / *number of waiting tasks*.|\r\n|Average signal waits|The Y axis shows the average time a task spent waiting for CPU to become available after the resource wait was over. High values may indicate CPU pressure.|\r\n|Waiting tasks|The Y axis shows the number of waiting tasks, for top wait types.|\r\n\r\nData is collected from [sys.dm_os_wait_stats](https://go.microsoft.com/fwlink/?linkid=2198648)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "waits_help"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqlserver_wait_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "waits_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Workload statistics",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where object_name == \\\"Batch Resp Statistics\\\" and instance_name == \\\"Elapsed Time:Requests\\\"\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| partition hint.strategy = shuffle by counter_name\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| summarize count_requests = sum(delta_cntr_value) by counter_name\\r\\n)\\r\\n| project low_elapsed_time_ms = case(\\r\\n                                    counter_name == \\\"Batches >=000000ms & <000001ms\\\", \\\"≥0 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000001ms & <000002ms\\\", \\\"≥1 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000002ms & <000005ms\\\", \\\"≥2 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000005ms & <000010ms\\\", \\\"≥5 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000010ms & <000020ms\\\", \\\"≥10 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000020ms & <000050ms\\\", \\\"≥20 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000050ms & <000100ms\\\", \\\"≥50 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000100ms & <000200ms\\\", \\\"≥100 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000200ms & <000500ms\\\", \\\"≥200 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000500ms & <001000ms\\\", \\\"≥500 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=001000ms & <002000ms\\\", \\\"≥1 s\\\",\\r\\n                                    counter_name == \\\"Batches >=002000ms & <005000ms\\\", \\\"≥2 s\\\",\\r\\n                                    counter_name == \\\"Batches >=005000ms & <010000ms\\\", \\\"≥5 s\\\",\\r\\n                                    counter_name == \\\"Batches >=010000ms & <020000ms\\\", \\\"≥10 s\\\",\\r\\n                                    counter_name == \\\"Batches >=020000ms & <050000ms\\\", \\\"≥20 s\\\",\\r\\n                                    counter_name == \\\"Batches >=050000ms & <100000ms\\\", \\\"≥50 s\\\",\\r\\n                                    counter_name == \\\"Batches >=100000ms\\\", \\\"≥100 s\\\",\\r\\n                                    \\\"\\\"\\r\\n                                    ),\\r\\n        count_requests, counter_name\\r\\n| sort by counter_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "showAnalytics": true,
              "title": "Requests by duration",
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "categoricalbar",
              "chartSettings": {
                "group": "low_elapsed_time_ms",
                "createOtherGroup": 0,
                "showLegend": true
              }
            },
            "name": "batch_response_stats"
          },
          {
            "type": 1,
            "content": {
              "json": "This chart shows a distribution of request durations by elapsed time. Each bar on the histogram corresponds to the number of requests with durations in certain time bucket. For example, the bar labeled `≥1 ms` shows the number of requests with elapsed time ranging from 1 millisecond (inclusive) to 2 milliseconds.\r\n\r\nFor the same workload, a shift in the number of requests to the right over time indicates an increase in query response time. "
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "batch_response_stats_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where (\\r\\n        (object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"SQL Compilations/sec\\\",\\\"SQL Re-Compilations/sec\\\"))\\r\\n        or\\r\\n        (object_name == \\\"General Statistics\\\" and counter_name in (\\\"Temp Tables Creation Rate\\\"))\\r\\n        or\\r\\n        (object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Query optimizations/sec\\\") and instance_name != \\\"internal\\\")\\r\\n        )\\r\\n| project sample_time_utc, object_name, cntr_value, counter_name\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric, long(null), false), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Compilation, optimization, temp tables",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "SQL Compilations/sec",
                    "label": "SQL compilations",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "SQL Re-Compilations/sec",
                    "label": "SQL recompilations",
                    "color": "red"
                  },
                  {
                    "seriesName": "Temp Tables Creation Rate",
                    "label": "Temp tables creation",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Query optimizations/sec",
                    "label": "Query optimizations",
                    "color": "redBright"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "rate_statistics_1"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`SQL compilations`|A query is compiled when it is not found in plan cache. If a query is parameterized (explicitly or automatically), it may be matched to an existing query in plan cache. Such queries may still be compiled, but they avoid CPU-intentive optimization.|\r\n|`Query optimizations`|As part of query compilation, a query may be optimized to create an execution plan. Optimization is a CPU-intentive process. Make sure queries are parameterized to avoid unnecessary optimization. Specify data type, length, precision, and scale in parameter definition. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198744).|\r\n|`SQL recompilations`|A query is re-compiled because its previously cached plan is no longer valid or optimal. This may happen because of schema and data changes. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198738).|\r\n|`Temp tables creation`|The number of temporary tables and table variables created per second. Temp table caching alleviates possible contention due to high rate of temp table creation.|\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where (\\r\\n        (object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"SQL Attention rate\\\"))\\r\\n        or\\r\\n        (object_name == \\\"General Statistics\\\" and counter_name in (\\\"Logins/sec\\\",\\\"Logouts/sec\\\"))\\r\\n        or\\r\\n        (object_name == \\\"SQL Errors\\\" and counter_name == \\\"Errors/sec\\\" and instance_name == \\\"User Errors\\\")\\r\\n        or\\r\\n        (object_name == \\\"Access Methods\\\" and counter_name == \\\"Table Lock Escalations/sec\\\")\\r\\n        or\\r\\n        (object_name == \\\"Locks\\\" and counter_name == \\\"Number of Deadlocks/sec\\\" and instance_name == \\\"_Total\\\")\\r\\n        )\\r\\n| project sample_time_utc, object_name, cntr_value, \\r\\n          counter_name = case(\\r\\n                             counter_name == \\\"Errors/sec\\\" and instance_name == \\\"User Errors\\\", \\\"User Errors/sec\\\",\\r\\n                             counter_name == \\\"Number of Deadlocks/sec\\\", \\\"Deadlocks/sec\\\",\\r\\n                             counter_name\\r\\n                             )\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Deadlocks, lock escalation, logins, logouts, timeouts",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Logouts/sec",
                    "label": "Logouts",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "Logins/sec",
                    "label": "Logins",
                    "color": "green"
                  },
                  {
                    "seriesName": "SQL Attention rate",
                    "label": "Attentions",
                    "color": "orange"
                  },
                  {
                    "seriesName": "User Errors/sec",
                    "label": "User errors",
                    "color": "gray"
                  },
                  {
                    "seriesName": "Table Lock Escalations/sec",
                    "label": "Table lock escalations",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Deadlocks/sec",
                    "label": "Deadlocks",
                    "color": "purpleDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "rate_statistics_2"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Deadlocks`|A deadlock occurs when two or more requests block each other, requiring the database engine to terminate one of them. In some workloads, deadlocks occur routinely. A spike in the number of deadlocks may require investigation. [Learn more](https://go.microsoft.com/fwlink/?linkid=2201713).|\r\n|`Logins`|A high number of logins and logouts per second may indicate that connection pooling is not used. Learn more: [connection pooling in ADO.NET (SqlClient)](https://go.microsoft.com/fwlink/?linkid=2198736), and [connection pooling in JDBC Driver for SQL Server](https://go.microsoft.com/fwlink/?linkid=2198857).|\r\n|`Logouts`|A spike in logouts per second may indicate a restart of client application|\r\n|`User errors`|In many applications, user errors occur routinely. A spike in the number of user errors may require investigation.|\r\n|`Attentions`|An attention event occurs when a query times out or is canceled. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198868).|\r\n|`Table lock escalations`|Lock escalation to the object (table) level reduces memory use, but may cause lock blocking. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198651).|\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where (object_name == \\\"General Statistics\\\" and counter_name in (\\\"Active Temp Tables\\\",\\\"Logical Connections\\\",\\\"Processes blocked\\\",\\\"User Connections\\\"))\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Connections, blocked processes, temp tables",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "User Connections",
                    "label": "User connections",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "Active Temp Tables",
                    "label": "Active temp tables",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Logical Connections",
                    "label": "Logical connections",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Processes blocked",
                    "label": "Processes blocked",
                    "color": "redBright"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 1
                    }
                  }
                }
              }
            },
            "name": "count_statistics"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Active temp tables`|The number of temporary tables or table variables in use|\r\n|`Logical connections`|If multiple active result sets (MARS) is used, each physical connection may be used by multiple logical sessions. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198630).|\r\n|`Processes blocked`|The number of sessions that were blocked at data collection time. This may include system sessions. See historical samples on the Activity tab to find longer-term session blocking. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198855).|\r\n|`User connections`|The number of physical connections, excluding system connections|\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_3"
          },
          {
            "type": 1,
            "content": {
              "json": "Data is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_4"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqlserver_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "workload_statistics_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Memory",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_memory_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, memory_clerk_type, memory_clerk_name, memory_size_mb\\r\\n| make-series metric = avg(memory_size_mb) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by memory_clerk_type\\r\\n| project memory_clerk_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Memory clerks",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "memory_clerk_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "memory_clerks"
          },
          {
            "type": 1,
            "content": {
              "json": "All significant memory allocations by components of the database engine are tracked under specific  memory clerks. It is common for some memory clerks, such as `MEMORYCLERK_SQLBUFFERPOOL` and `CACHESTORE_COLUMNSTOREOBJECTPOOL`, to allocate large amounts of memory to cache data pages. Persistently high memory utilization by other memory clerks may require investigation. Data is collected from [sys.dm.os_memory_clerks](https://go.microsoft.com/fwlink/?linkid=2198866)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_clerks"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where object_name == \\\"Memory Manager\\\"\\r\\n| where counter_name in (\\\"Target Server Memory (KB)\\\",\\\"Total Server Memory (KB)\\\",\\\"Granted Workspace Memory (KB)\\\",\\\"Lock Memory (KB)\\\")\\r\\n| project sample_time_utc, counter_name = replace_string(counter_name, \\\" (KB)\\\", \\\"\\\"), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Memory manager",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Target Server Memory",
                    "label": "Target server memory"
                  },
                  {
                    "seriesName": "Total Server Memory",
                    "label": "Total server memory"
                  },
                  {
                    "seriesName": "Lock Memory",
                    "label": "Lock memory"
                  },
                  {
                    "seriesName": "Granted Workspace Memory",
                    "label": "Granted workspace memory"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 3,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "memory_manager"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where object_name == \\\"Memory Manager\\\"\\r\\n| where counter_name in (\\\"Memory Grants Outstanding\\\",\\\"Memory Grants Pending\\\")\\r\\n| extend counter_name = case(counter_name == \\\"Memory Grants Outstanding\\\", \\\"Outstanding grants\\\", counter_name == \\\"Memory Grants Pending\\\", \\\"Pending grants\\\", \\\"\\\")\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Memory grants",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "memory_grants"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Target server memory`|The database engine does not allocate memory beyond its current target memory. Target memory is determined by initial engine configuration, and may be adjusted if external memory pressure occurs.|\r\n|`Total server memory`|Total memory allocated by the database engine. Commonly, total server memory closely matches target server memory because the database engine allocates all available memory for various caches. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198638).|\r\n|`Lock memory`|Memory allocated for locks. High lock memory may be due to large transactions and/or disabled lock escalation. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198651).|\r\n|`Granted workspace memory`|Memory allocated for query processing, also known as query memory grants. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198869).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_memory_manager"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Outstanding grants`|A non-zero value indicates that some currently running queries have allocated query workspace memory.|\r\n|`Pending grants`|A non-zero value indicates that some queries cannot start or continue execution because they are waiting for a memory grant. Such waits are tracked under `RESOURCE_SEMAPHORE` wait type. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198636).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_memory_grants"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where object_name == \\\"Resource Pool Stats\\\" and counter_name == \\\"Out of memory count\\\"\\r\\n| project sample_time_utc, instance_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by instance_name\\r\\n| project instance_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 2,
              "showAnalytics": true,
              "title": "Resource pool out of memory (OOM) events",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "XTP pool",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "User pool",
                    "color": "redBright"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "resource_pools_oom"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where (\\r\\n        (object_name == \\\"Buffer Manager\\\" and counter_name == \\\"Buffer cache hit ratio\\\")\\r\\n        or\\r\\n        (object_name == \\\"Plan Cache\\\" and counter_name == \\\"Cache Hit Ratio\\\" and instance_name == \\\"_Total\\\")\\r\\n        )\\r\\n| project sample_time_utc, counter_name = iif(object_name == \\\"Plan Cache\\\" and counter_name == \\\"Cache Hit Ratio\\\", \\\"Plan cache hit ratio\\\", counter_name), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Cache hit ratios",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Buffer cache hit ratio",
                    "color": "green"
                  },
                  {
                    "seriesName": "Plan cache hit ratio",
                    "color": "magenta"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "cache_hit_ratios"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`OOM count`|The number of out-of-memory events that have occurred in each resource pool. [Learn more](https://go.microsoft.com/fwlink/?linkid=2206120).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_pool_oom"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Buffer cache hit ratio`|Percentage of data pages that were found in the buffer pool (an in-memory data cache), avoiding slower reads from storage. When sufficient memory is provisioned for the workload, the value at steady state is close to 100%. Occasional dips are possible as IO-intensive queries execute. [Learn more](https://go.microsoft.com/fwlink/?linkid=2197944).|\r\n|`Plan cache hit ratio`|Query execution plans are optimized and stored in an in-memory cache for reuse. This metric is the percentage of plans that were found in plan cache during query execution. When queries are properly parameterized (by specifying data type, length, precision, and scale in parameter definition), query plan reuse is facilitated and this metric tends to be close to 100%. When this metric is much lower than 100%, it may indicate that essentialy the same queries are optimized and stored repeatedly, increasing CPU and memory usage. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198738).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_cache_hit_ratios"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where object_name == \\\"Buffer Manager\\\"\\r\\n| where counter_name in (\\\"Background writer pages/sec\\\",\\\"Checkpoint pages/sec\\\",\\\"Lazy writes/sec\\\",\\\"Page reads/sec\\\",\\\"Page writes/sec\\\",\\\"Readahead pages/sec\\\")\\r\\n| extend counter_name = replace_string(counter_name, \\\"/sec\\\", \\\"\\\")\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| partition hint.strategy = shuffle by counter_name\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n)\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Buffer manager",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "buffer_manager"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where object_name == \\\"Buffer Node\\\" and counter_name == \\\"Page life expectancy\\\"\\r\\n| project sample_time_utc, numa_node = strcat(\\\"NUMA node: \\\", instance_name), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = 0 on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by numa_node\\r\\n| project numa_node, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Page life expectancy",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "page_life_expectancy"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Background writer pages`|Data pages written by indirect checkpoint. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198733).|\r\n|`Checkpoint pages`|Data pages written by automatic or manual checkpoints. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198739).|\r\n|`Lazy writes`|Data pages written by the lazy writer. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198747).|\r\n|`Readahead pages`|Pages read from storage using larger and more efficient IO requests in anticipation of their use by the workload. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198865).|\r\n|`Page reads`|Pages read from storage into the buffer pool. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198853).|\r\n|`Page writes`|Data pages written to data files. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198747).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_buffer_manager"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Page life expectancy`|The time a page is predicted to stay in the buffer pool if it is not referenced by workload. Deep drops in page life expectancy, or consistently low values may be caused by IO intensive queries that flush out most of cached pages from the buffer pool.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_ple"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqlserver_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlserver_memory_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "memory_group"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let trend = (\\r\\nsqlserver_volume_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, volume_id, available_volume_storage_ratio = toreal(available_mb / total_mb)\\r\\n| make-series available_volume_storage_ratio_trend = avg(available_volume_storage_ratio) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by volume_id\\r\\n);\\r\\nsqlserver_volume_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize arg_max(sample_time_utc, *) by volume_id\\r\\n| extend last_available_volume_storage_ratio = toreal(toreal(available_mb) / total_mb),\\r\\n         volume_label = strcat(volume_mount_point, \\\" \\\", case(is_compressed == 1 and is_read_only == 1, \\\"(Compressed, read-only)\\\", is_compressed == 1 and is_read_only == 0, \\\"(Compressed)\\\", is_compressed == 0 and is_read_only == 1, \\\"(Read-only)\\\", \\\"\\\")),\\r\\n         total_file_size_mb = toreal(total_data_file_size_mb + total_log_file_size_mb)\\r\\n| extend total_file_size_label = strcat(round(100 * total_data_file_size_mb/total_file_size_mb, 1), \\\"% | \\\", round(100 * total_log_file_size_mb/total_file_size_mb, 1), \\\"%\\\")\\r\\n| join kind=leftouter trend on volume_id\\r\\n| project volume_label, logical_volume_name, file_system_type, last_available_volume_storage_ratio, available_volume_storage_ratio_trend = series_fill_linear(available_volume_storage_ratio_trend), available_mb, total_mb, total_file_size_mb, count_databases, count_data_files, count_log_files, count_filestream_or_xtp_directories, total_data_file_size_mb, total_log_file_size_mb, total_file_size_label\\r\\n| sort by volume_label asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "Storage volume consumption",
        "noDataMessage": "There is no data for specified parameters.",
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "last_available_volume_storage_ratio",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": 1,
                "palette": "redGreen",
                "customColumnWidthSetting": "15ch"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "percent",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "available_volume_storage_ratio_trend",
              "formatter": 21,
              "formatOptions": {
                "min": 0,
                "max": 1,
                "palette": "redGreen"
              },
              "tooltipFormat": {
                "tooltip": "Change in available size over selected time range"
              }
            },
            {
              "columnMatch": "available_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_file_size_mb",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"total_file_size_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "total_data_file_size_mb",
                      "color": "blue"
                    },
                    {
                      "columnName": "total_log_file_size_mb",
                      "color": "greenDark"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "Data files (blue), log files (green)"
              }
            },
            {
              "columnMatch": "count_databases",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              },
              "tooltipFormat": {
                "tooltip": "The number of databases with at least one file on the volume"
              }
            },
            {
              "columnMatch": "count_data_files",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "count_log_files",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "count_filestream_or_xtp_directories",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_data_file_size_mb",
              "formatter": 5,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_log_file_size_mb",
              "formatter": 5,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_file_size_label",
              "formatter": 5
            }
          ],
          "labelSettings": [
            {
              "columnId": "volume_label",
              "label": "Volume"
            },
            {
              "columnId": "logical_volume_name",
              "label": "Volume name"
            },
            {
              "columnId": "file_system_type",
              "label": "File system"
            },
            {
              "columnId": "last_available_volume_storage_ratio",
              "label": "Available %"
            },
            {
              "columnId": "available_volume_storage_ratio_trend",
              "label": "Available size trend"
            },
            {
              "columnId": "available_mb",
              "label": "Available size"
            },
            {
              "columnId": "total_mb",
              "label": "Total size"
            },
            {
              "columnId": "total_file_size_mb",
              "label": "Data vs. log size"
            },
            {
              "columnId": "count_databases",
              "label": "Databases"
            },
            {
              "columnId": "count_data_files",
              "label": "Data files"
            },
            {
              "columnId": "count_log_files",
              "label": "Log files"
            },
            {
              "columnId": "count_filestream_or_xtp_directories",
              "label": "Filestream/XTP directories"
            },
            {
              "columnId": "total_data_file_size_mb",
              "label": "Data files size"
            },
            {
              "columnId": "total_log_file_size_mb",
              "label": "Log files size"
            }
          ]
        },
        "tileSettings": {
          "titleContent": {
            "columnMatch": "metric_name",
            "formatter": 1,
            "tooltipFormat": {
              "tooltip": "Percentage of maximum size. For more information, see Storage consumption details."
            }
          },
          "rightContent": {
            "columnMatch": "last_metric_value",
            "formatter": 12,
            "formatOptions": {
              "min": 0,
              "max": 1,
              "palette": "greenRed"
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "percent",
                "minimumFractionDigits": 2
              },
              "emptyValCustomText": "-"
            }
          },
          "secondaryContent": {
            "columnMatch": "metric_value",
            "formatter": 9,
            "formatOptions": {
              "min": 0,
              "max": 1,
              "palette": "greenRed"
            }
          },
          "showBorder": false,
          "sortCriteriaField": "tile_ordinal",
          "sortOrderField": 1
        },
        "graphSettings": {
          "type": 0
        },
        "chartSettings": {
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "Maximum query store",
              "color": "redBright"
            },
            {
              "seriesName": "Persistent version store",
              "color": "orange"
            },
            {
              "seriesName": "Used query store",
              "color": "green"
            },
            {
              "seriesName": "Online index version store",
              "color": "pink"
            },
            {
              "seriesName": "Hyperscale RBPEX",
              "color": "blue"
            }
          ],
          "showDataPoints": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 0,
              "options": {
                "style": "percent",
                "useGrouping": true,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "sqlserver_volume_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "volume_storage_consumption"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Storage volume IO statistics",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Metrics on these charts describe storage IO statistics including IOPS, throughput, and latency for volumes used by this database engine instance. Separate charts are provided for reads and writes. Data is collected from [sys.dm_io_virtual_file_stats()](https://go.microsoft.com/fwlink/?linkid=2198746)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "storage_io_stats_help"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "ca53e0e9-7129-4b85-b842-35b42d1ab5c4",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "IOPS",
                  "subTarget": "IOPS",
                  "style": "link",
                  "linkIsContextBlade": true
                },
                {
                  "id": "8b5fd7cb-85e0-4912-aaf3-de7c1b10d7d4",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Throughput",
                  "subTarget": "Throughput",
                  "style": "link"
                },
                {
                  "id": "f6a93425-3f64-42f3-8715-4d59849ff645",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Latency",
                  "subTarget": "Latency",
                  "style": "link"
                }
              ]
            },
            "name": "storage_io_stats_navigation"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_reads, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_reads = iif(num_of_reads >= prev(num_of_reads) and database_id == prev(database_id) and file_id == prev(file_id), num_of_reads - prev(num_of_reads), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| extend iops = toreal(delta_num_of_reads) / delta_io_snapshot_sample_ms * 1000\\r\\n| summarize iops = sum(iops) by sample_time_utc, volume_mount_point, file_type\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), iops\\r\\n| make-series metric = avg(iops) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Read IOPS",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "IOPS"
            },
            "name": "read_iops"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_writes, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_writes = iif(num_of_writes >= prev(num_of_writes) and database_id == prev(database_id) and file_id == prev(file_id), num_of_writes - prev(num_of_writes), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| extend iops = toreal(delta_num_of_writes) / delta_io_snapshot_sample_ms * 1000\\r\\n| summarize iops = sum(iops) by sample_time_utc, volume_mount_point, file_type\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), iops\\r\\n| make-series metric = avg(iops) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Write IOPS",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "IOPS"
            },
            "name": "write_iops"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_bytes_read, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_bytes_read = iif(num_of_bytes_read >= prev(num_of_bytes_read) and database_id == prev(database_id) and file_id == prev(file_id), num_of_bytes_read - prev(num_of_bytes_read), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_bytes_read = sum(delta_num_of_bytes_read) by sample_time_utc, volume_mount_point, file_type, delta_io_snapshot_sample_ms\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), delta_read_throughput = toreal(delta_num_of_bytes_read) / delta_io_snapshot_sample_ms * 1000\\r\\n| make-series metric = avg(delta_read_throughput) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Read throughput",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Throughput"
            },
            "name": "read_throughput"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_bytes_written, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_bytes_written = iif(num_of_bytes_written >= prev(num_of_bytes_written) and database_id == prev(database_id) and file_id == prev(file_id), num_of_bytes_written - prev(num_of_bytes_written), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_bytes_written = sum(delta_num_of_bytes_written) by sample_time_utc, volume_mount_point, file_type, delta_io_snapshot_sample_ms\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), delta_write_throughput = toreal(delta_num_of_bytes_written) / delta_io_snapshot_sample_ms * 1000\\r\\n| make-series metric = avg(delta_write_throughput) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Write throughput",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Throughput"
            },
            "name": "write_throughput"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_reads, io_stall_read_ms, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc\\r\\n| extend delta_num_of_reads = iif(num_of_reads >= prev(num_of_reads) and database_id == prev(database_id) and file_id == prev(file_id), num_of_reads - prev(num_of_reads), long(null)),\\r\\n         delta_io_stall_read_ms = iif(io_stall_read_ms >= prev(io_stall_read_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_stall_read_ms - prev(io_stall_read_ms), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_reads = sum(delta_num_of_reads),\\r\\n            delta_io_stall_read_ms = sum(delta_io_stall_read_ms)\\r\\n  by sample_time_utc, file_type, volume_mount_point\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), delta_read_latency_ms = iif(delta_num_of_reads != 0, toreal(delta_io_stall_read_ms) / delta_num_of_reads, real(null))\\r\\n| make-series metric = avg(delta_read_latency_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Read latency",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Latency"
            },
            "name": "read_latency"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_writes, io_stall_write_ms, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc\\r\\n| extend delta_num_of_writes = iif(num_of_writes >= prev(num_of_writes) and database_id == prev(database_id) and file_id == prev(file_id), num_of_writes - prev(num_of_writes), long(null)),\\r\\n         delta_io_stall_write_ms = iif(io_stall_write_ms >= prev(io_stall_write_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_stall_write_ms - prev(io_stall_write_ms), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_writes = sum(delta_num_of_writes),\\r\\n            delta_io_stall_write_ms = sum(delta_io_stall_write_ms)\\r\\n  by sample_time_utc, file_type, volume_mount_point\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), delta_write_latency_ms = iif(delta_num_of_writes != 0, toreal(delta_io_stall_write_ms) / delta_num_of_writes, real(null))\\r\\n| make-series metric = avg(delta_write_latency_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Write latency",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Latency"
            },
            "name": "write_latency"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "sqlserver_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "storage_io_stats_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d7ea0f46-a742-4e7d-8fed-b1c1dca01882",
            "version": "KqlParameterItem/1.0",
            "name": "propertySampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqlserver_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "property_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| make-series metric = count() default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No server property samples are available",
        "timeBrushParameterName": "timeRange",
        "exportParameterName": "propertyHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "purple"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqlserver_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "property_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize count_samples = count()\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No server property samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqlserver_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "property_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "fffee6ff-a8f5-4b0e-ab23-0b28ffb25ef9",
            "version": "KqlParameterItem/1.0",
            "name": "propertyLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize sample_time_utc = max(sample_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "a18f210f-d185-49b4-a920-c1619a45769c",
            "version": "KqlParameterItem/1.0",
            "name": "propertyHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc between (todatetime(\\\"{propertyHistoricalSample:$.x}\\\") .. (todatetime(\\\"{propertyHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize sample_time_utc = min(sample_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "deccf901-119f-4c18-860a-bb34fbd64736",
            "version": "KqlParameterItem/1.0",
            "name": "propertySampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "propertySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "propertyLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "propertySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "propertyHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "propertyLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqlserver_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "property_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqlserver_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "propertySampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "selected_property_sample"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, service_name:string, service_ordinal:int) [\\r\\n1, \\\"SQL Server\\\", 1,\\r\\n1, \\\"SQL Agent\\\", 2,\\r\\n1, \\\"Full-Text Search\\\", 3,\\r\\n1, \\\"Launchpad\\\", 4\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project service_name, \\r\\n          service_ordinal,\\r\\n          service_status = case(\\r\\n                                service_name == \\\"SQL Server\\\", sqlserver_service_status, \\r\\n                                service_name == \\\"SQL Agent\\\", sqlagent_service_status, \\r\\n                                service_name == \\\"Full-Text Search\\\", fulltext_service_status, \\r\\n                                service_name == \\\"Launchpad\\\", launchpad_service_status, \\r\\n                                \\\"\\\"\\r\\n                                ),\\r\\n          service_startup_type = case(\\r\\n                                     service_name == \\\"SQL Server\\\", sqlserver_service_startup_type, \\r\\n                                     service_name == \\\"SQL Agent\\\", sqlagent_service_startup_type, \\r\\n                                     service_name == \\\"Full-Text Search\\\", fulltext_service_startup_type, \\r\\n                                     service_name == \\\"Launchpad\\\", launchpad_service_startup_type, \\r\\n                                     \\\"\\\"\\r\\n                                     ),\\r\\n          service_process_id = case(\\r\\n                                   service_name == \\\"SQL Server\\\", sqlserver_service_process_id, \\r\\n                                   service_name == \\\"SQL Agent\\\", sqlagent_service_process_id, \\r\\n                                   service_name == \\\"Full-Text Search\\\", fulltext_service_process_id, \\r\\n                                   service_name == \\\"Launchpad\\\", launchpad_service_process_id, \\r\\n                                   int(null)\\r\\n                                   )\\r\\n| sort by service_ordinal asc\\r\\n| project-away service_ordinal;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Services",
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "labelSettings": [
                  {
                    "columnId": "service_name",
                    "label": "Service"
                  },
                  {
                    "columnId": "service_status",
                    "label": "Status"
                  },
                  {
                    "columnId": "service_startup_type",
                    "label": "Startup type"
                  },
                  {
                    "columnId": "service_process_id",
                    "label": "Process ID"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "properties_services"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project cluster_members = todynamic(cluster_members)\\r\\n| mv-expand cluster_members\\r\\n| mv-expand member_name = cluster_members.member_name to typeof(string), member_type_desc = cluster_members.member_type_desc to typeof(string), member_state_desc = cluster_members.member_state_desc to typeof(string), count_quorum_votes = cluster_members.count_quorum_votes to typeof(int)\\r\\n| extend cluster_network = extract_json(\\\"$.cluster_network\\\", tostring(cluster_members), typeof(dynamic)),\\r\\n         machine_name = iif(member_type_desc == \\\"CLUSTER_NODE\\\", member_name, \\\"\\\"),\\r\\n         witness = iif(member_type_desc in (\\\"DISK_WITNESS\\\", \\\"FILE_SHARE_WITNESS\\\", \\\"CLOUD_WITNESS\\\"), member_name, \\\"\\\")\\r\\n| project machine_name, witness, member_type_desc, member_state_desc, count_quorum_votes, cluster_network, member_name\\r\\n| sort by tolower(iif(member_type_desc in (\\\"DISK_WITNESS\\\", \\\"FILE_SHARE_WITNESS\\\", \\\"CLOUD_WITNESS\\\"), \\\"|\\\", member_name)) asc, witness asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Cluster members",
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "machine_name",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "static",
                        "templateId": "Community-Workbooks/Database watcher/SQL Server/instance",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "SQL Server instance",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "machineName",
                            "source": "column",
                            "value": "machine_name"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "linkAdxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "linkAdxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "tabName",
                            "source": "static",
                            "value": "Properties"
                          },
                          {
                            "name": "serverName",
                            "source": "column",
                            "value": "machine_name"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "columnMatch": "member_state_desc",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "UP",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "DOWN",
                          "representation": "failed",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "cluster_network",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "130ch"
                    }
                  },
                  {
                    "columnMatch": "member_name",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "machine_name",
                    "label": "Machine"
                  },
                  {
                    "columnId": "witness",
                    "label": "Witness"
                  },
                  {
                    "columnId": "member_type_desc",
                    "label": "Type"
                  },
                  {
                    "columnId": "member_state_desc",
                    "label": "State"
                  },
                  {
                    "columnId": "count_quorum_votes",
                    "label": "Votes"
                  },
                  {
                    "columnId": "cluster_network",
                    "label": "Network"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "properties_cluster_members"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"sql_server_edition\\\",\\r\\n1, \\\"product_version\\\",\\r\\n1, \\\"sql_server_version\\\",\\r\\n1, \\\"product_level\\\",\\r\\n1, \\\"product_update_level\\\",\\r\\n1, \\\"fci_virtual_server_name\\\",\\r\\n1, \\\"current_utc_offset\\\",\\r\\n1, \\\"database_engine_memory_model\\\",\\r\\n1, \\\"virtual_machine_type_desc\\\",\\r\\n1, \\\"host_platform\\\",\\r\\n1, \\\"host_distribution\\\",\\r\\n1, \\\"host_release\\\",\\r\\n1, \\\"cluster_name\\\",\\r\\n1, \\\"quorum_type_desc\\\",\\r\\n1, \\\"quorum_state_desc\\\",\\r\\n1, \\\"server_name\\\",\\r\\n1, \\\"machine_name\\\"\\r\\n];\\r\\nsqlserver_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, sql_server_edition, product_version, sql_server_version, product_level, product_update_level, fci_virtual_server_name, current_utc_offset, database_engine_memory_model, virtual_machine_type_desc, host_platform, host_distribution, host_release, cluster_name, quorum_type_desc = iif(is_clustered == 1 or is_availability_groups_enabled == 1, quorum_type_desc, \\\"\\\"), quorum_state_desc = iif(is_clustered == 1 or is_availability_groups_enabled == 1, quorum_state_desc, \\\"\\\"), is_clustered, is_availability_groups_enabled, server_name, machine_name\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"sql_server_edition\\\", sql_server_edition,\\r\\n                            property_name == \\\"product_version\\\", product_version,\\r\\n                            property_name == \\\"sql_server_version\\\", sql_server_version,\\r\\n                            property_name == \\\"product_level\\\", product_level,\\r\\n                            property_name == \\\"product_update_level\\\", product_update_level,\\r\\n                            property_name == \\\"fci_virtual_server_name\\\", fci_virtual_server_name,\\r\\n                            property_name == \\\"current_utc_offset\\\", current_utc_offset,\\r\\n                            property_name == \\\"database_engine_memory_model\\\", database_engine_memory_model,\\r\\n                            property_name == \\\"virtual_machine_type_desc\\\", virtual_machine_type_desc,\\r\\n                            property_name == \\\"host_platform\\\", host_platform,\\r\\n                            property_name == \\\"host_distribution\\\", host_distribution,\\r\\n                            property_name == \\\"host_release\\\", host_release,\\r\\n                            property_name == \\\"cluster_name\\\", cluster_name,\\r\\n                            property_name == \\\"quorum_type_desc\\\", quorum_type_desc,\\r\\n                            property_name == \\\"quorum_state_desc\\\", quorum_state_desc,\\r\\n                            property_name == \\\"server_name\\\", server_name,\\r\\n                            property_name == \\\"machine_name\\\", machine_name,\\r\\n                            \\\"\\\"\\r\\n                            )\\r\\n| project-away sql_server_edition, product_version, sql_server_version, product_level, product_update_level, fci_virtual_server_name, current_utc_offset, database_engine_memory_model, virtual_machine_type_desc, host_platform, host_distribution, host_release, cluster_name, quorum_type_desc, quorum_state_desc, server_name, machine_name\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"database_engine_memory_model\\\" and property_value == \\\"CONVENTIONAL\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"database_engine_memory_model\\\" and property_value == \\\"LOCK_PAGES\\\", \\\"info\\\", \\r\\n                        property_name == \\\"database_engine_memory_model\\\" and property_value == \\\"LARGE_PAGES\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"quorum_state_desc\\\" and (is_clustered == 1 or is_availability_groups_enabled == 1) and property_value != \\\"NORMAL_QUORUM\\\", \\\"warning\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"database_engine_memory_model\\\" and property_value == \\\"CONVENTIONAL\\\", \\\"Not commonly recommended\\\", \\r\\n                        property_name == \\\"database_engine_memory_model\\\" and property_value == \\\"LOCK_PAGES\\\", \\\"Learn more\\\", \\r\\n                        property_name == \\\"database_engine_memory_model\\\" and property_value == \\\"LARGE_PAGES\\\", \\\"Not commonly recommended\\\", \\r\\n                        property_name == \\\"quorum_state_desc\\\" and (is_clustered == 1 or is_availability_groups_enabled == 1) and property_value != \\\"NORMAL_QUORUM\\\", \\\"Unexpected value, investigate\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"database_engine_memory_model\\\" and property_value == \\\"CONVENTIONAL\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198638\\\", \\r\\n                        property_name == \\\"database_engine_memory_model\\\" and property_value == \\\"LOCK_PAGES\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2201912\\\", \\r\\n                        property_name == \\\"database_engine_memory_model\\\" and property_value != \\\"LARGE_PAGES\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2202820\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away is_clustered, is_availability_groups_enabled\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "server_properties_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"engine_edition\\\",\\r\\n1, \\\"logical_cpu_count\\\",\\r\\n1, \\\"server_maxdop\\\",\\r\\n1, \\\"cost_threshold_for_parallelism\\\",\\r\\n1, \\\"fill_factor_percent\\\",\\r\\n1, \\\"user_options\\\",\\r\\n1, \\\"max_workers_count\\\",\\r\\n1, \\\"socket_count\\\",\\r\\n1, \\\"cores_per_socket\\\",\\r\\n1, \\\"numa_node_count\\\",\\r\\n1, \\\"ipall_tcp_port\\\",\\r\\n1, \\\"ipall_dynamic_ports\\\",\\r\\n1, \\\"remote_dac_tcp_port\\\",\\r\\n1, \\\"count_dumps\\\"\\r\\n];\\r\\nsqlserver_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, engine_edition, logical_cpu_count, server_maxdop, cost_threshold_for_parallelism, fill_factor_percent, user_options, max_workers_count, socket_count, cores_per_socket, numa_node_count, ipall_tcp_port, ipall_dynamic_ports, remote_dac_tcp_port, count_dumps\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"engine_edition\\\", toreal(engine_edition),\\r\\n                            property_name == \\\"logical_cpu_count\\\", toreal(logical_cpu_count),\\r\\n                            property_name == \\\"server_maxdop\\\", toreal(server_maxdop),\\r\\n                            property_name == \\\"cost_threshold_for_parallelism\\\", toreal(cost_threshold_for_parallelism),\\r\\n                            property_name == \\\"fill_factor_percent\\\", toreal(fill_factor_percent),\\r\\n                            property_name == \\\"user_options\\\", toreal(user_options),\\r\\n                            property_name == \\\"max_workers_count\\\", toreal(max_workers_count),\\r\\n                            property_name == \\\"socket_count\\\", toreal(socket_count),\\r\\n                            property_name == \\\"cores_per_socket\\\", toreal(cores_per_socket),\\r\\n                            property_name == \\\"numa_node_count\\\", toreal(numa_node_count),\\r\\n                            property_name == \\\"ipall_tcp_port\\\", toreal(ipall_tcp_port),\\r\\n                            property_name == \\\"ipall_dynamic_ports\\\", toreal(ipall_dynamic_ports),\\r\\n                            property_name == \\\"remote_dac_tcp_port\\\", toreal(remote_dac_tcp_port),\\r\\n                            property_name == \\\"count_dumps\\\", toreal(count_dumps),\\r\\n                            real(null)\\r\\n                            )\\r\\n| project-away engine_edition, server_maxdop, cost_threshold_for_parallelism, fill_factor_percent, user_options, max_workers_count, socket_count, cores_per_socket, numa_node_count, ipall_tcp_port, ipall_dynamic_ports, remote_dac_tcp_port, count_dumps\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"server_maxdop\\\" and logical_cpu_count > 8 and (toint(property_value) > 8 or toint(property_value) == 0), \\\"warning\\\", \\r\\n                        property_name == \\\"server_maxdop\\\" and toint(property_value) == 1, \\\"info\\\", \\r\\n                        property_name == \\\"fill_factor_percent\\\" and property_value !in (0,100), \\\"warning\\\", \\r\\n                        property_name == \\\"user_options\\\" and property_value != 0, \\\"info\\\", \\r\\n                        property_name == \\\"max_workers_count\\\" and case(\\r\\n                                                                     logical_cpu_count between (1 .. 4) and property_value != 512, true,\\r\\n                                                                     logical_cpu_count between (5 .. 8) and property_value != 576, true,\\r\\n                                                                     logical_cpu_count between (9 .. 16) and property_value != 704, true,\\r\\n                                                                     logical_cpu_count between (17 .. 32) and property_value != 960, true,\\r\\n                                                                     logical_cpu_count between (33 .. 64) and property_value != 1472, true,\\r\\n                                                                     logical_cpu_count between (65 .. 128) and property_value != 4480, true,\\r\\n                                                                     logical_cpu_count between (129 .. 256) and property_value != 8576, true,\\r\\n                                                                     false), \\\"info\\\", \\r\\n                        property_name == \\\"ipall_dynamic_ports\\\" and property_value == 0, \\\"warning\\\", \\r\\n                        property_name == \\\"count_dumps\\\" and property_value != 0, \\\"warning\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"server_maxdop\\\" and logical_cpu_count > 8 and (toint(property_value) > 8 or toint(property_value) == 0), \\\"Configure 'max degree of parallelism' as recommended\\\", \\r\\n                        property_name == \\\"server_maxdop\\\" and toint(property_value) == 1, \\\"Query parallelism is disabled\\\", \\r\\n                        property_name == \\\"fill_factor_percent\\\" and property_value !in (0,100), \\\"Commonly recommended value is 0 or 100\\\", \\r\\n                        property_name == \\\"user_options\\\" and property_value != 0, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"max_workers_count\\\" and case(\\r\\n                                                                     logical_cpu_count between (1 .. 4) and property_value != 512, true,\\r\\n                                                                     logical_cpu_count between (5 .. 8) and property_value != 576, true,\\r\\n                                                                     logical_cpu_count between (9 .. 16) and property_value != 704, true,\\r\\n                                                                     logical_cpu_count between (17 .. 32) and property_value != 960, true,\\r\\n                                                                     logical_cpu_count between (33 .. 64) and property_value != 1472, true,\\r\\n                                                                     logical_cpu_count between (65 .. 128) and property_value != 4480, true,\\r\\n                                                                     logical_cpu_count between (129 .. 256) and property_value != 8576, true,\\r\\n                                                                     false), \\\"Non-default value\\\", \\r\\n                        property_name == \\\"ipall_dynamic_ports\\\" and isnotempty(property_value), \\\"Recommended practice is to use static ports\\\", \\r\\n                        property_name == \\\"count_dumps\\\" and property_value != 0, \\\"Investigate and/or contact support\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"server_maxdop\\\" and logical_cpu_count > 8 and (toint(property_value) > 8 or toint(property_value) == 0), \\\"https://go.microsoft.com/fwlink/?linkid=2201911\\\", \\r\\n                        property_name == \\\"server_maxdop\\\" and toint(property_value) == 1, \\\"https://go.microsoft.com/fwlink/?linkid=2201911\\\", \\r\\n                        property_name == \\\"fill_factor_percent\\\" and property_value !in (0,100), \\\"https://go.microsoft.com/fwlink/?linkid=2201715\\\", \\r\\n                        property_name == \\\"user_options\\\" and property_value != 0, \\\"https://go.microsoft.com/fwlink/?linkid=2201909\\\", \\r\\n                        property_name == \\\"max_workers_count\\\" and case(\\r\\n                                                                     logical_cpu_count between (1 .. 4) and property_value != 512, true,\\r\\n                                                                     logical_cpu_count between (5 .. 8) and property_value != 576, true,\\r\\n                                                                     logical_cpu_count between (9 .. 16) and property_value != 704, true,\\r\\n                                                                     logical_cpu_count between (17 .. 32) and property_value != 960, true,\\r\\n                                                                     logical_cpu_count between (33 .. 64) and property_value != 1472, true,\\r\\n                                                                     logical_cpu_count between (65 .. 128) and property_value != 4480, true,\\r\\n                                                                     logical_cpu_count between (129 .. 256) and property_value != 8576, true,\\r\\n                                                                     false), \\\"https://go.microsoft.com/fwlink/?linkid=2201716\\\", \\r\\n                        property_name == \\\"ipall_dynamic_ports\\\" and property_value == 0, \\\"https://go.microsoft.com/fwlink/?linkid=2201717\\\",\\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away logical_cpu_count\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "server_properties_number"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"server_optimize_for_ad_hoc_workloads\\\",\\r\\n1, \\\"backup_checksum_default\\\",\\r\\n1, \\\"backup_compression_default\\\",\\r\\n1, \\\"remote_admin_connections\\\",\\r\\n1, \\\"tempdb_metadata_memory_optimized\\\",\\r\\n1, \\\"xp_cmdshell\\\",\\r\\n1, \\\"is_instant_file_initialization_enabled\\\",\\r\\n1, \\\"is_clustered\\\",\\r\\n1, \\\"is_availability_groups_enabled\\\",\\r\\n1, \\\"is_windows_auth_only\\\"\\r\\n];\\r\\nsqlserver_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, server_optimize_for_ad_hoc_workloads, backup_checksum_default, backup_compression_default, remote_admin_connections, tempdb_metadata_memory_optimized, xp_cmdshell, is_instant_file_initialization_enabled, is_clustered = tobool(is_clustered), is_availability_groups_enabled = tobool(is_availability_groups_enabled), is_windows_auth_only = tobool(is_windows_auth_only)\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"server_optimize_for_ad_hoc_workloads\\\", server_optimize_for_ad_hoc_workloads,\\r\\n                            property_name == \\\"backup_checksum_default\\\", backup_checksum_default,\\r\\n                            property_name == \\\"backup_compression_default\\\", backup_compression_default,\\r\\n                            property_name == \\\"remote_admin_connections\\\", remote_admin_connections,\\r\\n                            property_name == \\\"tempdb_metadata_memory_optimized\\\", tempdb_metadata_memory_optimized,\\r\\n                            property_name == \\\"xp_cmdshell\\\", xp_cmdshell,\\r\\n                            property_name == \\\"is_instant_file_initialization_enabled\\\", is_instant_file_initialization_enabled,\\r\\n                            property_name == \\\"is_clustered\\\", is_clustered,\\r\\n                            property_name == \\\"is_availability_groups_enabled\\\", is_availability_groups_enabled,\\r\\n                            property_name == \\\"is_windows_auth_only\\\", is_windows_auth_only,\\r\\n                            bool(null)\\r\\n                            )\\r\\n| project-away server_optimize_for_ad_hoc_workloads, backup_checksum_default, backup_compression_default, remote_admin_connections, tempdb_metadata_memory_optimized, xp_cmdshell, is_instant_file_initialization_enabled, is_clustered, is_availability_groups_enabled, is_windows_auth_only\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"server_optimize_for_ad_hoc_workloads\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"backup_checksum_default\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"backup_compression_default\\\" and property_value == false, \\\"info\\\", \\r\\n                        property_name == \\\"remote_admin_connections\\\" and property_value == false, \\\"info\\\", \\r\\n                        property_name == \\\"tempdb_metadata_memory_optimized\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"xp_cmdshell\\\" and property_value == true, \\\"warning\\\", \\r\\n                        property_name == \\\"is_instant_file_initialization_enabled\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"is_windows_auth_only\\\" and property_value == false, \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"server_optimize_for_ad_hoc_workloads\\\", \\\"Non-default value\\\", \\r\\n                        property_name == \\\"backup_checksum_default\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"backup_compression_default\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"remote_admin_connections\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"tempdb_metadata_memory_optimized\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"xp_cmdshell\\\" and property_value == true, \\\"Recommended value is 'Disabled'\\\", \\r\\n                        property_name == \\\"is_instant_file_initialization_enabled\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"is_windows_auth_only\\\" and property_value == false, \\\"Non-default value\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"server_optimize_for_ad_hoc_workloads\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2201714\\\", \\r\\n                        property_name == \\\"backup_checksum_default\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2201718\\\", \\r\\n                        property_name == \\\"backup_compression_default\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2201814\\\", \\r\\n                        property_name == \\\"remote_admin_connections\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2201815\\\", \\r\\n                        property_name == \\\"tempdb_metadata_memory_optimized\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2201816\\\", \\r\\n                        property_name == \\\"xp_cmdshell\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2201817\\\", \\r\\n                        property_name == \\\"is_instant_file_initialization_enabled\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2201902\\\", \\r\\n                        property_name == \\\"is_windows_auth_only\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2201903\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Inactive",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "server_properties_boolean"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"os_total_physical_memory\\\",\\r\\n1, \\\"min_server_memory\\\",\\r\\n1, \\\"max_server_memory\\\"\\r\\n];\\r\\nsqlserver_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, os_total_physical_memory_mb, min_server_memory_mb, max_server_memory_mb\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"os_total_physical_memory\\\", toreal(os_total_physical_memory_mb),\\r\\n                            property_name == \\\"min_server_memory\\\", toreal(min_server_memory_mb),\\r\\n                            property_name == \\\"max_server_memory\\\", toreal(max_server_memory_mb),\\r\\n                            real(null)\\r\\n                            )\\r\\n| project-away os_total_physical_memory_mb, min_server_memory_mb, max_server_memory_mb\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"max_server_memory\\\" and property_value == 2147483647, \\\"warning\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"max_server_memory\\\" and property_value == 2147483647, \\\"Configure 'max server memory (MB)'\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"max_server_memory\\\" and property_value == 2147483647, \\\"https://go.microsoft.com/fwlink/?linkid=2201904\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "server_properties_number_mb"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"database_engine_start_time_utc\\\",\\r\\n1, \\\"last_dump_time_utc\\\"\\r\\n];\\r\\nsqlserver_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, database_engine_start_time_utc, last_dump_time_utc\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"database_engine_start_time_utc\\\", database_engine_start_time_utc,\\r\\n                            property_name == \\\"last_dump_time_utc\\\", last_dump_time_utc,\\r\\n                            datetime(null)\\r\\n                            )\\r\\n| project-away database_engine_start_time_utc, last_dump_time_utc\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 6,
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    },
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "server_properties_datetime"
          },
          {
            "type": 1,
            "content": {
              "json": "Data is collected from [sys.dm_os_sys_info](https://go.microsoft.com/fwlink/?linkid=2198867), [sys.dm_os_sys_memory](https://go.microsoft.com/fwlink/?linkid=2201818), [sys.configurations](https://go.microsoft.com/fwlink/?linkid=2201905), [sys.dm_os_host_info](https://go.microsoft.com/fwlink/?linkid=2201906), [sys.dm_hadr_cluster](https://go.microsoft.com/fwlink/?linkid=2201907), [sys.dm_server_services](https://go.microsoft.com/fwlink/?linkid=2201720), [sys.dm_server_registry](https://go.microsoft.com/fwlink/?linkid=2201908) and several other system views."
            },
            "name": "properties_and_config_help"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqlserver_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "properties_and_configuration_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d9386fce-270f-4949-831a-b2e4919d85d2",
            "version": "KqlParameterItem/1.0",
            "name": "activitySampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqlserver_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "activity_sample_type_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "1d5e4f2a-d6cb-40cc-80c4-839f0d3da37c",
            "version": "KqlParameterItem/1.0",
            "name": "activitySampleSubtype",
            "label": "Sample type",
            "type": 10,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"all\",\"label\":\"All\"},{\"value\":\"blocked\",\"label\":\"Blocked\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "all"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqlserver_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "customWidth": "50",
      "name": "activity_sample_subtype_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_active_sessions\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend blocking_session_id = iif(\\r\\n                                  blocking_session_id in (0, -4, -5), // Do not treat long latch waits as relevant blocking\\r\\n                                  int(null),\\r\\n                                  blocking_session_id\\r\\n                                  )\\r\\n| extend sample_subtype = iif(isnotempty(blocking_session_id), \\\"blocked\\\", \\\"not_blocked\\\")\\r\\n| where \\\"{activitySampleSubtype}\\\" == \\\"all\\\" or (\\\"{activitySampleSubtype}\\\" == \\\"blocked\\\" and sample_subtype == \\\"{activitySampleSubtype}\\\")\\r\\n| make-series metric = count() default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2 by sample_subtype\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No activity samples are available",
        "timeBrushParameterName": "timeRange",
        "exportParameterName": "activityHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "not_blocked",
              "label": "Not blocked",
              "color": "grayBlue"
            },
            {
              "seriesName": "blocked",
              "label": "Blocked",
              "color": "orange"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqlserver_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "activity_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_active_sessions\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize count_samples = dcount(sample_time_utc)\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the total number of sessions in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples. Samples are not collected when there are no active sessions.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No activity samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqlserver_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "activity_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "f9aba3e2-8de2-4fc2-8eea-27c5a24074cb",
            "version": "KqlParameterItem/1.0",
            "name": "activityLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_active_sessions\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize sample_time_utc = max(sample_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "894bae23-408d-41cc-9ced-5577b0b1bd8b",
            "version": "KqlParameterItem/1.0",
            "name": "activityHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Selected time from the history chart is a binned time generated by make-series and is unlikely to match an actual sample.\\r\\n// Look up an actual sample within the sample group selected on the history chart, differentiating between samples in different series.\\r\\nsqlserver_active_sessions\\r\\n| where sample_time_utc between (todatetime(\\\"{activityHistoricalSample:$.x}\\\") .. (todatetime(\\\"{activityHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend blocking_session_id = iif(blocking_session_id == 0, int(null), blocking_session_id)\\r\\n| extend sample_type = iif(isnotempty(blocking_session_id), \\\"blocked\\\", \\\"not_blocked\\\")\\r\\n| where sample_type == \\\"{activityHistoricalSample:$.series}\\\"\\r\\n| summarize sample_time_utc = min(sample_time_utc) // Selecting any sample within a sample group is valid. Use the earliest for determinism.\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "95d3101d-67ba-47e9-88e9-f1657cdd15b8",
            "version": "KqlParameterItem/1.0",
            "name": "activitySampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "activitySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "activityLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "activitySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "activityHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "activityLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqlserver_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "activity_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_active_sessions\\r\\n| where sample_time_utc == todatetime(\\\"{activitySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize count_sessions = count() by sample_time_utc\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\"), count_sessions\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            },
            {
              "columnId": "count_sessions",
              "label": "Active sessions"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqlserver_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "selected_activity_sample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// The sample to be displayed\\r\\nlet current_snapshot = materialize(\\r\\nsqlserver_active_sessions\\r\\n| where sample_time_utc == todatetime(\\\"{activitySampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project-away server_name, machine_name\\r\\n| extend blocking_session_id = iif(\\r\\n                                  blocking_session_id in (0, -4, -5), // Do not consider long latch waits when displaying blocking chains\\r\\n                                  int(null),\\r\\n                                  blocking_session_id\\r\\n                                  )\\r\\n);\\r\\n// Blocking-related columns\\r\\nlet b = materialize(\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, blocking_session_id\\r\\n);\\r\\n// Assumption: blocking chains are at most 9 levels deep. If proven incorrect, introduce additional lookups\\r\\nlet head_blockers = materialize(\\r\\nb\\r\\n| lookup (b | project session_id, blocking_session_id2 = blocking_session_id) on $left.blocking_session_id == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id3 = blocking_session_id) on $left.blocking_session_id2 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id4 = blocking_session_id) on $left.blocking_session_id3 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id5 = blocking_session_id) on $left.blocking_session_id4 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id6 = blocking_session_id) on $left.blocking_session_id5 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id7 = blocking_session_id) on $left.blocking_session_id6 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id8 = blocking_session_id) on $left.blocking_session_id7 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id9 = blocking_session_id) on $left.blocking_session_id8 == $right.session_id\\r\\n| project session_id,\\r\\n          request_id,\\r\\n          head_blocking_session_id = coalesce(\\r\\n                                             blocking_session_id9,\\r\\n                                             blocking_session_id8,\\r\\n                                             blocking_session_id7,\\r\\n                                             blocking_session_id6,\\r\\n                                             blocking_session_id5,\\r\\n                                             blocking_session_id4,\\r\\n                                             blocking_session_id3,\\r\\n                                             blocking_session_id2,\\r\\n                                             blocking_session_id\\r\\n                                             )\\r\\n| where isnotempty(head_blocking_session_id)\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"session_status\\\",\\\"workload_group_name\\\",\\\"connection_id\\\",\\\"encrypt_option\\\",\\\"wait_resource\\\",\\\"transaction_isolation_level\\\",\\\"query_hash\\\",\\\"query_plan_hash\\\",\\\"session_cpu_time\\\",\\\"session_duration\\\"\\r\\n]);\\r\\nlet column_labels_number_count = dynamic(\\r\\n[\\r\\n\\\"session_logical_reads\\\",\\\"session_writes\\\",\\\"session_row_count\\\",\\\"request_row_count\\\",\\\"dop\\\",\\\"parallel_worker_count\\\"\\r\\n]);\\r\\nlet column_labels_number_id = dynamic(\\r\\n[\\r\\n\\\"database_id\\\",\\\"workload_group_id\\\",\\\"request_id\\\",\\\"sql_module_object_id\\\",\\\"blocking_session_id\\\"\\r\\n]);\\r\\nlet column_labels_number_kb = dynamic(\\r\\n[\\r\\n\\\"granted_memory\\\",\\\"requested_memory\\\",\\\"max_used_memory\\\",\\\"ideal_memory\\\"\\r\\n]);\\r\\nlet column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"login_time\\\",\\\"request_start_time\\\"\\r\\n]);\\r\\nlet column_labels_task_counts = dynamic(\\r\\n[\\r\\n\\\"pending\\\", \\\"runnable\\\", \\\"running\\\", \\\"suspended\\\", \\\"done\\\", \\\"spinloop\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet session_details_string = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, session_status, workload_group_name, connection_id, encrypt_option, wait_resource, transaction_isolation_level, query_hash, query_plan_hash, session_cpu_time = format_timespan(session_cpu_time_ms * 1ms, \\\"d.hh:mm:ss.fff\\\"), session_duration = format_timespan(session_total_elapsed_time_ms * 1ms, \\\"d.hh:mm:ss.fff\\\")\\r\\n| project session_id, request_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by session_id, request_id // for each session_id and request_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for count numbers grid\\r\\nlet session_details_number_count = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, session_logical_reads, session_writes, session_row_count, request_row_count, dop, parallel_worker_count\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_count to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_count = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// result set for id numbers grid\\r\\nlet session_details_number_id = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, database_id, workload_group_id, sql_module_object_id, blocking_session_id\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_id to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_id = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// result set for byte numbers grid\\r\\nlet session_details_number_kb = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, granted_memory = memory_grant_kb, requested_memory = requested_memory_kb, max_used_memory = max_used_memory_kb, ideal_memory = ideal_memory_kb\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_kb to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_kb = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// result set for datetime grid\\r\\nlet session_details_datetime = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, login_time, request_start_time\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_datetime = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\nlet session_details_task_counts = ( \\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, pending = pending_task_count, runnable = runnable_task_count, running = running_task_count, suspended = suspended_task_count, done = done_task_count, spinloop = spinloop_task_count\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_task_counts to typeof(string) on (project column_label, column_value = toint(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Task type\\\", column_label, \\\"Count\\\", column_value)\\r\\n| summarize task_counts = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// return last snapshot with json arrays for each detail grid\\r\\ncurrent_snapshot\\r\\n| lookup head_blockers on $left.session_id == $right.session_id and $left.request_id == $right.request_id\\r\\n| join session_details_string on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_number_count on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_number_id on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_number_kb on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_datetime on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_task_counts on session_id and $left.request_id == $right.request_id\\r\\n| join kind=leftouter (\\r\\n                      head_blockers\\r\\n                      | summarize count_blocked_sessions = count() by head_blocking_session_id\\r\\n                      ) on $left.session_id == $right.head_blocking_session_id\\r\\n| project request_total_elapsed_time_ms, request_duration = format_timespan(1ms * request_total_elapsed_time_ms, \\\"d.hh:mm:ss.fff\\\"), session_id, request_id, database_name, request_status, command, input_buffer_text, blocked_by = head_blocking_session_id, count_blocked_sessions, wait_type, wait_time = format_timespan(1ms * iif(wait_time_ms != 0, wait_time_ms, int(null)), \\\"d.hh:mm:ss.fff\\\"), open_transaction_count, request_cpu_time = format_timespan(1ms * request_cpu_time_ms, \\\"d.hh:mm:ss.fff\\\"), request_logical_reads, request_writes, percent_complete = iif(percent_complete == 0, real(null), percent_complete), tempdb_allocations_kb, tempdb_current_kb, sql_module_name, login_name, host_name, program_name, client_net_address,\\r\\n  statement_text_json = dynamic_to_json(pack(\\\"statement_text\\\", statement_text)), input_buffer_text_json = dynamic_to_json(pack(\\\"input_buffer_text\\\", input_buffer_text)),\\r\\n  session_wait_stats = iif(isempty(session_wait_stats), '[{\\\"wait_type\\\":\\\"\\\",\\\"wait_time_ms\\\":\\\"\\\",\\\"signal_wait_time_ms\\\":\\\"\\\",\\\"max_wait_time_ms\\\":\\\"\\\",\\\"waiting_tasks_count\\\":\\\"\\\"}]', session_wait_stats),\\r\\n  details_datetime, details_number_id, details_number_kb, details_string, details_number_count, task_counts\\r\\n| sort by count_blocked_sessions desc nulls last, request_total_elapsed_time_ms desc nulls last // blockers first, followed by sessions with longest running requests, then longest running sessions\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 2,
        "showAnalytics": true,
        "title": "Active sessions",
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "session_wait_stats",
            "parameterName": "session_wait_stats",
            "parameterType": 1,
            "defaultValue": "[{\"wait_type\":\"\",\"wait_time_ms\":\"\",\"signal_wait_time_ms\":\"\",\"max_wait_time_ms\":\"\",\"waiting_tasks_count\":\"\"}]"
          },
          {
            "fieldName": "task_counts",
            "parameterName": "task_counts",
            "parameterType": 1,
            "defaultValue": "[{\"Task type\":\"\",\"Count\":\"\"}]"
          },
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_count",
            "parameterName": "details_number_count",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_id",
            "parameterName": "details_number_id",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_kb",
            "parameterName": "details_number_kb",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_datetime",
            "parameterName": "details_datetime",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "statement_text_json",
            "parameterName": "statement_text",
            "parameterType": 1,
            "defaultValue": "\"\""
          },
          {
            "fieldName": "input_buffer_text_json",
            "parameterName": "input_buffer_text",
            "parameterType": 1,
            "defaultValue": "\"\""
          }
        ],
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "request_total_elapsed_time_ms",
              "formatter": 5
            },
            {
              "columnMatch": "request_status",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "background",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "running",
                    "representation": "greenDark",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "runnable",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "sleeping",
                    "representation": "gray",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "suspended",
                    "representation": "yellow",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "command",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "SELECT",
                    "representation": "lightBlue",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "INSERT",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "UPDATE",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "DELETE",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "EXECUTE",
                    "representation": "grayBlue",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "MERGE",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "SELECT INTO",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "CREATE INDEX",
                    "representation": "turquoise",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "startsWith",
                    "thresholdValue": "COMMIT",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "contains",
                    "thresholdValue": "ROLLBACK",
                    "representation": "red",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "startsWith",
                    "thresholdValue": "DBCC",
                    "representation": "purple",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "startsWith",
                    "thresholdValue": "BACKUP",
                    "representation": "yellow",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "blocked_by",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "!=",
                    "thresholdValue": "0",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Session [\"session_id\"] is blocked. The head blocker of the blocking chain is session [\"blocked_by\"]."
              }
            },
            {
              "columnMatch": "count_blocked_sessions",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": ">",
                    "thresholdValue": "0",
                    "representation": "3",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Session [\"session_id\"] is a head blocker in a blocking chain. It blocks [\"count_blocked_sessions\"] other session(s)."
              }
            },
            {
              "columnMatch": "open_transaction_count",
              "formatter": 2
            },
            {
              "columnMatch": "percent_complete",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": 100,
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 1,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "statement_text_json",
              "formatter": 5
            },
            {
              "columnMatch": "input_buffer_text_json",
              "formatter": 5
            },
            {
              "columnMatch": "session_wait_stats",
              "formatter": 5
            },
            {
              "columnMatch": "details_datetime",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_id",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_kb",
              "formatter": 5
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_count",
              "formatter": 5
            },
            {
              "columnMatch": "task_counts",
              "formatter": 5
            }
          ],
          "filter": true,
          "labelSettings": [
            {
              "columnId": "request_duration",
              "label": "Request duration"
            },
            {
              "columnId": "session_id",
              "label": "Session ID"
            },
            {
              "columnId": "request_id",
              "label": "Request ID"
            },
            {
              "columnId": "database_name",
              "label": "Database"
            },
            {
              "columnId": "request_status",
              "label": "Status"
            },
            {
              "columnId": "command",
              "label": "Command"
            },
            {
              "columnId": "input_buffer_text",
              "label": "Input buffer"
            },
            {
              "columnId": "blocked_by",
              "label": "Head blocker"
            },
            {
              "columnId": "count_blocked_sessions",
              "label": "Blocked sessions"
            },
            {
              "columnId": "wait_type",
              "label": "Wait type"
            },
            {
              "columnId": "wait_time",
              "label": "Wait time"
            },
            {
              "columnId": "open_transaction_count",
              "label": "Open transactions"
            },
            {
              "columnId": "request_cpu_time",
              "label": "Request CPU"
            },
            {
              "columnId": "request_logical_reads",
              "label": "Request logical reads"
            },
            {
              "columnId": "request_writes",
              "label": "Request writes"
            },
            {
              "columnId": "percent_complete",
              "label": "% complete"
            },
            {
              "columnId": "tempdb_allocations_kb",
              "label": "Tempdb allocations"
            },
            {
              "columnId": "tempdb_current_kb",
              "label": "Tempdb current"
            },
            {
              "columnId": "sql_module_name",
              "label": "Module"
            },
            {
              "columnId": "login_name",
              "label": "Login"
            },
            {
              "columnId": "host_name",
              "label": "Host"
            },
            {
              "columnId": "program_name",
              "label": "Program"
            },
            {
              "columnId": "client_net_address",
              "label": "Client net address"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqlserver_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "active_sessions"
    },
    {
      "type": 1,
      "content": {
        "json": "The grid shows a snapshot of active user sessions at a point in time. Snapshots are collected at regular intervals defined by `Active Sessions` dataset configuration. A session is considered active if it is running a request (for example, executing a query), has an open transaction, or is blocking other sessions. Click on a session in the grid to view session details, including SQL query text, session waits, etc.\r\n\r\nData is collected from [sys.dm_exec_connections](https://go.microsoft.com/fwlink/?linkid=2214209), [sys.dm_exec_sessions](https://go.microsoft.com/fwlink/?linkid=2213978) [sys.dm_exec_requests](https://go.microsoft.com/fwlink/?linkid=2214068), [sys.dm_exec_session_wait_stats](https://go.microsoft.com/fwlink/?linkid=2214069), and other views."
      },
      "conditionalVisibilities": [
        {
          "parameterName": "showDescription",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqlserver_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "activity_help"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Selected session details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "4f7e9040-f18d-4a23-8092-f0b4ea855401",
                  "cellValue": "sqlTextTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Input buffer text",
                  "subTarget": "InputBuffer",
                  "style": "link"
                },
                {
                  "id": "542bad80-2f31-4b7a-88de-76df2fabff67",
                  "cellValue": "sqlTextTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Statement text",
                  "subTarget": "Statement",
                  "style": "link"
                }
              ]
            },
            "name": "sql_text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{input_buffer_text}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "conditionalVisibility": {
              "parameterName": "sqlTextTabName",
              "comparison": "isEqualTo",
              "value": "InputBuffer"
            },
            "name": "input_buffer_text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{statement_text}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "conditionalVisibility": {
              "parameterName": "sqlTextTabName",
              "comparison": "isEqualTo",
              "value": "Statement"
            },
            "name": "statement_text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{session_wait_stats}\",\"transformers\":null}",
              "size": 3,
              "title": "Session waits",
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "wait_time_ms",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "signal_wait_time_ms",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "max_wait_time_ms",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "waiting_tasks_count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "wait_type",
                    "label": "Wait type"
                  },
                  {
                    "columnId": "wait_time_ms",
                    "label": "Wait time (ms)"
                  },
                  {
                    "columnId": "signal_wait_time_ms",
                    "label": "Signal wait time (ms)"
                  },
                  {
                    "columnId": "max_wait_time_ms",
                    "label": "Max wait time (ms)"
                  },
                  {
                    "columnId": "waiting_tasks_count",
                    "label": "Waiting tasks"
                  }
                ]
              }
            },
            "name": "session_wait_stats"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_datetime}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Displayed in local time of the database engine instance"
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_datetime"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_id}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table"
            },
            "customWidth": "33",
            "name": "session_details_number_id"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_kb}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "max": 262144,
                      "palette": "coldHot"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_number_kb"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "2-Read Committed",
                          "representation": "Blank",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "1-Read Uncommitted",
                          "representation": "SmileySad",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "3-Repeatable Read",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "4-Serializable",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "5-Snapshot",
                          "representation": "1",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_count}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_number_count"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{task_counts}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "task_counts"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqlserver_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "session_details_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "21040266-4bf6-4306-890a-510cd177448c",
            "version": "KqlParameterItem/1.0",
            "name": "databaseSampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == 1 // assumption: master is always present in each sample\\r\\n| make-series metric = count() default = long(null) on collection_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No database property samples are available",
        "timeBrushParameterName": "timeRange",
        "exportFieldName": "",
        "exportParameterName": "databaseHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "lightBlue"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseSampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == 1 // assumption: master is always present in each sample\\r\\n| summarize count_samples = count()\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No database property samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseSampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_property_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d2a8112d-eb05-415b-b055-1705701733ea",
            "version": "KqlParameterItem/1.0",
            "name": "databaseLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize collection_time_utc = max(collection_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "143ccb33-307f-4fb4-b573-ea27df4456c1",
            "version": "KqlParameterItem/1.0",
            "name": "databaseHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc between (todatetime(\\\"{databaseHistoricalSample:$.x}\\\") .. (todatetime(\\\"{databaseHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize collection_time_utc = min(collection_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "00056ca9-614c-4686-bbef-b1d44ffaf2d0",
            "version": "KqlParameterItem/1.0",
            "name": "databaseSampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "databaseSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "databaseLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "databaseSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "databaseHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "databaseLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "database_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize collection_time_utc = min(collection_time_utc)\\r\\n| project collection_time = collection_time_utc, collection_time_utc, offset = format_timespan(now() - collection_time_utc, \\\"d.hh:mm:ss\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No database property samples are available",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "collection_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "collection_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            },
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "collection_time",
              "label": "Collection time"
            },
            {
              "columnId": "collection_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "selected_database_properties_sample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let database_storage = (\\r\\nsqlserver_database_storage_utilization\\r\\n| where collection_time_utc <= todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| partition hint.strategy = shuffle by database_id\\r\\n(\\r\\nsummarize arg_max(collection_time_utc, database_id, data_size_used_mb, data_size_allocated_mb, log_size_used_mb, log_size_allocated_mb) by database_id\\r\\n)\\r\\n);\\r\\nlet logical_cpu_count = toscalar(\\r\\nsqlserver_properties\\r\\n| where sample_time_utc <= todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize arg_max(sample_time_utc, logical_cpu_count)\\r\\n| project logical_cpu_count\\r\\n);\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project database_id, database_name, is_primary_replica, notable_db_scoped_configs, compatibility_level, is_auto_create_stats_on, is_auto_shrink_on, is_auto_update_stats_on, user_access_desc, force_last_good_plan_actual_state, query_store_actual_state_desc, state_desc, page_verify_option_desc, log_reuse_wait_desc, last_good_checkdb_time, updateability\\r\\n| join kind=leftouter hint.strategy = shuffle database_storage on database_id // not joining on sample_time_utc because it is different for two different datasets. database_storage already contains at most one row per database.\\r\\n| extend is_system_database = iif(database_name in~ ('master','tempdb','model','msdb'), true, false),\\r\\n         replica_type = case(is_primary_replica == true, \\\"Primary\\\", is_primary_replica == false, \\\"Secondary\\\", \\\"Not in AG\\\"),\\r\\n         db_scoped_configs = todynamic(notable_db_scoped_configs)\\r\\n| mv-expand db_scoped_configs\\r\\n| mv-expand db_scoped_config_name = db_scoped_configs.name to typeof(string), db_scoped_config_value = db_scoped_configs.value to typeof(string), db_scoped_config_value_for_secondary = db_scoped_configs.value_for_secondary to typeof(string)\\r\\n| where db_scoped_config_name == \\\"MAXDOP\\\" or db_scoped_config_name == \\\"\\\"\\r\\n| extend count_warnings = iif(db_scoped_config_name == \\\"MAXDOP\\\" and logical_cpu_count > 8 and (toint(db_scoped_config_value) > 8 or toint(db_scoped_config_value_for_secondary) > 8), 1, 0)\\r\\n                          +\\r\\n                          iif(compatibility_level <= 110, 1, 0)\\r\\n                          +\\r\\n                          iif(is_auto_create_stats_on == false, 1, 0)\\r\\n                          +\\r\\n                          iif(is_auto_shrink_on == true, 1, 0)\\r\\n                          +\\r\\n                          iif(is_auto_update_stats_on == false, 1, 0)\\r\\n                          +\\r\\n                          iif(user_access_desc != \\\"MULTI_USER\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(force_last_good_plan_actual_state != \\\"ON\\\" and updateability == \\\"READ_WRITE\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\"), 1, 0)\\r\\n                          +\\r\\n                          iif(query_store_actual_state_desc != \\\"READ_WRITE\\\" and updateability == \\\"READ_WRITE\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\"), 1, 0)\\r\\n                          +\\r\\n                          iif(state_desc != \\\"ONLINE\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(page_verify_option_desc != \\\"CHECKSUM\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(log_reuse_wait_desc !in~ (\\\"NOTHING\\\",\\\"OLDEST_PAGE\\\",\\\"LOG_SCAN\\\",\\\"DATABASE_SNAPSHOT_CREATION\\\",\\\"CHECKPOINT\\\"), 1, 0)\\r\\n                          +\\r\\n                          iif(last_good_checkdb_time == datetime(\\\"1900-01-01T00:00:00Z\\\") and database_name !~ \\\"tempdb\\\", 1, 0)\\r\\n| project database_id, count_warnings, is_system_database, database_name, is_primary_replica, replica_type, data_size_used_mb, data_size_allocated_mb, data_size_unused_mb = data_size_allocated_mb - data_size_used_mb, data_used_ratio = iif(isempty(data_size_used_mb) or isempty(data_size_allocated_mb), \\\"N/A\\\", strcat(round(100 * data_size_used_mb/data_size_allocated_mb, 1), \\\"%\\\")), log_size_used_mb, log_size_allocated_mb, log_size_unused_mb = log_size_allocated_mb - log_size_used_mb, log_used_ratio = iif(isempty(log_size_used_mb) or isempty(log_size_allocated_mb), \\\"N/A\\\", strcat(round(100 * log_size_used_mb/log_size_allocated_mb, 1), \\\"%\\\")), notable_db_scoped_configs\\r\\n| sort by is_system_database asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "exportParameterName": "selectedDatabase",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "database_id",
              "formatter": 5
            },
            {
              "columnMatch": "count_warnings",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "0",
                    "representation": "Sev4",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "1",
                    "representation": "Sev3",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "3",
                    "representation": "Sev2",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "6",
                    "representation": "Sev1",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": ">=",
                    "thresholdValue": "7",
                    "representation": "Sev0",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "more",
                    "text": "[\"database_id\"]"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "There are [\"count_warnings\"] configuration or state warnings for database [\"database_name\"]. Click on the row to see details on the \"Properties and configuration\" tab."
              }
            },
            {
              "columnMatch": "is_system_database",
              "formatter": 5
            },
            {
              "columnMatch": "is_primary_replica",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "green",
                    "text": "[\"replica_type\"]"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "turquoise",
                    "text": "[\"replica_type\"]"
                  },
                  {
                    "operator": "is Empty",
                    "representation": "gray",
                    "text": "[\"replica_type\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "Not in AG"
              },
              "tooltipFormat": {
                "tooltip": "Availability group (AG) replica type"
              }
            },
            {
              "columnMatch": "replica_type",
              "formatter": 5
            },
            {
              "columnMatch": "data_size_used_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                },
                "emptyValCustomText": "N/A"
              },
              "tooltipFormat": {
                "tooltip": "Space used within data files. Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "data_size_allocated_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                },
                "emptyValCustomText": "N/A"
              },
              "tooltipFormat": {
                "tooltip": "Size of data files on disk. Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "data_size_unused_mb",
              "formatter": 5
            },
            {
              "columnMatch": "data_used_ratio",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"data_used_ratio\"]",
                  "columnSettings": [
                    {
                      "columnName": "data_size_used_mb",
                      "color": "lightBlue"
                    },
                    {
                      "columnName": "data_size_unused_mb",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "Percentage of space used within data files. Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "log_size_used_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                },
                "emptyValCustomText": "N/A"
              },
              "tooltipFormat": {
                "tooltip": "Space used within log file(s). Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "log_size_allocated_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                },
                "emptyValCustomText": "N/A"
              },
              "tooltipFormat": {
                "tooltip": "Size of log file(s) on disk. Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "log_size_unused_mb",
              "formatter": 5
            },
            {
              "columnMatch": "log_used_ratio",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"log_used_ratio\"]",
                  "columnSettings": [
                    {
                      "columnName": "log_size_used_mb",
                      "color": "green"
                    },
                    {
                      "columnName": "log_size_unused_mb",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "Percentage of space used within log file(s)"
              }
            },
            {
              "columnMatch": "notable_db_scoped_configs",
              "formatter": 5
            }
          ],
          "labelSettings": [
            {
              "columnId": "count_warnings",
              "label": "Database ID"
            },
            {
              "columnId": "database_name",
              "label": "Database name"
            },
            {
              "columnId": "is_primary_replica",
              "label": "Replica type"
            },
            {
              "columnId": "data_size_used_mb",
              "label": "Data used"
            },
            {
              "columnId": "data_size_allocated_mb",
              "label": "Data allocated"
            },
            {
              "columnId": "data_used_ratio",
              "label": "Data file usage %"
            },
            {
              "columnId": "log_size_used_mb",
              "label": "Log used"
            },
            {
              "columnId": "log_size_allocated_mb",
              "label": "Log allocated"
            },
            {
              "columnId": "log_used_ratio",
              "label": "Log file usage %"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "databases"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "993f691a-4913-4e97-a638-05699d39cf90",
            "cellValue": "databaseTabName",
            "linkTarget": "parameter",
            "linkLabel": "Properties and configuration",
            "subTarget": "Properties",
            "style": "link"
          },
          {
            "id": "094ce311-ae3f-48f8-aacc-84664ed57c46",
            "cellValue": "databaseTabName",
            "linkTarget": "parameter",
            "linkLabel": "Storage",
            "subTarget": "Storage",
            "style": "link"
          },
          {
            "id": "9cc0b32e-1870-4c8c-a7f0-83c03c50f0bf",
            "cellValue": "databaseTabName",
            "linkTarget": "parameter",
            "linkLabel": "Transactions",
            "subTarget": "Transactions",
            "style": "link"
          },
          {
            "id": "6e4ab558-4590-46e2-8e23-027d041bb9f3",
            "cellValue": "databaseTabName",
            "linkTarget": "parameter",
            "linkLabel": "{tablesTabName}",
            "subTarget": "Tables",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_tabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let server_properties = (\\r\\nsqlserver_properties\\r\\n| where sample_time_utc <= todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| top 1 by sample_time_utc desc\\r\\n| project key = int(1), logical_cpu_count\\r\\n);\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend key = int(1)\\r\\n| join kind = leftouter server_properties on key\\r\\n| project logical_cpu_count, db_scoped_configs = todynamic(notable_db_scoped_configs)\\r\\n| mv-expand db_scoped_configs\\r\\n| mv-expand name=db_scoped_configs.name to typeof(string), value = db_scoped_configs.value to typeof(string), value_for_secondary = db_scoped_configs.value_for_secondary to typeof(string)\\r\\n| extend note_icon = case(\\r\\n                         name == \\\"MAXDOP\\\" and logical_cpu_count > 8 and (toint(value) > 8 or toint(value_for_secondary) > 8), \\\"warning\\\", \\r\\n                         \\\"\\\"\\r\\n                         ), // MAXDOP=0 at database level means use server-level maxdop. That is handled in server properties. Here we are only concerned with overridden database-level MAXDOP (!=0)\\r\\n         note_text = case(\\r\\n                         name == \\\"MAXDOP\\\",\\\"Configure 'MAXDOP' as recommended\\\",\\r\\n                         \\\"\\\"\\r\\n                         ),\\r\\n         note_url = case(\\r\\n                        name == \\\"MAXDOP\\\",\\\"https://go.microsoft.com/fwlink/?linkid=2201911\\\",\\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away db_scoped_configs, logical_cpu_count\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "name",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Database-scoped configurations are shown if set to a non-default value, or if they are commonly used"
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "name",
                    "label": "Database configuration name"
                  },
                  {
                    "columnId": "value",
                    "label": "Value"
                  },
                  {
                    "columnId": "value_for_secondary",
                    "label": "Value for secondary"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "db_scoped_configurations"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"snapshot_isolation_state\\\",\\r\\n1, \\\"compatibility_level\\\"\\r\\n];\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, snapshot_isolation_state, compatibility_level\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"snapshot_isolation_state\\\", snapshot_isolation_state,\\r\\n                            property_name == \\\"compatibility_level\\\", compatibility_level,\\r\\n                            int(null)\\r\\n                            )\\r\\n| project-away snapshot_isolation_state, compatibility_level\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"compatibility_level\\\" and property_value <= 110, \\\"warning\\\", \\r\\n                        property_name == \\\"snapshot_isolation_state\\\" and property_value != 0, \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"compatibility_level\\\" and property_value <= 110, \\\"Latest compatibility level includes latest improvements\\\", \\r\\n                        property_name == \\\"snapshot_isolation_state\\\" and property_value != 0, \\\"Non-default value\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"compatibility_level\\\" and property_value <= 110, \\\"https://go.microsoft.com/fwlink/?linkid=2198650\\\", \\r\\n                        property_name == \\\"snapshot_isolation_state\\\" and property_value != 0, \\\"https://go.microsoft.com/fwlink/?linkid=2198854\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "database_properties_number"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"is_read_only\\\",\\r\\n1, \\\"is_auto_shrink_on\\\",\\r\\n1, \\\"is_in_standby\\\",\\r\\n1, \\\"is_auto_create_stats_on\\\",\\r\\n1, \\\"is_auto_update_stats_on\\\",\\r\\n1, \\\"is_auto_update_stats_async_on\\\",\\r\\n1, \\\"is_read_committed_snapshot_on\\\",\\r\\n1, \\\"is_parameterization_forced\\\",\\r\\n1, \\\"is_published\\\",\\r\\n1, \\\"is_subscribed\\\",\\r\\n1, \\\"is_merge_published\\\",\\r\\n1, \\\"is_distributor\\\",\\r\\n1, \\\"is_broker_enabled\\\",\\r\\n1, \\\"is_encrypted\\\",\\r\\n1, \\\"is_accelerated_database_recovery_on\\\",\\r\\n1, \\\"is_cdc_enabled\\\",\\r\\n// TODO: add these two when collector starts supporting SQL 2022 and these columns appear in the table\\r\\n// 1, \\\"is_change_feed_enabled\\\", \\r\\n// 1, \\\"is_ledger_on\\\"\\r\\n];\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, is_read_only, is_auto_shrink_on, is_in_standby, is_auto_create_stats_on, is_auto_update_stats_on, is_auto_update_stats_async_on, is_read_committed_snapshot_on, is_parameterization_forced, is_published, is_subscribed, is_merge_published, is_distributor, is_broker_enabled, is_encrypted, is_accelerated_database_recovery_on, is_cdc_enabled //, is_change_feed_enabled, is_ledger_on \\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"is_read_only\\\", is_read_only,\\r\\n                            property_name == \\\"is_auto_shrink_on\\\", is_auto_shrink_on,\\r\\n                            property_name == \\\"is_in_standby\\\", is_in_standby,\\r\\n                            property_name == \\\"is_auto_create_stats_on\\\", is_auto_create_stats_on,\\r\\n                            property_name == \\\"is_auto_update_stats_on\\\", is_auto_update_stats_on,\\r\\n                            property_name == \\\"is_auto_update_stats_async_on\\\", is_auto_update_stats_async_on,\\r\\n                            property_name == \\\"is_read_committed_snapshot_on\\\", is_read_committed_snapshot_on,\\r\\n                            property_name == \\\"is_parameterization_forced\\\", is_parameterization_forced,\\r\\n                            property_name == \\\"is_published\\\", is_published,\\r\\n                            property_name == \\\"is_subscribed\\\", is_subscribed,\\r\\n                            property_name == \\\"is_merge_published\\\", is_merge_published,\\r\\n                            property_name == \\\"is_distributor\\\", is_distributor,\\r\\n                            property_name == \\\"is_broker_enabled\\\", is_broker_enabled,\\r\\n                            property_name == \\\"is_encrypted\\\", is_encrypted,\\r\\n                            property_name == \\\"is_accelerated_database_recovery_on\\\", is_accelerated_database_recovery_on,\\r\\n                            property_name == \\\"is_cdc_enabled\\\", is_cdc_enabled,\\r\\n                            // property_name == \\\"is_change_feed_enabled\\\", is_change_feed_enabled,\\r\\n                            // property_name == \\\"is_ledger_on\\\", is_ledger_on,\\r\\n                            bool(null)\\r\\n                            )\\r\\n| project-away is_read_only, is_auto_shrink_on, is_in_standby, is_auto_create_stats_on, is_auto_update_stats_on, is_auto_update_stats_async_on, is_read_committed_snapshot_on, is_parameterization_forced, is_published, is_subscribed, is_merge_published, is_distributor, is_broker_enabled, is_encrypted, is_accelerated_database_recovery_on, is_cdc_enabled //, is_change_feed_enabled, is_ledger_on \\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"is_accelerated_database_recovery_on\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_auto_create_stats_on\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"is_auto_shrink_on\\\" and property_value == true, \\\"warning\\\", \\r\\n                        property_name == \\\"is_auto_update_stats_on\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"is_cdc_enabled\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_encrypted\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_parameterization_forced\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_read_committed_snapshot_on\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_read_only\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_subscribed\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_published\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_merge_published\\\" and property_value == true, \\\"info\\\", \\r\\n                        // property_name == \\\"is_change_feed_enabled\\\" and property_value == true, \\\"info\\\", \\r\\n                        // property_name == \\\"is_ledger_on\\\" and property_value == true, \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"is_accelerated_database_recovery_on\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_auto_create_stats_on\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"is_auto_shrink_on\\\" and property_value == true, \\\"Recommended value is 'Disabled'\\\", \\r\\n                        property_name == \\\"is_auto_update_stats_on\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"is_cdc_enabled\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_encrypted\\\" and property_value == false, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_parameterization_forced\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_read_committed_snapshot_on\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_read_only\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_subscribed\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_published\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_merge_published\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        // property_name == \\\"is_change_feed_enabled\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        // property_name == \\\"is_ledger_on\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"is_accelerated_database_recovery_on\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198635\\\", \\r\\n                        property_name == \\\"is_auto_create_stats_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198642\\\", \\r\\n                        property_name == \\\"is_auto_shrink_on\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198740\\\", \\r\\n                        property_name == \\\"is_auto_update_stats_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198645\\\", \\r\\n                        property_name == \\\"is_cdc_enabled\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198649\\\", \\r\\n                        property_name == \\\"is_encrypted\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198852\\\", \\r\\n                        property_name == \\\"is_parameterization_forced\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198745\\\", \\r\\n                        property_name == \\\"is_read_committed_snapshot_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198854\\\", \\r\\n                        property_name == \\\"is_read_only\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198731\\\", \\r\\n                        property_name == \\\"is_subscribed\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2201719\\\", \\r\\n                        property_name == \\\"is_published\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2201719\\\", \\r\\n                        property_name == \\\"is_merge_published\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2201721\\\", \\r\\n                        // property_name == \\\"is_change_feed_enabled\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198748\\\", \\r\\n                        // property_name == \\\"is_ledger_on\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198864\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Inactive",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "database_properties_boolean"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"owner_principal_name\\\",\\r\\n1, \\\"collation_name\\\",\\r\\n1, \\\"user_access_desc\\\",\\r\\n1, \\\"updateability\\\",\\r\\n1, \\\"state_desc\\\",\\r\\n1, \\\"recovery_model_desc\\\",\\r\\n1, \\\"page_verify_option_desc\\\",\\r\\n1, \\\"log_reuse_wait_desc\\\",\\r\\n1, \\\"containment_desc\\\",\\r\\n1, \\\"delayed_durability_desc\\\",\\r\\n1, \\\"query_store_actual_state_desc\\\",\\r\\n1, \\\"query_store_query_capture_mode_desc\\\",\\r\\n1, \\\"force_last_good_plan_actual_state\\\"\\r\\n];\\r\\nlet server_properties = (\\r\\nsqlserver_properties\\r\\n| where sample_time_utc <= todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| top 1 by sample_time_utc desc\\r\\n| project key = int(1), major_product_version = toint(split(product_version, \\\".\\\")[0])\\r\\n);\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| join kind=leftouter server_properties on key\\r\\n| project property_name, owner_principal_name, collation_name, user_access_desc, updateability, state_desc, recovery_model_desc, page_verify_option_desc, log_reuse_wait_desc, containment_desc, delayed_durability_desc, query_store_actual_state_desc, query_store_query_capture_mode_desc, force_last_good_plan_actual_state, major_product_version, database_name\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"owner_principal_name\\\", owner_principal_name,\\r\\n                            property_name == \\\"collation_name\\\", collation_name,\\r\\n                            property_name == \\\"user_access_desc\\\", user_access_desc,\\r\\n                            property_name == \\\"updateability\\\", updateability,\\r\\n                            property_name == \\\"state_desc\\\", state_desc,\\r\\n                            property_name == \\\"recovery_model_desc\\\", recovery_model_desc,\\r\\n                            property_name == \\\"page_verify_option_desc\\\", page_verify_option_desc,\\r\\n                            property_name == \\\"log_reuse_wait_desc\\\", log_reuse_wait_desc,\\r\\n                            property_name == \\\"containment_desc\\\", containment_desc,\\r\\n                            property_name == \\\"delayed_durability_desc\\\", delayed_durability_desc,\\r\\n                            property_name == \\\"query_store_actual_state_desc\\\", query_store_actual_state_desc,\\r\\n                            property_name == \\\"query_store_query_capture_mode_desc\\\", query_store_query_capture_mode_desc,\\r\\n                            property_name == \\\"force_last_good_plan_actual_state\\\", force_last_good_plan_actual_state,\\r\\n                            \\\"\\\"\\r\\n                            )\\r\\n| project-away owner_principal_name, collation_name, user_access_desc, state_desc, recovery_model_desc, page_verify_option_desc, log_reuse_wait_desc, containment_desc, delayed_durability_desc, query_store_actual_state_desc, query_store_query_capture_mode_desc, force_last_good_plan_actual_state\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"user_access_desc\\\" and property_value != \\\"MULTI_USER\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"delayed_durability_desc\\\" and property_value != \\\"DISABLED\\\", \\\"info\\\", \\r\\n                        property_name == \\\"force_last_good_plan_actual_state\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"ON\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"query_store_actual_state_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"READ_WRITE\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"state_desc\\\" and property_value != \\\"ONLINE\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"page_verify_option_desc\\\" and property_value != \\\"CHECKSUM\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"log_reuse_wait_desc\\\" and property_value !in~ (\\\"NOTHING\\\",\\\"OLDEST_PAGE\\\",\\\"LOG_SCAN\\\",\\\"DATABASE_SNAPSHOT_CREATION\\\",\\\"CHECKPOINT\\\"), \\\"warning\\\", \\r\\n                        property_name == \\\"containment_desc\\\" and property_value != (\\\"NONE\\\"), \\\"info\\\", \\r\\n                        property_name == \\\"updateability\\\" and property_value == \\\"READ_ONLY\\\", \\\"info\\\", \\r\\n                        property_name == \\\"query_store_query_capture_mode_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and ((property_value != \\\"AUTO\\\" and major_product_version >= 15) or (property_value != \\\"ALL\\\" and major_product_version < 15)), \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"user_access_desc\\\" and property_value != \\\"MULTI_USER\\\", \\\"Unexpected value, investigate\\\", \\r\\n                        property_name == \\\"delayed_durability_desc\\\" and property_value != \\\"DISABLED\\\", \\\"Non-default value\\\", \\r\\n                        property_name == \\\"force_last_good_plan_actual_state\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"ON\\\", \\\"Recommended value is 'ON'\\\", \\r\\n                        property_name == \\\"query_store_actual_state_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"READ_WRITE\\\", \\\"Recommended value is 'READ_WRITE'\\\", \\r\\n                        property_name == \\\"state_desc\\\" and property_value != \\\"ONLINE\\\", \\\"Unexpected value, investigate\\\", \\r\\n                        property_name == \\\"page_verify_option_desc\\\" and property_value != \\\"CHECKSUM\\\", \\\"Recommended value is 'CHECKSUM'\\\",\\r\\n                        property_name == \\\"log_reuse_wait_desc\\\" and property_value !in~ (\\\"NOTHING\\\"), \\\"If log size keeps growing, investigate\\\", \\r\\n                        property_name == \\\"containment_desc\\\" and property_value != (\\\"NONE\\\"), \\\"Non-default value\\\", \\r\\n                        property_name == \\\"updateability\\\" and property_value == \\\"READ_ONLY\\\", \\\"Replica or read-only database\\\", \\r\\n                        property_name == \\\"query_store_query_capture_mode_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and ((property_value != \\\"AUTO\\\" and major_product_version >= 15) or (property_value != \\\"ALL\\\" and major_product_version < 15)), \\\"Non-default value\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"user_access_desc\\\" and property_value != \\\"MULTI_USER\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2201722\\\", \\r\\n                        property_name == \\\"delayed_durability_desc\\\" and property_value != \\\"DISABLED\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198732\\\", \\r\\n                        property_name == \\\"force_last_good_plan_actual_state\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"ON\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198737\\\", \\r\\n                        property_name == \\\"query_store_actual_state_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"READ_WRITE\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198632\\\", \\r\\n                        property_name == \\\"state_desc\\\" and property_value != \\\"ONLINE\\\", \\\"\\\", \\r\\n                        property_name == \\\"page_verify_option_desc\\\" and property_value != \\\"CHECKSUM\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2201819\\\", \\r\\n                        property_name == \\\"log_reuse_wait_desc\\\" and property_value !in~ (\\\"NOTHING\\\"), \\\"https://go.microsoft.com/fwlink/?linkid=2201723\\\", \\r\\n                        property_name == \\\"containment_desc\\\" and property_value != (\\\"NONE\\\"), \\\"https://go.microsoft.com/fwlink/?linkid=2201820\\\", \\r\\n                        property_name == \\\"updateability\\\" and property_value == \\\"READ_ONLY\\\", \\\"\\\", \\r\\n                        property_name == \\\"query_store_query_capture_mode_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and ((property_value != \\\"AUTO\\\" and major_product_version >= 15) or (property_value != \\\"ALL\\\" and major_product_version < 15)), \\\"https://go.microsoft.com/fwlink/?linkid=2198632\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away major_product_version, database_name, updateability\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "database_properties_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"database_create_time\\\",\\r\\n1, \\\"last_good_checkdb_time\\\"\\r\\n];\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, create_date, last_good_checkdb_time, database_name\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"database_create_time\\\", create_date,\\r\\n                            property_name == \\\"last_good_checkdb_time\\\", last_good_checkdb_time,\\r\\n                            datetime(null)\\r\\n                            )\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\") and database_name =~ \\\"tempdb\\\", \\\"info\\\", \\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\"), \\\"warning\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\"), \\\"DBCC CHECKDB was never executed on this database\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\"), \\\"https://go.microsoft.com/fwlink/?linkid=2198749\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away create_date, last_good_checkdb_time, database_name\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Displayed in local time of the database engine instance"
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "database_properties_datetime"
          },
          {
            "type": 1,
            "content": {
              "json": "Data is collected from [sys.databases](https://go.microsoft.com/fwlink/?linkid=2198730), [sys.database_scoped_configurations](https://go.microsoft.com/fwlink/?linkid=2198643), [sys.dm_os_sys_info](https://go.microsoft.com/fwlink/?linkid=2198867), and several other DMVs."
            },
            "name": "properties_and_config_help"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_properties_and_configuration_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Metrics on these charts describe storage space consumption in data and transaction log files for selected database. Space consumed within data files by specialized data stores, such as Persistent Version Store, Query Store, etc. is provided as well. Data is collected from [sys.database_files](https://go.microsoft.com/fwlink/?linkid=2198860), [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647), and several other DMVs."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "storage_utilization_details_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used data\\\",\\r\\n1, \\\"Allocated data\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_database_storage_utilization\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, collection_time_utc, data_size_used_mb, data_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used data\\\", data_size_used_mb,\\r\\n                      metric_name == \\\"Allocated data\\\", data_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on collection_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), collection_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Data storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used data",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "data_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used log\\\",\\r\\n1, \\\"Allocated log\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_database_storage_utilization\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, collection_time_utc, log_size_used_mb, log_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used log\\\", log_size_used_mb,\\r\\n                      metric_name == \\\"Allocated log\\\", log_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on collection_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), collection_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Transaction log storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated log",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used log",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "log_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Persistent version store\\\",\\r\\n1, \\\"Online index version store\\\",\\r\\n1, \\\"Used query store\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_database_storage_utilization\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, collection_time_utc, persistent_version_store_size_mb, online_index_version_store_size_mb, query_store_size_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Persistent version store\\\", persistent_version_store_size_mb,\\r\\n                      metric_name == \\\"Online index version store\\\", online_index_version_store_size_mb,\\r\\n                      metric_name == \\\"Used query store\\\", todecimal(query_store_size_mb),\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on collection_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), collection_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Special purpose data storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Persistent version store",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Used query store",
                    "color": "green"
                  },
                  {
                    "seriesName": "Online index version store",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Hyperscale RBPEX",
                    "color": "blue"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "1"
              },
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "2"
              },
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "3"
              },
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "4"
              }
            ],
            "name": "special_purpose_stores"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_database_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "storage_consumption_details_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where object_name == \\\"Databases\\\" and counter_name in (\\\"Transactions/sec\\\",\\\"Write Transactions/sec\\\",\\\"Log Flushes/sec\\\")\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, series_name = strcat(counter_name, iif(instance_name == \\\"tempdb\\\", \\\" | tempdb\\\", \\\"\\\")), value\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_name\\r\\n| project series_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Transaction and log flush rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Transactions/sec | tempdb",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "Write Transactions/sec | tempdb",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "Log Flushes/sec | tempdb",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Transactions/sec",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Log Flushes/sec",
                    "color": "green"
                  },
                  {
                    "seriesName": "Write Transactions/sec",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 1
                    }
                  }
                }
              }
            },
            "name": "transactions"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Transactions/sec`|Transaction rate for all transactions, including read and write transactions, and user and system transactions. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198854).|\r\n|`Write Transactions/sec`|The rate of transactions that wrote to the transaction log of the database. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198644).|\r\n|`Log flushes/sec`|The rate of writes to transaction log as the number of writes per second.|\r\n\r\nMetrics are provided separately for the user database, and for the `tempdb` database. Data is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transactions"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where object_name == \\\"Databases\\\" and counter_name == \\\"Log Bytes Flushed/sec\\\"\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Log flush rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log Bytes Flushed/sec",
                    "label": "Log flush rate",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "transaction_log"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where (object_name == \\\"Database Replica\\\" and counter_name == \\\"Transaction Delay\\\")\\r\\n        or\\r\\n        (object_name == \\\"Databases\\\" and counter_name == \\\"Write Transactions/sec\\\")\\r\\n// Transaction Delay reports cumulative delay in ms/second for all transactions. Derive average per-transaction delay by dividing by the number of write transactions for this database\\r\\n| project sample_time_utc, object_name, counter_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| summarize transaction_delay = sumif(value, counter_name == \\\"Transaction Delay\\\"),\\r\\n            write_transactions = sumif(value, counter_name == \\\"Write Transactions/sec\\\")\\r\\n            by sample_time_utc\\r\\n| project sample_time_utc, transaction_delay_per_transaction = iif(write_transactions != 0 and isnotempty(transaction_delay) and isnotempty(write_transactions), transaction_delay / write_transactions, real(null))\\r\\n| make-series transaction_delay_per_transaction = avg(transaction_delay_per_transaction) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}\\r\\n| project transaction_delay_per_transaction = series_fill_linear(transaction_delay_per_transaction), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Transaction delay",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "transaction_delay_per_transaction"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "transaction_delay_per_transaction",
                    "label": "Transaction delay",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "transaction_delay"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log flush rate`|The rate of writes to the transaction log, as the amount of data per second.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transaction_log"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Transaction delay`|The average delay encountered by each transaction to guarantee that committed data is hardened in the transaction log of synchronous commit replicas. The value is provided on primary replica only and when the database has availability group replicas with synchronous commit.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transaction_delay"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where object_name == \\\"Database Replica\\\" and counter_name in (\\\"Log Bytes Received/sec\\\",\\\"Redone Bytes/sec\\\")\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Secondary replica rates",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "showRefreshButton": true,
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log Bytes Received/sec",
                    "label": "Log receive rate",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Redone Bytes/sec",
                    "label": "Redo rate",
                    "color": "orange"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "secondary_replica_rates"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where object_name == \\\"Database Replica\\\" and counter_name in (\\\"Recovery Queue\\\")\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Secondary replica redo queue",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Recovery Queue",
                    "label": "Redo queue",
                    "color": "purple"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 3,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "secondary_replica_redo_queue"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log receive rate`, `Redo rate`|The rates of receiving and applying transaction log on a secondary replica. When redo rate is comparable to log receive rate, data latency on a secondary replica is minimal; in case of failover to this secondary replica, failover time is minimal as well. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198629).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_secondary_redo_rate"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Redo queue`|The amount of transaction log data waiting to be redone, or applied to data files. When redo queue is low, data latency on a secondary replica is minimal; in case of failover to this secondary replica, failover time is minimal as well. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198629).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_secondary_redo_queue"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Transactions"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "transactions_group"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let current_snapshot = materialize(\\r\\nsqlserver_table_metadata\\r\\n| where collection_time_utc == todatetime(\\\"{selectedDatabase:$.table_metadata_collection_time_utc}\\\")\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| project-away server_name, machine_name\\r\\n| extend count_partitions = count_no_compression_partitions + count_row_compression_partitions + count_page_compression_partitions + count_columnstore_compression_partitions + count_columnstore_archive_compression_partitions,\\r\\n         total_used_size_mb = toreal(in_row_used_size_mb + lob_used_size_mb + row_overflow_used_size_mb),\\r\\n         total_reserved_size_mb = toreal(in_row_reserved_size_mb + lob_reserved_size_mb + row_overflow_reserved_size_mb)\\r\\n| extend used_allocations_label = strcat(round(100 * in_row_used_size_mb/total_used_size_mb, 2), \\\"% | \\\", round(100 * row_overflow_used_size_mb/total_used_size_mb, 2), \\\"% | \\\", round(100 * lob_used_size_mb/total_used_size_mb, 2), \\\"%\\\"),\\r\\n         compression_label = trim(\\\" [|] \\\", strcat(\\r\\n                                                 iif(count_no_compression_partitions > 0, \\\"None | \\\", \\\"\\\"),\\r\\n                                                 iif(count_row_compression_partitions > 0, \\\"Row | \\\", \\\"\\\"),\\r\\n                                                 iif(count_page_compression_partitions > 0, \\\"Page | \\\", \\\"\\\"),\\r\\n                                                 iif(count_columnstore_compression_partitions > 0, \\\"Columnstore | \\\", \\\"\\\"),\\r\\n                                                 iif(count_columnstore_archive_compression_partitions > 0, \\\"Columnstore archive | \\\", \\\"\\\")\\r\\n                                                 ))\\r\\n| extend used_allocations_label = iif(used_allocations_label == \\\"% | % | %\\\", \\\"-\\\", used_allocations_label)\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"temporal_type_desc\\\",\\\"durability_desc\\\",\\\"ledger_type_desc\\\"\\r\\n]);\\r\\nlet column_labels_number = dynamic(\\r\\n[\\r\\n\\\"count_no_compression_partitions\\\",\\\"count_row_compression_partitions\\\",\\\"count_page_compression_partitions\\\",\\\"count_columnstore_compression_partitions\\\",\\\"count_columnstore_archive_compression_partitions\\\",\\\"text_in_row_limit\\\"\\r\\n]);\\r\\nlet column_labels_number_id = dynamic(\\r\\n[\\r\\n\\\"schema_id\\\",\\\"database_id\\\"\\r\\n]);\\r\\nlet column_labels_number_mb = dynamic(\\r\\n[\\r\\n\\\"in_row_used_size_mb\\\",\\\"in_row_reserved_size_mb\\\",\\\"lob_used_size_mb\\\",\\\"lob_reserved_size_mb\\\",\\\"row_overflow_used_size_mb\\\",\\\"row_overflow_reserved_size_mb\\\"\\r\\n]);\\r\\nlet column_labels_bool = dynamic(\\r\\n[\\r\\n\\\"large_value_types_out_of_row\\\",\\\"is_memory_optimized\\\",\\\"is_merge_published\\\",\\\"is_tracked_by_cdc\\\",\\\"is_replicated\\\",\\\"is_filetable\\\",\\\"is_external\\\",\\\"is_node\\\",\\\"is_edge\\\",\\\"is_dropped_ledger_table\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet table_details_string = (\\r\\ncurrent_snapshot\\r\\n| project object_id, temporal_type_desc, durability_desc, ledger_type_desc\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for numbers grid\\r\\nlet table_details_number = (\\r\\ncurrent_snapshot\\r\\n| project object_id, count_no_compression_partitions, count_row_compression_partitions, count_page_compression_partitions, count_columnstore_compression_partitions, count_columnstore_archive_compression_partitions, text_in_row_limit\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number to typeof(string) on (project column_label, column_value = tolong(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for id numbers grid\\r\\nlet table_details_number_id = (\\r\\ncurrent_snapshot\\r\\n| project object_id, schema_id, database_id\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_id to typeof(string) on (project column_label, column_value = toint(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_id = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for mb numbers grid\\r\\nlet table_details_number_mb = (\\r\\ncurrent_snapshot\\r\\n| project object_id, in_row_used_size_mb, in_row_reserved_size_mb, lob_used_size_mb, lob_reserved_size_mb, row_overflow_used_size_mb, row_overflow_reserved_size_mb\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_mb to typeof(string) on (project column_label, column_value = toreal(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_mb = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for boolean grid\\r\\nlet table_details_bool = (\\r\\ncurrent_snapshot\\r\\n| project object_id, large_value_types_out_of_row, is_memory_optimized, is_merge_published, is_tracked_by_cdc, is_replicated, is_filetable, is_external, is_node, is_edge, is_dropped_ledger_table\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_bool to typeof(string) on (project column_label, column_value = toboolean(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_bool = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\ncurrent_snapshot\\r\\n| join table_details_string on object_id\\r\\n| join table_details_number on object_id\\r\\n| join table_details_number_id on object_id\\r\\n| join table_details_number_mb on object_id\\r\\n| join table_details_bool on object_id\\r\\n| project object_id, object_type, schema_name, object_name, count_rows, total_used_size_mb, total_reserved_size_mb, count_partitions, compression_partitions = count_partitions, allocation_used_size_mb = total_used_size_mb, lock_escalation_desc, used_allocations_label, compression_label, in_row_used_size_mb, lob_used_size_mb, row_overflow_used_size_mb, count_no_compression_partitions, count_row_compression_partitions, count_page_compression_partitions, count_columnstore_compression_partitions, count_columnstore_archive_compression_partitions, details_string, details_number, details_number_id, details_number_mb, details_bool\\r\\n| sort by tolower(schema_name) asc, tolower(object_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number",
            "parameterName": "details_number",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_id",
            "parameterName": "details_number_id",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_mb",
            "parameterName": "details_number_mb",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_bool",
            "parameterName": "details_bool",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          }
        ],
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "count_rows",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "count_partitions",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_used_size_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "total_reserved_size_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "compression_partitions",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"compression_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "count_no_compression_partitions",
                      "color": "green"
                    },
                    {
                      "columnName": "count_row_compression_partitions",
                      "color": "greenDark"
                    },
                    {
                      "columnName": "count_page_compression_partitions",
                      "color": "magenta"
                    },
                    {
                      "columnName": "count_columnstore_compression_partitions",
                      "color": "pink"
                    },
                    {
                      "columnName": "count_columnstore_archive_compression_partitions",
                      "color": "purple"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "None (green), Row (dark green), Page (magenta), Columnstore (pink), Columnstore archive (purple)"
              }
            },
            {
              "columnMatch": "allocation_used_size_mb",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"used_allocations_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "in_row_used_size_mb",
                      "color": "blue"
                    },
                    {
                      "columnName": "row_overflow_used_size_mb",
                      "color": "orange"
                    },
                    {
                      "columnName": "lob_used_size_mb",
                      "color": "red"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "In-row (blue), Overflow (orange), LOB (red)"
              }
            },
            {
              "columnMatch": "lock_escalation_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "!=",
                    "thresholdValue": "TABLE",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "used_allocations_label",
              "formatter": 5
            },
            {
              "columnMatch": "compression_label",
              "formatter": 5
            },
            {
              "columnMatch": "in_row_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "lob_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "row_overflow_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "count_no_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_row_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_page_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_columnstore_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_columnstore_archive_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_number",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_id",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_mb",
              "formatter": 5
            },
            {
              "columnMatch": "details_bool",
              "formatter": 5
            }
          ],
          "sortBy": [
            {
              "itemKey": "schema_name",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "object_id",
              "label": "Object ID"
            },
            {
              "columnId": "object_type",
              "label": "Object type"
            },
            {
              "columnId": "schema_name",
              "label": "Schema name"
            },
            {
              "columnId": "object_name",
              "label": "Object name"
            },
            {
              "columnId": "count_rows",
              "label": "Rows"
            },
            {
              "columnId": "total_used_size_mb",
              "label": "Used size (MB)"
            },
            {
              "columnId": "total_reserved_size_mb",
              "label": "Reserved size (MB)"
            },
            {
              "columnId": "count_partitions",
              "label": "Partitions"
            },
            {
              "columnId": "compression_partitions",
              "label": "Compression"
            },
            {
              "columnId": "allocation_used_size_mb",
              "label": "Allocation types"
            },
            {
              "columnId": "lock_escalation_desc",
              "label": "Lock escalation"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "schema_name",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "table_metadata"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Selected table details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_mb}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_number_mb"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_number"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8
            },
            "customWidth": "50",
            "name": "table_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_id}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8
            },
            "customWidth": "50",
            "name": "table_details_number_id"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_bool}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Inactive",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_bool"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqlserver_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "table_details"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "afdfedd6-1853-4e9f-8e78-19d86f65455e",
            "version": "KqlParameterItem/1.0",
            "name": "sqlagentstateSampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "SQLAgent"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "sqlagentstate_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_sqlagent_job_state\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| make-series metric = dcount(sample_time_utc) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No SQL Agent job state samples are available",
        "timeBrushParameterName": "timeRange",
        "exportFieldName": "",
        "exportParameterName": "sqlagentstateHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "purpleDark"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "SQLAgent"
        },
        {
          "parameterName": "sqlserver_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlagentstateSampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "sqlagentstate_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_sqlagent_job_state\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize count_samples = dcount(sample_time_utc)\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No SQL Agent job state samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "SQLAgent"
        },
        {
          "parameterName": "sqlserver_sqlagent_job_state",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlagentstateSampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "sqlagentstate_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d91ea020-aca3-4834-83a1-f19730aa6c3c",
            "version": "KqlParameterItem/1.0",
            "name": "sqlagentstateLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_sqlagent_job_state\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 5m, ({timeRange:start} - 5m), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 5m, ({timeRange:end} + 5m), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (5m)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize sample_time_utc = max(sample_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "587cb1f3-411c-4d74-bd7c-fc93dfc9d5af",
            "version": "KqlParameterItem/1.0",
            "name": "sqlagentstateHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_sqlagent_job_state\\r\\n| where sample_time_utc between (todatetime(\\\"{sqlagentstateHistoricalSample:$.x}\\\") .. (todatetime(\\\"{sqlagentstateHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize sample_time_utc = min(sample_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "80ec1ea3-7583-4958-bb00-f18784698010",
            "version": "KqlParameterItem/1.0",
            "name": "sqlagentstateSampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "sqlagentstateSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "sqlagentstateLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "sqlagentstateSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "sqlagentstateHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "sqlagentstateLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "SQLAgent"
        },
        {
          "parameterName": "sqlserver_sqlagent_job_state",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "sqlagentstate_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_sqlagent_job_state\\r\\n| where sample_time_utc == todatetime(\\\"{sqlagentstateSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize count_jobs = count() by sample_time_utc, sqlagent_start_time_local, sqlagent_status, sqlagent_process_id\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\"), count_jobs, sqlagent_status, sqlagent_start_time_local, sqlagent_process_id\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No SQL Agent job state samples are available",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            },
            {
              "columnMatch": "sqlagent_start_time_local",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              },
              "tooltipFormat": {
                "tooltip": "Displayed in local time of the database engine instance"
              }
            },
            {
              "columnMatch": "collection_time",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "collection_time_utc",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            },
            {
              "columnId": "count_jobs",
              "label": "Jobs"
            },
            {
              "columnId": "sqlagent_status",
              "label": "SQL Agent status"
            },
            {
              "columnId": "sqlagent_start_time_local",
              "label": "SQL Agent start time"
            },
            {
              "columnId": "sqlagent_process_id",
              "label": "SQL Agent process ID"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "SQLAgent"
        },
        {
          "parameterName": "sqlserver_sqlagent_job_state",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlagentstateSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "selected_sqlagentstate_sample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_sqlagent_job_state\\r\\n| where sample_time_utc == todatetime(\\\"{sqlagentstateSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project-away sample_time_utc, server_name, machine_name, sqlagent_start_time_local, sqlagent_status, sqlagent_process_id, sqlagent_session_id\\r\\n| project job_name, job_category, is_job_enabled, is_job_running, start_execution_time_local, stop_execution_time_local, last_completed_execution_time_local, last_completed_execution_result, next_scheduled_execution_time_local, last_execution_requestor, last_executed_step_name, job_id\\r\\n| sort by tolower(job_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "title": "Job state",
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "is_job_enabled",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "1",
                    "representation": "Available",
                    "text": ""
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "0",
                    "representation": "disabled",
                    "text": ""
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Unknown",
                    "text": ""
                  }
                ]
              }
            },
            {
              "columnMatch": "is_job_running",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "pending",
                    "text": ""
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "stopped",
                    "text": ""
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "unknown",
                    "text": ""
                  }
                ]
              }
            },
            {
              "columnMatch": "start_execution_time_local",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              },
              "tooltipFormat": {
                "tooltip": "Displayed in local time of the database engine instance"
              }
            },
            {
              "columnMatch": "stop_execution_time_local",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              },
              "tooltipFormat": {
                "tooltip": "Displayed in local time of the database engine instance"
              }
            },
            {
              "columnMatch": "last_completed_execution_time_local",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              },
              "tooltipFormat": {
                "tooltip": "Displayed in local time of the database engine instance"
              }
            },
            {
              "columnMatch": "last_completed_execution_result",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Succeeded",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Failed",
                    "representation": "failed",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Retry",
                    "representation": "Clock",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Canceled",
                    "representation": "cancelled",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "representation": "pending",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "next_scheduled_execution_time_local",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              },
              "tooltipFormat": {
                "tooltip": "Displayed in local time of the database engine instance"
              }
            },
            {
              "columnMatch": "last_execution_start_time_local",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              },
              "tooltipFormat": {
                "tooltip": "Displayed in local time of the database engine instance"
              }
            },
            {
              "columnMatch": "last_execution_stop_time_local",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              },
              "tooltipFormat": {
                "tooltip": "Displayed in local time of the database engine instance"
              }
            }
          ],
          "filter": true,
          "labelSettings": [
            {
              "columnId": "job_name",
              "label": "Name"
            },
            {
              "columnId": "job_category",
              "label": "Category"
            },
            {
              "columnId": "is_job_enabled",
              "label": "Enabled"
            },
            {
              "columnId": "is_job_running",
              "label": "Running"
            },
            {
              "columnId": "start_execution_time_local",
              "label": "Start time"
            },
            {
              "columnId": "stop_execution_time_local",
              "label": "Stop time"
            },
            {
              "columnId": "last_completed_execution_time_local",
              "label": "Last execution time"
            },
            {
              "columnId": "last_completed_execution_result",
              "label": "Last result"
            },
            {
              "columnId": "next_scheduled_execution_time_local",
              "label": "Next start time"
            },
            {
              "columnId": "last_execution_requestor",
              "label": "Last executed by"
            },
            {
              "columnId": "last_executed_step_name",
              "label": "Last executed step"
            },
            {
              "columnId": "job_id",
              "label": "Job ID"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "SQLAgent"
        },
        {
          "parameterName": "sqlserver_sqlagent_job_state",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlagentstateSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "sql_agent_job_state"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_sqlagent_job_history\\r\\n| where collection_time_utc between (datetime_add(\\\"second\\\", -datetime_diff(\\\"second\\\", {timeRange:end}, {timeRange:start}), todatetime(\\\"{sqlagentstateSampleTime}\\\")) .. todatetime(\\\"{sqlagentstateSampleTime}\\\"))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where step_id == 0\\r\\n| summarize count_jobs = count() by job_id, job_name, run_status_desc\\r\\n| extend tooltip_suffix = case(run_status_desc==\\\"Succeeded\\\", \\\"have succeeded\\\", run_status_desc==\\\"In Progress\\\", \\\"are in progress\\\", run_status_desc==\\\"Retry\\\", \\\"are retrying\\\", run_status_desc==\\\"Canceled\\\", \\\"were canceled\\\", run_status_desc==\\\"Failed\\\", \\\"have failed\\\", \\\"have unknown status\\\")\\r\\n| sort by tolower(job_name) asc, status_ordinal = case(run_status_desc==\\\"Succeeded\\\", 1, run_status_desc==\\\"In Progress\\\", 2, run_status_desc==\\\"Retry\\\", 3, run_status_desc==\\\"Canceled\\\", 4, run_status_desc==\\\"Failed\\\", 5, 6) asc\\r\\n| extend tile_ordinal = row_number()\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "title": "Job execution statistics",
        "noDataMessage": "There is no data for specified parameters.",
        "exportFieldName": "job_id",
        "exportParameterName": "job_id",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "job_name",
            "formatter": 1,
            "tooltipFormat": {
              "tooltip": "[\"count_jobs\"] executions of job \"[\"job_name\"]\" [\"tooltip_suffix\"]"
            }
          },
          "leftContent": {
            "columnMatch": "run_status_desc",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "==",
                  "thresholdValue": "Succeeded",
                  "representation": "success",
                  "text": ""
                },
                {
                  "operator": "==",
                  "thresholdValue": "Failed",
                  "representation": "failed",
                  "text": ""
                },
                {
                  "operator": "==",
                  "thresholdValue": "Retry",
                  "representation": "2",
                  "text": ""
                },
                {
                  "operator": "==",
                  "thresholdValue": "Canceled",
                  "representation": "cancelled",
                  "text": ""
                },
                {
                  "operator": "==",
                  "thresholdValue": "In Progress",
                  "representation": "pending",
                  "text": ""
                },
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "Unavailable",
                  "text": ""
                }
              ]
            }
          },
          "rightContent": {
            "columnMatch": "count_jobs",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            }
          },
          "secondaryContent": {
            "columnMatch": "run_status_desc",
            "formatter": 1
          },
          "showBorder": true,
          "sortCriteriaField": "tile_ordinal",
          "sortOrderField": 1,
          "size": "auto"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "SQLAgent"
        },
        {
          "parameterName": "sqlserver_sqlagent_job_history",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlagentstateSampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "sql_agent_job_exec_stats"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let history = materialize (\\r\\nsqlserver_sqlagent_job_history\\r\\n| where collection_time_utc between (datetime_add(\\\"second\\\", -datetime_diff(\\\"second\\\", {timeRange:end}, {timeRange:start}), todatetime(\\\"{sqlagentstateSampleTime}\\\")) .. todatetime(\\\"{sqlagentstateSampleTime}\\\"))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where job_id == \\\"{job_id}\\\"\\r\\n| project-away collection_time_utc, server_name, machine_name\\r\\n| sort by start_execution_time_local asc, step_id asc // Arrange job steps together in the sort order, starting with job outcome step (step_id 0)\\r\\n| extend job_execution_id = row_number(1) - row_number(1, step_id == 0) // Number each job step sequentially within a job execution. The difference between global row number and job execution row number is constant for a given job execution.\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"job_id\\\", \\\"job_name\\\", \\\"job_category\\\", \\\"subsystem\\\", \\\"output_file_name\\\", \\\"emailed_operator_name\\\", \\\"job_execution_server\\\"\\r\\n]);\\r\\nlet column_labels_number = dynamic(\\r\\n[\\r\\n\\\"job_history_id\\\", \\\"is_job_enabled\\\", \\\"job_version_number\\\", \\\"step_id\\\", \\\"sql_message_id\\\", \\\"sql_severity\\\"\\r\\n]);\\r\\nlet column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"job_create_time_local\\\", \\\"job_modify_time_local\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet history_string = (\\r\\nhistory\\r\\n| project job_history_id, job_id, job_name, job_category, subsystem, output_file_name, emailed_operator_name, job_execution_server\\r\\n| project job_history_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project job_history_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by job_history_id // for each job_history_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for numbers grid\\r\\nlet history_number = (\\r\\nhistory\\r\\n| project job_history_id, is_job_enabled, job_version_number, step_id, sql_message_id, sql_severity\\r\\n| project job_history_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number to typeof(string) on (project column_label, column_value = toint(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project job_history_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number = dynamic_to_json(make_list(c)) by job_history_id // for each job_history_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for datetime grid\\r\\nlet history_datetime = (\\r\\nhistory\\r\\n| project job_history_id, job_create_time_local, job_modify_time_local\\r\\n| project job_history_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project job_history_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_datetime = dynamic_to_json(make_list(c)) by job_history_id // for each job_history_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\nlet history_details = (\\r\\nhistory\\r\\n| join kind=inner history_string on job_history_id\\r\\n| join kind=inner history_number on job_history_id\\r\\n| join kind=inner history_datetime on job_history_id\\r\\n| project job_execution_id, start_execution_time_local, job_history_id, step_id, step_name, message, run_status_desc, job_duration_seconds, retries_attempted, details_string, details_number, details_datetime, message_json = dynamic_to_json(pack(\\\"message\\\", message))\\r\\n);\\r\\nhistory_details\\r\\n| where step_id == 0 // job outcome pseudo-step\\r\\n| extend grid_id = job_execution_id, grid_parent_id = tolong(0)\\r\\n| union (\\r\\nhistory_details\\r\\n| where step_id != 0 // job steps\\r\\n| extend grid_id = tolong(job_history_id), grid_parent_id = job_execution_id\\r\\n)\\r\\n| sort by start_execution_time_local desc, step_id asc, retries_attempted asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "title": "Job history",
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "message_json",
            "parameterName": "message_json",
            "parameterType": 1,
            "defaultValue": "{\"message\":\"\"}"
          },
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": "{\"Property\":\"\",\"Value\":\"\"}"
          },
          {
            "fieldName": "details_number",
            "parameterName": "details_number",
            "parameterType": 1,
            "defaultValue": "{\"Property\":\"\",\"Value\":\"\"}"
          },
          {
            "fieldName": "details_datetime",
            "parameterName": "details_datetime",
            "parameterType": 1,
            "defaultValue": "{\"Property\":\"\",\"Value\":\"\"}"
          }
        ],
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "job_execution_id",
              "formatter": 5
            },
            {
              "columnMatch": "start_execution_time_local",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "job_history_id",
              "formatter": 5
            },
            {
              "columnMatch": "job_duration_seconds",
              "formatter": 0,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "retries_attempted",
              "formatter": 0,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_number",
              "formatter": 5
            },
            {
              "columnMatch": "details_datetime",
              "formatter": 5
            },
            {
              "columnMatch": "message_json",
              "formatter": 5
            },
            {
              "columnMatch": "grid_id",
              "formatter": 5
            },
            {
              "columnMatch": "grid_parent_id",
              "formatter": 5
            }
          ],
          "filter": true,
          "hierarchySettings": {
            "idColumn": "grid_id",
            "parentColumn": "grid_parent_id",
            "treeType": 0,
            "expanderColumn": "start_execution_time_local",
            "expandTopLevel": false
          },
          "labelSettings": [
            {
              "columnId": "start_execution_time_local",
              "label": "Start time"
            },
            {
              "columnId": "step_id",
              "label": "Step ID"
            },
            {
              "columnId": "step_name",
              "label": "Step name"
            },
            {
              "columnId": "message",
              "label": "Message"
            },
            {
              "columnId": "run_status_desc",
              "label": "Run status"
            },
            {
              "columnId": "job_duration_seconds",
              "label": "Duration"
            },
            {
              "columnId": "retries_attempted",
              "label": "Retries"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "SQLAgent"
        },
        {
          "parameterName": "sqlserver_sqlagent_job_history",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "job_id",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlagentstateSampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "sql_agent_job_history"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Job history details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{message_json}\",\"transformers\":null}",
              "size": 3,
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "name": "job_history_message"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "showExportToExcel": true,
              "queryType": 8
            },
            "customWidth": "33",
            "name": "job_history_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number}\",\"transformers\":null}",
              "size": 3,
              "showExportToExcel": true,
              "queryType": 8
            },
            "customWidth": "33",
            "name": "job_history_details_number"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_datetime}\",\"transformers\":null}",
              "size": 3,
              "showExportToExcel": true,
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "job_history_details_datetime"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "SQLAgent"
        },
        {
          "parameterName": "sqlserver_sqlagent_job_state",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlserver_sqlagent_job_history",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "job_id",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlagentstateSampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "sql_agent_history_details_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "2297c2b5-a2fc-4d53-9d60-0fe5424df5e6",
            "version": "KqlParameterItem/1.0",
            "name": "replicasSampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.Latest - shows the most recent sample in selected time range. Historical - lets you select a previous sample within selected time range.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "replicas_sample_type_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "2c51791d-7825-4637-af1a-73e7a0d346cc",
            "version": "KqlParameterItem/1.0",
            "name": "replicasSampleSubtype",
            "label": "Sample type",
            "type": 10,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"all\",\"label\":\"All\"},{\"value\":\"interesting\",\"label\":\"Notable\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "all"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "customWidth": "50",
      "name": "replicas_sample_subtype_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Certain DMV columns are only populated for a replica (or database) when a DMV is queried locally on that replica.\\r\\n// If a value is missing in the DMVs for currently selected server, we try getting it from other servers hosting replicas for the same availability group.\\r\\nlet local_replicas = materialize (\\r\\nsqlserver_database_replicas\\r\\n| where sample_time_utc between (({timeRange:start} - 5m) .. {timeRange:end})\\r\\n| where server_name !~ @\\\"{serverName}\\\" // we already have local data for the current server in the next query\\r\\n| where is_local_replica \\r\\n| where is_suspended\\r\\n        or\\r\\n        database_replica_synchronization_state_desc in (\\\"NOT SYNCHRONIZING\\\",\\\"REVERTING\\\",\\\"INITIALIZING\\\")\\r\\n        or\\r\\n        database_replica_synchronization_health_desc in (\\\"NOT_HEALTHY\\\",\\\"PARTIALLY_HEALTHY\\\")\\r\\n        or\\r\\n        database_state_desc in (\\\"RESTORING\\\",\\\"RECOVERING\\\",\\\"RECOVERY_PENDING\\\",\\\"SUSPECT\\\",\\\"EMERGENCY\\\",\\\"OFFLINE\\\")\\r\\n        or\\r\\n        replica_role_desc in (\\\"RESOLVING\\\")\\r\\n        or\\r\\n        replica_operational_state_desc in (\\\"PENDING_FAILOVER\\\",\\\"PENDING\\\",\\\"OFFLINE\\\",\\\"FAILED\\\",\\\"FAILED_NO_QUORUM\\\")\\r\\n        or\\r\\n        replica_connected_state_desc in (\\\"DISCONNECTED\\\")\\r\\n        or\\r\\n        replica_recovery_health_desc in (\\\"ONLINE_IN_PROGRESS\\\")\\r\\n        or\\r\\n        replica_synchronization_health_desc in (\\\"NOT_HEALTHY\\\",\\\"PARTIALLY_HEALTHY\\\")\\r\\n| project remote_sample_time_utc = sample_time_utc,\\r\\n          group_id,\\r\\n          replica_id,\\r\\n          group_database_id,\\r\\n          replica_server_name,\\r\\n          remote_replica_role_desc = replica_role_desc,\\r\\n          remote_replica_operational_state_desc = replica_operational_state_desc,\\r\\n          remote_replica_connected_state_desc = replica_connected_state_desc,\\r\\n          remote_replica_recovery_health_desc = replica_recovery_health_desc,\\r\\n          remote_replica_synchronization_health_desc = replica_synchronization_health_desc,\\r\\n          remote_is_suspended = is_suspended,\\r\\n          remote_database_replica_synchronization_state_desc = database_replica_synchronization_state_desc,\\r\\n          remote_database_replica_synchronization_health_desc = database_replica_synchronization_health_desc,\\r\\n          remote_database_state_desc = database_state_desc\\r\\n);\\r\\nsqlserver_database_replicas\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| join kind=leftouter local_replicas on group_id, replica_id, group_database_id\\r\\n| project-away group_id1, replica_id1, group_database_id1\\r\\n| extend sample_diff = abs(sample_time_utc - remote_sample_time_utc) // time distance between the sample from the current server and a remote sample for the same replica and database\\r\\n| summarize arg_min(sample_diff, *) by group_id, replica_id, group_database_id, sample_time_utc // restrict to samples with minimal time distance\\r\\n| extend replica_role_desc = case(isnotempty(replica_role_desc), replica_role_desc, sample_diff < 5m, remote_replica_role_desc, \\\"\\\"), // use a remote sample only if it is within a sufficiently close time distance\\r\\n         replica_operational_state_desc = case(isnotempty(replica_operational_state_desc), replica_operational_state_desc, sample_diff < 5m, remote_replica_operational_state_desc, \\\"\\\"),\\r\\n         replica_connected_state_desc = case(isnotempty(replica_connected_state_desc), replica_connected_state_desc, sample_diff < 5m, remote_replica_connected_state_desc, \\\"\\\"),\\r\\n         replica_recovery_health_desc = case(isnotempty(replica_recovery_health_desc), replica_recovery_health_desc, sample_diff < 5m, remote_replica_recovery_health_desc, \\\"\\\"),\\r\\n         replica_synchronization_health_desc = case(isnotempty(replica_synchronization_health_desc), replica_synchronization_health_desc, sample_diff < 5m, remote_replica_synchronization_health_desc, \\\"\\\"),\\r\\n         is_suspended = case(isnotempty(is_suspended), is_suspended, sample_diff < 5m, is_suspended, bool(null)),\\r\\n         database_replica_synchronization_state_desc = case(isnotempty(database_replica_synchronization_state_desc), database_replica_synchronization_state_desc, sample_diff < 5m, remote_database_replica_synchronization_state_desc, \\\"\\\"),\\r\\n         database_replica_synchronization_health_desc = case(isnotempty(database_replica_synchronization_health_desc), database_replica_synchronization_health_desc, sample_diff < 5m, remote_database_replica_synchronization_health_desc, \\\"\\\"),\\r\\n         database_state_desc = case(isnotempty(database_state_desc), database_state_desc, sample_diff < 5m, remote_database_state_desc, \\\"\\\")\\r\\n| extend sample_subtype = iif(\\r\\n                          is_suspended\\r\\n                          or\\r\\n                          database_replica_synchronization_state_desc in (\\\"NOT SYNCHRONIZING\\\",\\\"REVERTING\\\",\\\"INITIALIZING\\\")\\r\\n                          or\\r\\n                          database_replica_synchronization_health_desc in (\\\"NOT_HEALTHY\\\",\\\"PARTIALLY_HEALTHY\\\")\\r\\n                          or\\r\\n                          database_state_desc in (\\\"RESTORING\\\",\\\"RECOVERING\\\",\\\"RECOVERY_PENDING\\\",\\\"SUSPECT\\\",\\\"EMERGENCY\\\",\\\"OFFLINE\\\")\\r\\n                          or\\r\\n                          replica_role_desc in (\\\"RESOLVING\\\")\\r\\n                          or\\r\\n                          replica_operational_state_desc in (\\\"PENDING_FAILOVER\\\",\\\"PENDING\\\",\\\"OFFLINE\\\",\\\"FAILED\\\",\\\"FAILED_NO_QUORUM\\\")\\r\\n                          or\\r\\n                          replica_connected_state_desc in (\\\"DISCONNECTED\\\")\\r\\n                          or\\r\\n                          replica_recovery_health_desc in (\\\"ONLINE_IN_PROGRESS\\\")\\r\\n                          or\\r\\n                          replica_synchronization_health_desc in (\\\"NOT_HEALTHY\\\",\\\"PARTIALLY_HEALTHY\\\")\\r\\n                          , \\\"interesting\\\", \\\"regular\\\")\\r\\n| where \\\"{replicasSampleSubtype}\\\" == \\\"all\\\" or (\\\"{replicasSampleSubtype}\\\" == \\\"interesting\\\" and sample_subtype == \\\"{replicasSampleSubtype}\\\")\\r\\n| make-series metric = dcount(strcat(replica_id, group_database_id)) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2 by sample_subtype\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No samples are available",
        "timeBrushParameterName": "timeRange",
        "exportParameterName": "replicasHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "interesting",
              "label": "Notable",
              "color": "red"
            },
            {
              "seriesName": "regular",
              "label": "Regular",
              "color": "blueDark"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "replica_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_replicas\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize count_samples = dcount(sample_time_utc)\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of distinct databases in a sample or a group of samples. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "replicas_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "85962b84-790e-43b3-bcb8-1b28a604e985",
            "version": "KqlParameterItem/1.0",
            "name": "replicasLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_replicas\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 5m, ({timeRange:start} - 5m), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 5m, ({timeRange:end} + 5m), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (5m)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize sample_time_utc = max(sample_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "5b8d5988-63c0-4b41-b972-ebf964c936c2",
            "version": "KqlParameterItem/1.0",
            "name": "replicasHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Selected time from the history chart is a binned time generated by make-series and is unlikely to match an actual sample.\\r\\n// Look up an actual sample within the sample group selected on the history chart, differentiating between samples in different series.\\r\\nsqlserver_database_replicas\\r\\n| where sample_time_utc between (todatetime(\\\"{replicasHistoricalSample:$.x}\\\") .. (todatetime(\\\"{replicasHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend sample_type = iif(\\r\\n                          is_suspended\\r\\n                          or\\r\\n                          database_replica_synchronization_state_desc in (\\\"NOT SYNCHRONIZING\\\",\\\"REVERTING\\\",\\\"INITIALIZING\\\")\\r\\n                          or\\r\\n                          database_replica_synchronization_health_desc in (\\\"NOT_HEALTHY\\\",\\\"PARTIALLY_HEALTHY\\\")\\r\\n                          or\\r\\n                          database_state_desc in (\\\"RESTORING\\\",\\\"RECOVERING\\\",\\\"RECOVERY_PENDING\\\",\\\"SUSPECT\\\",\\\"EMERGENCY\\\",\\\"OFFLINE\\\")\\r\\n                          or\\r\\n                          replica_role_desc in (\\\"RESOLVING\\\")\\r\\n                          or\\r\\n                          replica_operational_state_desc in (\\\"PENDING_FAILOVER\\\",\\\"PENDING\\\",\\\"OFFLINE\\\",\\\"FAILED\\\",\\\"FAILED_NO_QUORUM\\\")\\r\\n                          or\\r\\n                          replica_connected_state_desc in (\\\"DISCONNECTED\\\")\\r\\n                          or\\r\\n                          replica_recovery_health_desc in (\\\"ONLINE_IN_PROGRESS\\\")\\r\\n                          or\\r\\n                          replica_synchronization_health_desc in (\\\"NOT_HEALTHY\\\",\\\"PARTIALLY_HEALTHY\\\")\\r\\n                          , \\\"interesting\\\", \\\"regular\\\")\\r\\n| where sample_type == \\\"{replicasHistoricalSample:$.series}\\\"\\r\\n| summarize sample_time_utc = min(sample_time_utc) // Selecting any sample within a sample group is valid. Use the earliest for determinism.\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "d3907030-6a67-4079-8f9e-9526e42321bc",
            "version": "KqlParameterItem/1.0",
            "name": "replicasSampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "replicasSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "replicasLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "replicasSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "replicasHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "replicasLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "replicas_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_replicas\\r\\n| where sample_time_utc == todatetime(\\\"{replicasSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize count_replicas = dcount(replica_id) by sample_time_utc\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\"), count_replicas\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No replica samples are available",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            },
            {
              "columnId": "count_replicas",
              "label": "Replicas"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "selected_replica_sample"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "252ab2b9-4c79-4073-8bbf-2a59adb8ca18",
            "cellValue": "tabAvailabilityGroupsListeners",
            "linkTarget": "parameter",
            "linkLabel": "Availability groups, replicas, databases",
            "subTarget": "AvailabilityGroups",
            "style": "link"
          },
          {
            "id": "99fd804c-4bf5-45ef-b366-d5f42e148de2",
            "cellValue": "tabAvailabilityGroupsListeners",
            "linkTarget": "parameter",
            "linkLabel": "Listeners",
            "subTarget": "Listeners",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "availabilityGroupsListeners"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let local_and_primary_replicas = materialize (\\r\\nsqlserver_database_replicas\\r\\n| where sample_time_utc between ((todatetime(\\\"{replicasSampleTime}\\\") - 5m) .. todatetime(\\\"{replicasSampleTime}\\\"))\\r\\n| where is_local_replica\\r\\n        or\\r\\n        replica_role_desc == \\\"PRIMARY\\\" // get primary replica server name to create a link to it, which is used to get a complete view of AG/replica/database state\\r\\n| summarize arg_max(sample_time_utc, replica_operational_state_desc, replica_connected_state_desc, replica_recovery_health_desc, replica_create_date, replica_modify_date, replica_last_connect_error_description, replica_last_connect_error_timestamp, machine_name, secondary_lag_seconds, database_state_desc)\\r\\n            by group_id, group_database_id, replica_server_name, is_local_replica, replica_role_desc\\r\\n);\\r\\nlet primary_replicas = (\\r\\nlocal_and_primary_replicas\\r\\n| where replica_role_desc == \\\"PRIMARY\\\"\\r\\n| summarize arg_max(sample_time_utc, primary_replica_server_name = replica_server_name, primary_replica_machine_name = machine_name)\\r\\n            by group_id\\r\\n);\\r\\n// Certain DMV columns are only populated for a replica (or database) when a DMV is queried locally on that replica.\\r\\n// If a value is missing in the DMVs for currently selected server, we try getting it from other servers hosting replicas for the same availability group.\\r\\nlet local_replicas = (\\r\\nlocal_and_primary_replicas\\r\\n| where is_local_replica\\r\\n| summarize arg_max(sample_time_utc, remote_replica_operational_state_desc = replica_operational_state_desc, remote_replica_connected_state_desc = replica_connected_state_desc, remote_replica_recovery_health_desc = replica_recovery_health_desc, remote_replica_create_date = replica_create_date, remote_replica_modify_date = replica_modify_date, remote_replica_last_connect_error_description = replica_last_connect_error_description, remote_replica_last_connect_error_timestamp = replica_last_connect_error_timestamp, remote_secondary_lag_seconds = secondary_lag_seconds, remote_database_state_desc = database_state_desc)\\r\\n            by group_id, group_database_id, replica_server_name\\r\\n);\\r\\nlet replicas = materialize (\\r\\nsqlserver_database_replicas\\r\\n| where sample_time_utc == todatetime(\\\"{replicasSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| join kind=leftouter local_replicas on group_id, replica_server_name, group_database_id\\r\\n| project-away group_id1, sample_time_utc1, group_database_id1\\r\\n| join kind=leftouter primary_replicas on group_id\\r\\n| project-away group_id1, sample_time_utc1\\r\\n| extend replica_operational_state_desc = iif(isnotempty(replica_operational_state_desc), replica_operational_state_desc, remote_replica_operational_state_desc),\\r\\n         replica_connected_state_desc = iif(isnotempty(replica_connected_state_desc), replica_connected_state_desc, remote_replica_connected_state_desc),\\r\\n         replica_recovery_health_desc = iif(isnotempty(replica_recovery_health_desc), replica_recovery_health_desc, remote_replica_recovery_health_desc),\\r\\n         replica_create_date = iif(isnotempty(replica_create_date), replica_create_date, remote_replica_create_date),\\r\\n         replica_modify_date = iif(isnotempty(replica_modify_date), replica_modify_date, remote_replica_modify_date),\\r\\n         replica_last_connect_error_description = iif(isnotempty(replica_last_connect_error_description), replica_last_connect_error_description, remote_replica_last_connect_error_description),\\r\\n         replica_last_connect_error_timestamp = iif(isnotempty(replica_last_connect_error_timestamp), replica_last_connect_error_timestamp, remote_replica_last_connect_error_timestamp),\\r\\n         secondary_lag_seconds = iif(isnotempty(secondary_lag_seconds), secondary_lag_seconds, remote_secondary_lag_seconds),\\r\\n         database_state_desc = iif(isnotempty(database_state_desc), database_state_desc, remote_database_state_desc)\\r\\n| project group_id,\\r\\n          replica_id,\\r\\n          group_database_id,\\r\\n          availability_group_name,\\r\\n          replica_server_name,\\r\\n          availability_mode_desc = case(availability_mode_desc == \\\"ASYNCHRONOUS_COMMIT\\\", \\\"Async\\\", availability_mode_desc == \\\"SYNCHRONOUS_COMMIT\\\", \\\"Sync\\\", availability_mode_desc),\\r\\n          failover_mode_desc = case(failover_mode_desc == \\\"AUTOMATIC\\\", \\\"Auto\\\", failover_mode_desc == \\\"MANUAL\\\", \\\"Manual\\\", failover_mode_desc == \\\"EXTERNAL\\\", \\\"External\\\", failover_mode_desc),\\r\\n          is_readable = case(replica_role_desc == \\\"PRIMARY\\\", true, replica_role_desc == \\\"SECONDARY\\\" and secondary_role_allow_connections_desc in (\\\"ALL\\\", \\\"READ_ONLY\\\"), true, replica_role_desc == \\\"SECONDARY\\\" and secondary_role_allow_connections_desc == \\\"NO\\\", false, bool(null)),\\r\\n          replica_role_desc = case(replica_role_desc == \\\"PRIMARY\\\", \\\"Primary\\\", replica_role_desc == \\\"SECONDARY\\\", \\\"Secondary\\\", replica_role_desc == \\\"RESOLVING\\\", \\\"Resolving\\\", replica_role_desc),\\r\\n          replica_recovery_health_desc = case(replica_recovery_health_desc == \\\"ONLINE\\\", \\\"Online\\\", replica_recovery_health_desc == \\\"ONLINE_IN_PROGRESS\\\", \\\"Online in progress\\\", \\\"\\\"),\\r\\n          replica_synchronization_health_desc = case(replica_synchronization_health_desc == \\\"HEALTHY\\\", \\\"Healthy\\\", replica_synchronization_health_desc == \\\"PARTIALLY_HEALTHY\\\", \\\"Partially healthy\\\", replica_synchronization_health_desc == \\\"NOT_HEALTHY\\\", \\\"Not healthy\\\", \\\"\\\"),\\r\\n          replica_connected_state_desc = case(replica_connected_state_desc == \\\"CONNECTED\\\", \\\"Connected\\\", replica_connected_state_desc == \\\"DISCONNECTED\\\", \\\"Disconnected\\\", \\\"\\\"),\\r\\n          replica_operational_state_desc = case(replica_operational_state_desc == \\\"PENDING_FAILOVER\\\", \\\"Pending failover\\\", replica_operational_state_desc == \\\"PENDING\\\", \\\"Pending\\\", replica_operational_state_desc == \\\"ONLINE\\\", \\\"Online\\\", replica_operational_state_desc == \\\"OFFLINE\\\", \\\"Offline\\\", replica_operational_state_desc == \\\"FAILED\\\", \\\"Failed\\\", replica_operational_state_desc == \\\"FAILED_NO_QUORUM\\\", \\\"Failed, no quorum\\\", \\\"\\\"),\\r\\n          primary_replica_server_name = iif(replica_role_desc == \\\"SECONDARY\\\", primary_replica_server_name, \\\"\\\"), primary_replica_machine_name = iif(replica_role_desc == \\\"SECONDARY\\\", primary_replica_machine_name, \\\"\\\"),\\r\\n          database_id,\\r\\n          database_name,\\r\\n          is_local_database_replica,\\r\\n          is_suspended,\\r\\n          database_replica_synchronization_state_desc = case(database_replica_synchronization_state_desc == \\\"NOT SYNCHRONIZING\\\", \\\"Not synchronizing\\\", database_replica_synchronization_state_desc == \\\"SYNCHRONIZING\\\", \\\"Synchronizing\\\", database_replica_synchronization_state_desc == \\\"SYNCHRONIZED\\\", \\\"Synchronized\\\", database_replica_synchronization_state_desc == \\\"REVERTING\\\", \\\"Reverting\\\", database_replica_synchronization_state_desc == \\\"INITIALIZING\\\", \\\"Initializing\\\", \\\"\\\"),\\r\\n          database_replica_synchronization_health_desc = case(database_replica_synchronization_health_desc == \\\"NOT_HEALTHY\\\", \\\"Not healthy\\\", database_replica_synchronization_health_desc == \\\"PARTIALLY_HEALTHY\\\", \\\"Partially healthy\\\", database_replica_synchronization_health_desc == \\\"HEALTHY\\\", \\\"Healthy\\\", \\\"\\\"),\\r\\n          database_state_desc = case(database_state_desc == \\\"ONLINE\\\", \\\"Online\\\", database_state_desc == \\\"RESTORING\\\", \\\"Restoring\\\", database_state_desc == \\\"RECOVERING\\\", \\\"Recovering\\\", database_state_desc == \\\"RECOVERY_PENDING\\\", \\\"Recovery pending\\\", database_state_desc == \\\"SUSPECT\\\", \\\"Suspect\\\", database_state_desc == \\\"EMERGENCY\\\", \\\"Emergency\\\", database_state_desc == \\\"OFFLINE\\\", \\\"Offline\\\", \\\"\\\"),\\r\\n          availability_group_listeners,\\r\\n          secondary_lag_seconds,\\r\\n          log_send_queue_size_kb,\\r\\n          log_send_rate_kbps,\\r\\n          redo_queue_size_kb,\\r\\n          redo_rate_kbps,\\r\\n          automated_backup_preference_desc,\\r\\n          cluster_type_desc,\\r\\n          failure_condition_level,\\r\\n          health_check_timeout_ms,\\r\\n          required_synchronized_secondaries_to_commit,\\r\\n          count_availability_group_threads,\\r\\n          basic_features,\\r\\n          dtc_support,\\r\\n          db_failover,\\r\\n          is_distributed,\\r\\n          replica_last_connect_error_description,\\r\\n          endpoint_url,\\r\\n          primary_role_allow_connections_desc,\\r\\n          secondary_role_allow_connections_desc,\\r\\n          seeding_mode_desc,\\r\\n          session_timeout,\\r\\n          backup_priority,\\r\\n          replica_last_connect_error_timestamp,\\r\\n          replica_create_date,\\r\\n          replica_modify_date,\\r\\n          suspend_reason_desc,\\r\\n          low_water_mark_for_ghosts,\\r\\n          count_database_capture_threads,\\r\\n          count_database_redo_threads,\\r\\n          is_primary_database_replica,\\r\\n          is_commit_participant,\\r\\n          last_hardened_time,\\r\\n          last_redone_time,\\r\\n          last_commit_time\\r\\n);\\r\\n// Create JSON for detail grids\\r\\n// Define column labels for each grid\\r\\nlet availability_group_column_labels_string = dynamic(\\r\\n[\\r\\n\\\"group_id\\\",\\\"availability_group_name\\\",\\\"automated_backup_preference_desc\\\",\\\"cluster_type_desc\\\"\\r\\n]);\\r\\nlet availability_group_column_labels_number_count = dynamic(\\r\\n[\\r\\n\\\"failure_condition_level\\\",\\\"health_check_timeout_ms\\\",\\\"required_synchronized_secondaries_to_commit\\\",\\\"count_availability_group_threads\\\"\\r\\n]);\\r\\nlet availability_group_column_labels_boolean = dynamic(\\r\\n[\\r\\n\\\"basic_features\\\",\\\"dtc_support\\\",\\\"db_failover\\\",\\\"is_distributed\\\"\\r\\n]);\\r\\nlet replica_column_labels_string = dynamic(\\r\\n[\\r\\n\\\"replica_id\\\",\\\"replica_last_connect_error_description\\\",\\\"endpoint_url\\\",\\\"primary_role_allow_connections_desc\\\",\\\"secondary_role_allow_connections_desc\\\",\\\"seeding_mode_desc\\\"\\r\\n]);\\r\\nlet replica_column_labels_number_count = dynamic(\\r\\n[\\r\\n\\\"session_timeout\\\",\\\"backup_priority\\\"\\r\\n]);\\r\\nlet replica_column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"replica_last_connect_error_timestamp\\\",\\\"replica_create_date\\\",\\\"replica_modify_date\\\"\\r\\n]);\\r\\nlet database_column_labels_string = dynamic(\\r\\n[\\r\\n\\\"group_database_id\\\",\\\"suspend_reason_desc\\\"\\r\\n]);\\r\\nlet database_column_labels_number_count = dynamic(\\r\\n[\\r\\n\\\"low_water_mark_for_ghosts\\\",\\\"count_database_capture_threads\\\",\\\"count_database_redo_threads\\\"\\r\\n]);\\r\\nlet database_column_labels_boolean = dynamic(\\r\\n[\\r\\n\\\"is_primary_database_replica\\\",\\\"is_commit_participant\\\"\\r\\n]);\\r\\nlet database_column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"last_hardened_time\\\",\\\"last_redone_time\\\",\\\"last_commit_time\\\"\\r\\n]);\\r\\n// result set for availability group strings grid\\r\\nlet availability_group_details_string = (\\r\\nreplicas\\r\\n| distinct group_id, availability_group_name, automated_backup_preference_desc, cluster_type_desc\\r\\n| project group_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = availability_group_column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc // make_list later will preserve sort order\\r\\n| project group_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize availability_group_details_string = dynamic_to_json(make_list(c)) by group_id // for each group_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for availability group count numbers grid\\r\\nlet availability_group_details_number_count = (\\r\\nreplicas\\r\\n| distinct group_id, failure_condition_level, health_check_timeout_ms, required_synchronized_secondaries_to_commit, count_availability_group_threads\\r\\n| project group_id, columns = pack_all()\\r\\n| mv-apply column_label = availability_group_column_labels_number_count to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project group_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize availability_group_details_number_count = dynamic_to_json(make_list(c)) by group_id\\r\\n);\\r\\n// result set for availability group boolean grid\\r\\nlet availability_group_details_boolean = (\\r\\nreplicas\\r\\n| distinct group_id, basic_features, dtc_support, db_failover, is_distributed\\r\\n| project group_id, columns = pack_all()\\r\\n| mv-apply column_label = availability_group_column_labels_boolean to typeof(string) on (project column_label, column_value = tobool(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project group_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize availability_group_details_boolean = dynamic_to_json(make_list(c)) by group_id\\r\\n);\\r\\n// result set for replica strings grid\\r\\nlet replica_details_string = (\\r\\nreplicas\\r\\n| distinct group_id, replica_id, replica_last_connect_error_description, endpoint_url, primary_role_allow_connections_desc, secondary_role_allow_connections_desc, seeding_mode_desc\\r\\n| project group_id, replica_id, columns = pack_all()\\r\\n| mv-apply column_label = replica_column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project group_id, replica_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize replica_details_string = dynamic_to_json(make_list(c)) by group_id, replica_id\\r\\n);\\r\\n// result set for replica count numbers grid\\r\\nlet replica_details_number_count = (\\r\\nreplicas\\r\\n| distinct group_id, replica_id, session_timeout, backup_priority\\r\\n| project group_id, replica_id, columns = pack_all()\\r\\n| mv-apply column_label = replica_column_labels_number_count to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project group_id, replica_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize replica_details_number_count = dynamic_to_json(make_list(c)) by group_id, replica_id\\r\\n);\\r\\n// result set for replica datetime grid\\r\\nlet replica_details_datetime = (\\r\\nreplicas\\r\\n| distinct group_id, replica_id, replica_last_connect_error_timestamp, replica_create_date, replica_modify_date\\r\\n| project group_id, replica_id, columns = pack_all()\\r\\n| mv-apply column_label = replica_column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project group_id, replica_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize replica_details_datetime = dynamic_to_json(make_list(c)) by group_id, replica_id\\r\\n);\\r\\n// result set for database strings grid\\r\\nlet database_details_string = (\\r\\nreplicas\\r\\n| distinct group_id, group_database_id, replica_id, suspend_reason_desc\\r\\n| project group_id, group_database_id, replica_id, columns = pack_all()\\r\\n| mv-apply column_label = database_column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project group_id, group_database_id, replica_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize database_details_string = dynamic_to_json(make_list(c)) by group_id, group_database_id, replica_id\\r\\n);\\r\\n// result set for database count numbers grid\\r\\nlet database_details_number_count = (\\r\\nreplicas\\r\\n| distinct group_id, group_database_id, replica_id, low_water_mark_for_ghosts, count_database_capture_threads, count_database_redo_threads\\r\\n| project group_id, group_database_id, replica_id, columns = pack_all()\\r\\n| mv-apply column_label = database_column_labels_number_count to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project group_id, group_database_id, replica_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize database_details_number_count = dynamic_to_json(make_list(c)) by group_id, group_database_id, replica_id\\r\\n);\\r\\n// result set for database boolean grid\\r\\nlet database_details_boolean = (\\r\\nreplicas\\r\\n| distinct group_id, group_database_id, replica_id, is_primary_database_replica, is_commit_participant\\r\\n| project group_id, group_database_id, replica_id, columns = pack_all()\\r\\n| mv-apply column_label = database_column_labels_boolean to typeof(string) on (project column_label, column_value = tobool(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project group_id, group_database_id, replica_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize database_details_boolean = dynamic_to_json(make_list(c)) by group_id, group_database_id, replica_id\\r\\n);\\r\\n// result set for database datetime grid\\r\\nlet database_details_datetime = (\\r\\nreplicas\\r\\n| distinct group_id, group_database_id, replica_id, last_hardened_time, last_redone_time, last_commit_time\\r\\n| project group_id, group_database_id, replica_id, columns = pack_all()\\r\\n| mv-apply column_label = database_column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project group_id, group_database_id, replica_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize database_details_datetime = dynamic_to_json(make_list(c)) by group_id, group_database_id, replica_id\\r\\n);\\r\\n// result set with joined detail JSON columns\\r\\nlet replicas_including_details = materialize (\\r\\nreplicas\\r\\n| join kind=inner availability_group_details_string on group_id\\r\\n| join kind=inner availability_group_details_number_count on group_id\\r\\n| join kind=inner availability_group_details_boolean on group_id\\r\\n| join kind=inner replica_details_string on group_id, replica_id\\r\\n| join kind=inner replica_details_number_count on group_id, replica_id\\r\\n| join kind=inner replica_details_datetime on group_id, replica_id\\r\\n| join kind=inner database_details_string on group_id, group_database_id, replica_id\\r\\n| join kind=inner database_details_number_count on group_id, group_database_id, replica_id\\r\\n| join kind=inner database_details_boolean on group_id, group_database_id, replica_id\\r\\n| join kind=inner database_details_datetime on group_id, group_database_id, replica_id\\r\\n| project-away group_id1, group_id2, group_id3, group_id4, group_id5, group_id6, group_id7, group_id8, group_id9, replica_id1, replica_id2, replica_id3, group_database_id1, group_database_id2, group_database_id3, replica_id4, replica_id5, replica_id6, replica_id7\\r\\n| extend empty_details = '[{\\\"Property\\\":\\\"\\\",\\\"Value\\\":\\\"\\\"}]'\\r\\n);\\r\\n// top grid level (availability group)\\r\\nreplicas_including_details\\r\\n| summarize by parent_id = \\\"\\\", id = group_id, grouper = strcat(\\\"🔢\\\", availability_group_name), availability_group_listeners, availability_group_details_string, availability_group_details_number_count, availability_group_details_boolean, replica_details_string = empty_details, replica_details_number_count = empty_details, replica_details_datetime = empty_details, database_details_string = empty_details, database_details_number_count = empty_details, database_details_boolean = empty_details, database_details_datetime = empty_details\\r\\n| union (\\r\\n// next grid level (availability replica)\\r\\nreplicas_including_details\\r\\n| summarize by parent_id = group_id, id = replica_id, grouper = strcat(\\\"🖥\\\", replica_server_name), replica_role_desc, availability_mode_desc, failover_mode_desc, is_readable, replica_connected_state_desc, replica_operational_state_desc, replica_recovery_health_desc, replica_synchronization_health_desc, primary_replica_server_name, primary_replica_machine_name, availability_group_listeners, availability_group_details_string, availability_group_details_number_count, availability_group_details_boolean, replica_details_string, replica_details_number_count, replica_details_datetime, database_details_string = empty_details, database_details_number_count = empty_details, database_details_boolean = empty_details, database_details_datetime = empty_details\\r\\n)\\r\\n| union (\\r\\n// leaf grid level (availability database on an availability replica)\\r\\nreplicas_including_details\\r\\n| project parent_id = replica_id, id = strcat(replica_id, \\\"_\\\", group_database_id), grouper = strcat(\\\"🔘\\\", database_name), is_local_database_replica, is_suspended, database_replica_synchronization_state_desc, database_replica_synchronization_health_desc, database_state_desc, secondary_lag_seconds, redo_queue_size_kb, redo_rate_kbps, log_send_queue_size_kb, log_send_rate_kbps, availability_group_details_string, availability_group_details_number_count, availability_group_details_boolean, replica_details_string, replica_details_number_count, replica_details_datetime, database_details_string, database_details_number_count, database_details_boolean, database_details_datetime\\r\\n)\\r\\n| sort by grouper asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "availability_group_details_string",
            "parameterName": "availability_group_details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "availability_group_details_number_count",
            "parameterName": "availability_group_details_number_count",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "availability_group_details_boolean",
            "parameterName": "availability_group_details_boolean",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "replica_details_string",
            "parameterName": "replica_details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "replica_details_number_count",
            "parameterName": "replica_details_number_count",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "replica_details_datetime",
            "parameterName": "replica_details_datetime",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "database_details_string",
            "parameterName": "database_details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "database_details_number_count",
            "parameterName": "database_details_number_count",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "database_details_boolean",
            "parameterName": "database_details_boolean",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "database_details_datetime",
            "parameterName": "database_details_datetime",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          }
        ],
        "showExportToExcel": true,
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "parent_id",
              "formatter": 5
            },
            {
              "columnMatch": "id",
              "formatter": 5
            },
            {
              "columnMatch": "availability_group_listeners",
              "formatter": 5
            },
            {
              "columnMatch": "availability_group_details_string",
              "formatter": 5
            },
            {
              "columnMatch": "availability_group_details_number_count",
              "formatter": 5
            },
            {
              "columnMatch": "availability_group_details_boolean",
              "formatter": 5
            },
            {
              "columnMatch": "replica_details_string",
              "formatter": 5
            },
            {
              "columnMatch": "replica_details_number_count",
              "formatter": 5
            },
            {
              "columnMatch": "replica_details_datetime",
              "formatter": 5
            },
            {
              "columnMatch": "database_details_string",
              "formatter": 5
            },
            {
              "columnMatch": "database_details_number_count",
              "formatter": 5
            },
            {
              "columnMatch": "database_details_boolean",
              "formatter": 5
            },
            {
              "columnMatch": "database_details_datetime",
              "formatter": 5
            },
            {
              "columnMatch": "replica_role_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Primary",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Secondary",
                    "representation": "turquoise",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Resolving",
                    "representation": "yellow",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "13ch"
              }
            },
            {
              "columnMatch": "availability_mode_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Async",
                    "representation": "grayBlue",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Sync",
                    "representation": "greenDark",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "12ch"
              }
            },
            {
              "columnMatch": "failover_mode_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Auto",
                    "representation": "lightBlue",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Manual",
                    "representation": "gray",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "External",
                    "representation": "brown",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "13ch"
              }
            },
            {
              "columnMatch": "is_readable",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "Check",
                    "text": ""
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "Subtract",
                    "text": ""
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "14ch"
              }
            },
            {
              "columnMatch": "replica_connected_state_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Connected",
                    "representation": "Connect",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Disconnected",
                    "representation": "Disconnect",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "20ch"
              }
            },
            {
              "columnMatch": "replica_operational_state_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Pending failover",
                    "representation": "pending",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Pending",
                    "representation": "pending",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Online",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Offline",
                    "representation": "cancelled",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Failed",
                    "representation": "failed",
                    "text": "{0}{1}"
                  },
                  {
                    "thresholdValue": "Failed, no quorum",
                    "representation": "failed",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "20ch"
              }
            },
            {
              "columnMatch": "replica_recovery_health_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Online",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Online in progress",
                    "representation": "pending",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "replica_synchronization_health_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Healthy",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Not healthy",
                    "representation": "critical",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Partially healthy",
                    "representation": "warning",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "15ch"
              }
            },
            {
              "columnMatch": "primary_replica_server_name",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Database watcher/SQL Server/instance",
                  "typeSource": "workbook",
                  "gallerySource": "default",
                  "locationSource": "workbook",
                  "workbookName": "SQL Server instance",
                  "passSpecificParams": true,
                  "templateParameters": [
                    {
                      "name": "timeRange",
                      "source": "parameter",
                      "value": "timeRange"
                    },
                    {
                      "name": "linkAdxClusterUri",
                      "source": "parameter",
                      "value": "adxClusterUri"
                    },
                    {
                      "name": "linkAdxDatabase",
                      "source": "parameter",
                      "value": "adxDatabase"
                    },
                    {
                      "name": "tabName",
                      "source": "static",
                      "value": "Replicas"
                    },
                    {
                      "name": "machineName",
                      "source": "column",
                      "value": "primary_replica_machine_name"
                    },
                    {
                      "name": "serverName",
                      "source": "column",
                      "value": "primary_replica_server_name"
                    }
                  ]
                },
                "customColumnWidthSetting": "18ch"
              }
            },
            {
              "columnMatch": "primary_replica_machine_name",
              "formatter": 5
            },
            {
              "columnMatch": "is_local_database_replica",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "Check",
                    "text": ""
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "Subtract",
                    "text": ""
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": ""
                  }
                ],
                "customColumnWidthSetting": "10ch"
              }
            },
            {
              "columnMatch": "is_suspended",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "critical",
                    "text": "Yes"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "success",
                    "text": "No"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": ""
                  }
                ],
                "customColumnWidthSetting": "15ch"
              }
            },
            {
              "columnMatch": "database_replica_synchronization_state_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Not synchronizing",
                    "representation": "error",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Synchronizing",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Synchronized",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Reverting",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Initializing",
                    "representation": "uninitialized",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "database_replica_synchronization_health_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Healthy",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Partially healthy",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Not healthy",
                    "representation": "4",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "18ch"
              }
            },
            {
              "columnMatch": "database_state_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Online",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Restoring",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Recovering",
                    "representation": "pending",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Recovery pending",
                    "representation": "pending",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Suspect",
                    "representation": "failed",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Emergency",
                    "representation": "critical",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Offline",
                    "representation": "cancelled",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "18ch"
              }
            },
            {
              "columnMatch": "secondary_lag_seconds",
              "formatter": 0,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "redo_queue_size_kb",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "redo_rate_kbps",
              "formatter": 0,
              "numberFormat": {
                "unit": 12,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "log_send_queue_size_kb",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "log_send_rate_kbps",
              "formatter": 0,
              "numberFormat": {
                "unit": 12,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "replica_server_name",
              "formatter": 5
            }
          ],
          "filter": true,
          "hierarchySettings": {
            "idColumn": "id",
            "parentColumn": "parent_id",
            "treeType": 0,
            "expanderColumn": "grouper",
            "expandTopLevel": true
          },
          "labelSettings": [
            {
              "columnId": "grouper",
              "label": "AG>Replica>Database"
            },
            {
              "columnId": "replica_role_desc",
              "label": "Role"
            },
            {
              "columnId": "availability_mode_desc",
              "label": "Mode"
            },
            {
              "columnId": "failover_mode_desc",
              "label": "Failover"
            },
            {
              "columnId": "is_readable",
              "label": "Readable"
            },
            {
              "columnId": "replica_connected_state_desc",
              "label": "Connected state"
            },
            {
              "columnId": "replica_operational_state_desc",
              "label": "Operational state"
            },
            {
              "columnId": "replica_recovery_health_desc",
              "label": "Recovery state"
            },
            {
              "columnId": "replica_synchronization_health_desc",
              "label": "Sync health"
            },
            {
              "columnId": "primary_replica_server_name",
              "label": "Primary"
            },
            {
              "columnId": "is_local_database_replica",
              "label": "Local"
            },
            {
              "columnId": "is_suspended",
              "label": "Suspended"
            },
            {
              "columnId": "database_replica_synchronization_state_desc",
              "label": "DB sync state"
            },
            {
              "columnId": "database_replica_synchronization_health_desc",
              "label": "DB sync health"
            },
            {
              "columnId": "database_state_desc",
              "label": "DB state"
            },
            {
              "columnId": "secondary_lag_seconds",
              "label": "Secondary lag"
            },
            {
              "columnId": "redo_queue_size_kb",
              "label": "Redo queue"
            },
            {
              "columnId": "redo_rate_kbps",
              "label": "Redo rate"
            },
            {
              "columnId": "log_send_queue_size_kb",
              "label": "Log send queue"
            },
            {
              "columnId": "log_send_rate_kbps",
              "label": "Log send rate"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tabAvailabilityGroupsListeners",
          "comparison": "isEqualTo",
          "value": "AvailabilityGroups"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_replicas"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let availability_group = \\r\\nsqlserver_database_replicas\\r\\n| where sample_time_utc == todatetime(\\\"{replicasSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where isnotempty(availability_group_listeners)\\r\\n| summarize availability_group_listeners = take_any(todynamic(availability_group_listeners)) by group_id, availability_group_name\\r\\n| mv-expand availability_group_listeners;\\r\\n// top level - availability group/listener\\r\\navailability_group\\r\\n| mv-expand listener_id = availability_group_listeners.listener_id to typeof(string), dns_name = availability_group_listeners.dns_name to typeof(string), port = availability_group_listeners.port to typeof(int), is_conformant = availability_group_listeners.is_conformant to typeof(bool)\\r\\n| extend id = listener_id, parent_id = \\\"\\\"\\r\\n| union (\\r\\n// leaf level - listener IP address\\r\\navailability_group\\r\\n| mv-expand listener_id = availability_group_listeners.listener_id to typeof(string)\\r\\n| extend listener_ip_addresses = extract_json(\\\"$.listener_ip_address\\\", tostring(availability_group_listeners), typeof(dynamic))\\r\\n| mv-expand listener_ip_addresses\\r\\n| mv-expand ip_address = listener_ip_addresses.ip_address to typeof(string), ip_subnet_mask = listener_ip_addresses.ip_subnet_mask to typeof(string), is_dhcp = listener_ip_addresses.is_dhcp to typeof(bool), network_subnet_ip = listener_ip_addresses.network_subnet_ip to typeof(string), network_subnet_prefix_length = listener_ip_addresses.network_subnet_prefix_length to typeof(string), network_subnet_ipv4_mask = listener_ip_addresses.network_subnet_ipv4_mask to typeof(string), state_desc = listener_ip_addresses.state_desc to typeof(string)\\r\\n| project-away availability_group_name\\r\\n| extend id = ip_address, parent_id = listener_id, state_desc = case(state_desc == \\\"ONLINE\\\", \\\"Online\\\", state_desc == \\\"OFFLINE\\\", \\\"Offline\\\", state_desc == \\\"ONLINE_PENDING\\\", \\\"Online pending\\\", state_desc == \\\"FAILED\\\", \\\"Failed\\\", \\\"\\\")\\r\\n)\\r\\n| project-away group_id, availability_group_listeners, listener_id, listener_ip_addresses\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "title": "Listeners",
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "is_conformant",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "Check",
                    "text": "Yes"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "Subtract",
                    "text": "No"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "id",
              "formatter": 5
            },
            {
              "columnMatch": "parent_id",
              "formatter": 5
            },
            {
              "columnMatch": "is_dhcp",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "Check",
                    "text": "Yes"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "Subtract",
                    "text": "No"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "state_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Online",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Offline",
                    "representation": "cancelled",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Online pending",
                    "representation": "pending",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Failed",
                    "representation": "failed",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            }
          ],
          "filter": true,
          "hierarchySettings": {
            "idColumn": "id",
            "parentColumn": "parent_id",
            "treeType": 0,
            "expanderColumn": "availability_group_name",
            "expandTopLevel": true
          },
          "labelSettings": [
            {
              "columnId": "availability_group_name",
              "label": "Availability group"
            },
            {
              "columnId": "dns_name",
              "label": "Listener"
            },
            {
              "columnId": "port",
              "label": "Port"
            },
            {
              "columnId": "is_conformant",
              "label": "Conformant"
            },
            {
              "columnId": "ip_address",
              "label": "Listener IP"
            },
            {
              "columnId": "ip_subnet_mask",
              "label": "Listener mask"
            },
            {
              "columnId": "is_dhcp",
              "label": "DHCP"
            },
            {
              "columnId": "network_subnet_ip",
              "label": "Subnet"
            },
            {
              "columnId": "network_subnet_prefix_length",
              "label": "Prefix"
            },
            {
              "columnId": "network_subnet_ipv4_mask",
              "label": "Subnet mask"
            },
            {
              "columnId": "state_desc",
              "label": "State"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tabAvailabilityGroupsListeners",
          "comparison": "isEqualTo",
          "value": "Listeners"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "ag_listeners"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Availability group details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{availability_group_details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table"
            },
            "name": "availability_group_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{availability_group_details_number_count}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "name": "availability_group_details_number_count"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{availability_group_details_boolean}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Subtract",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "name": "availability_group_details_boolean"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tabAvailabilityGroupsListeners",
          "comparison": "isEqualTo",
          "value": "AvailabilityGroups"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "33",
      "name": "availability_group_details_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Replica details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{replica_details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table"
            },
            "name": "replica_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{replica_details_number_count}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table"
            },
            "name": "replica_details_number_count"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{replica_details_datetime}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 6,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      }
                    },
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Displayed in local time of the database engine instance"
                    }
                  }
                ]
              }
            },
            "name": "replica_details_datetime"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tabAvailabilityGroupsListeners",
          "comparison": "isEqualTo",
          "value": "AvailabilityGroups"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "33",
      "name": "replica_details_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Database details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{database_details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table"
            },
            "name": "database_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{database_details_number_count}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table"
            },
            "name": "database_details_number_count"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{database_details_datetime}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Displayed in local time of the database engine instance"
                    }
                  }
                ]
              }
            },
            "name": "database_details_datetime"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{database_details_boolean}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Subtract",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "name": "database_details_boolean"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Replicas"
        },
        {
          "parameterName": "sqlserver_database_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "replicasSampleTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tabAvailabilityGroupsListeners",
          "comparison": "isEqualTo",
          "value": "AvailabilityGroups"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "33",
      "name": "database_details_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "448a29bd-9c86-4cc9-b114-e89eb4532388",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsStartTime",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"union\\r\\n(\\r\\n// The most recent interval that is earlier than the end of time range.\\r\\n// This may be earlier than the start of time range by at most 2h.\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_start_time between (({timeRange:start} - 2h) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| summarize interval_start_time = max(interval_start_time)\\r\\n),\\r\\n(\\r\\n// earliest interval start within time range\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_end_time >= {timeRange:start} and interval_start_time <= {timeRange:end}\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| summarize interval_start_time = min(interval_start_time)\\r\\n)\\r\\n// return the earliest of these times as start of QDS range\\r\\n// if there isn't a complete QDS interval within time range, this will show the most recent available interval outside of the range\\r\\n| summarize qds_start_time = min(interval_start_time)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9
                },
                {
                  "id": "ea6d3fd1-3d78-43af-99a7-f138bdece7b6",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsEndTime",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"union\\r\\n(\\r\\n// The most recent interval that is earlier than the end of time range.\\r\\n// This may be earlier than the start of time range by at most 2h.\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_end_time between (({timeRange:start} - 2h) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| summarize interval_end_time = max(interval_end_time)\\r\\n),\\r\\n(\\r\\n// latest interval end within time range\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_end_time >= {timeRange:start} and interval_start_time <= {timeRange:end}\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| summarize interval_end_time = max(interval_end_time)\\r\\n)\\r\\n// return the latest of these times as end of QDS range\\r\\n// if there isn't a complete QDS interval within time range, this will show the latest available interval\\r\\n| summarize qds_end_time = datetime_add(\\\"second\\\", 1, max(interval_end_time)) // make-series treats the end of interval as not inclusive, fudge by 1 second\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9
                }
              ],
              "style": "above",
              "queryType": 9
            },
            "name": "top_query_qds_time_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "<span style=\"font-size:1.2em\">A top query is defined as a query consuming the most resources in a time interval. Resource consumption is reflected by metrics such as _execution count_, _CPU time_, _duration_, _logical reads_, etc. For each top query, choosing an aggregation type lets you see its _total_, _average_, _minimum_, or _maximum_ resource consumption within the selected time interval.</span>\r\n\r\n<span style=\"font-size:1.2em\">Query Store aggregates and stores data using fixed time intervals. Query statistics are collected and displayed for complete intervals only. Because of this, top query data may be delayed. For example, if Query Store interval length is one hour (which is the default configuration), then it will take at least one hour for the most recent query data to become available.</span>\r\n\r\nTop query data is obtained from [Query Store](https://go.microsoft.com/fwlink/?linkid=2213253), using [sys.query_store_query](https://go.microsoft.com/fwlink/?linkid=2213428), [sys.query_store_query_text](https://go.microsoft.com/fwlink/?linkid=2213154), [sys.query_store_plan](https://go.microsoft.com/fwlink/?linkid=2213251), [sys.query_store_runtime_stats](https://go.microsoft.com/fwlink/?linkid=2213252), [sys.query_store_wait_stats](https://go.microsoft.com/fwlink/?linkid=2213155), and other views."
            },
            "conditionalVisibilities": [
              {
                "parameterName": "showDescriptions",
                "comparison": "isEqualTo",
                "value": "true"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_help"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "7d626640-0324-4fe2-ace6-65b0fa6db0ef",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsAggBy",
                  "label": "Aggregate by",
                  "type": 10,
                  "description": "Select the level of aggregation. Use \"Query/plan hash\" to aggregate statistics for similar queries and query plans across all databases. Use \"Query/plan ID\" to aggregate statistics by individual queries and plans within each database.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"query_hash\",\"label\":\"Query/plan hash\"},\r\n    {\"value\":\"query_id\",\"label\":\"Query/plan ID\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "query_hash"
                },
                {
                  "id": "e7bd7068-660b-41bd-894d-b6008ac6e4ca",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsAggregation",
                  "label": "Aggregation",
                  "type": 2,
                  "description": "Select the type of aggregation to use for query runtime statistics",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"total\",\"label\":\"Total\"},\r\n    {\"value\":\"avg\",\"label\":\"Average\"},\r\n    {\"value\":\"max\",\"label\":\"Maximum\"},\r\n    {\"value\":\"min\",\"label\":\"Minimum\"},\r\n    {\"value\":\"stdev\",\"label\":\"Standard deviation\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "total"
                },
                {
                  "id": "d78e016e-7f9c-4ddb-be50-9cc3317387b6",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsMetric",
                  "label": "Metric",
                  "type": 2,
                  "description": "Find top queries sorting by selected metric in descending order",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"count_executions\",\"label\":\"Execution count\"},\r\n    {\"value\":\"duration\",\"label\":\"Duration\"},\r\n    {\"value\":\"cpu_time\",\"label\":\"CPU time\"},\r\n    {\"value\":\"logical_io_reads\",\"label\":\"Logical reads\"},\r\n    {\"value\":\"logical_io_writes\",\"label\":\"Logical writes\"},\r\n    {\"value\":\"physical_io_reads\",\"label\":\"Physical reads (pages)\"},\r\n    {\"value\":\"num_physical_io_reads\",\"label\":\"Physical reads (IOs)\"},\r\n    {\"value\":\"dop\",\"label\":\"DOP\"},\r\n    {\"value\":\"query_max_used_memory\",\"label\":\"Memory grant\"},\r\n    {\"value\":\"rowcount\",\"label\":\"Row count\"},\r\n    {\"value\":\"log_bytes_used\",\"label\":\"Transaction log space used\"},\r\n    {\"value\":\"tempdb_space_used\",\"label\":\"Tempdb space used\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "cpu_time"
                },
                {
                  "id": "45b94f24-7a79-4941-9036-2578462ffc96",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsTopQueryCount",
                  "label": "Top query limit",
                  "type": 2,
                  "description": "The number of top queries to display",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":5,\"label\":\"5\"},\r\n    {\"value\":10,\"label\":\"10\"},\r\n    {\"value\":25,\"label\":\"25\"},\r\n    {\"value\":50,\"label\":\"50\"},\r\n    {\"value\":100,\"label\":\"100\"},\r\n    {\"value\":200,\"label\":\"200\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "10"
                },
                {
                  "id": "a3523dda-4080-4f76-9e12-f6b835a09f56",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsExecutionType",
                  "label": "Execution types",
                  "type": 2,
                  "description": "Select one or more query execution types",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "0,1,2,3,4",
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"0\",\"label\":\"Regular\"},\r\n    {\"value\":\"3\",\"label\":\"Aborted\"},\r\n    {\"value\":\"4\",\"label\":\"Exception\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "value": [
                    "value::all"
                  ]
                },
                {
                  "id": "e5d2125d-9a08-4eac-b8a9-d069885a44c2",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsDatabase",
                  "label": "Databases",
                  "type": 2,
                  "description": "Select one or more databases",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "",
                  "delimiter": ",",
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| distinct database_id, database_name\\r\\n| top 100 by tolower(database_name) asc;\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 9
                },
                {
                  "id": "f3ca5023-b39e-4246-8f67-9708b721da46",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsQueryId",
                  "label": "Query ID",
                  "type": 1,
                  "description": "Enter a Query ID to show that query only. This is an optional parameter.",
                  "typeSettings": {
                    "paramValidationRules": [
                      {
                        "regExp": "\\\"",
                        "match": false,
                        "message": "Query ID filter value may not contain double quotes"
                      }
                    ]
                  },
                  "value": ""
                },
                {
                  "id": "07f39986-d4e0-4205-b586-dc4924600e4d",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsQueryHash",
                  "label": "Query hash",
                  "type": 1,
                  "description": "Enter a query hash to show top queries with that hash. This is an optional parameter.",
                  "typeSettings": {
                    "paramValidationRules": [
                      {
                        "regExp": "\\\"",
                        "match": false,
                        "message": "Query hash filter value may not contain double quotes"
                      }
                    ]
                  },
                  "value": ""
                },
                {
                  "id": "7917da4e-962c-4ce8-8296-e6f6f22e3992",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsQueryText",
                  "label": "Query text",
                  "type": 1,
                  "description": "Enter a string to find queries with SQL text containing this string. This is an optional parameter.",
                  "typeSettings": {
                    "multiLineText": true,
                    "editorLanguage": "sql",
                    "multiLineHeight": 3
                  },
                  "value": ""
                },
                {
                  "id": "5fdd560a-69f7-4aca-9dec-7d7b239f4bd3",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsMetricLabelMidsentenceCase",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "count_executions",
                        "resultValType": "static",
                        "resultVal": "execution count"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "duration",
                        "resultValType": "static",
                        "resultVal": "duration"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "cpu_time",
                        "resultValType": "static",
                        "resultVal": "CPU time"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "logical_io_reads",
                        "resultValType": "static",
                        "resultVal": "logical reads"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "logical_io_writes",
                        "resultValType": "static",
                        "resultVal": "logical writes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "physical_io_reads",
                        "resultValType": "static",
                        "resultVal": "physical reads (pages)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "num_physical_io_reads",
                        "resultValType": "static",
                        "resultVal": "physical reads (IOs)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "dop",
                        "resultValType": "static",
                        "resultVal": "DOP"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "query_max_used_memory",
                        "resultValType": "static",
                        "resultVal": "memory grant"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "rowcount",
                        "resultValType": "static",
                        "resultVal": "row count"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "log_bytes_used",
                        "resultValType": "static",
                        "resultVal": "transaction log space used"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "tempdb_space_used",
                        "resultValType": "static",
                        "resultVal": "tempdb space used"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "page_server_io_reads",
                        "resultValType": "static",
                        "resultVal": "page server reads (pages)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "param"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "13721e52-abef-4034-95e1-f7b0a13d12b3",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsMetricUnit",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "duration",
                        "resultValType": "static",
                        "resultVal": "time"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "cpu_time",
                        "resultValType": "static",
                        "resultVal": "time"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "query_max_used_memory",
                        "resultValType": "static",
                        "resultVal": "bytes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "log_bytes_used",
                        "resultValType": "static",
                        "resultVal": "bytes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "tempdb_space_used",
                        "resultValType": "static",
                        "resultVal": "bytes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "unitless"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "top_query_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "f0630d45-57bb-4eff-8761-fb757cd37f50",
                  "version": "KqlParameterItem/1.0",
                  "name": "showQueriesAs",
                  "label": "Show queries as",
                  "type": 10,
                  "description": "Show queries as tiles or as a grid",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"tiles\",\"label\":\"Tiles\"},\r\n    {\"value\":\"grid\",\"label\":\"Grid\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "tiles"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "show_query_as_parameters"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Query Store intervals",
              "expandable": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| extend interval_duration_seconds = datetime_diff(\\\"second\\\", interval_end_time, interval_start_time)\\r\\n| summarize interval_start_time = min(interval_start_time),\\r\\n            interval_end_time = max(interval_end_time),\\r\\n            avg_interval_duration = avg(interval_duration_seconds),\\r\\n            interval_count = dcount(interval_end_time)\\r\\n            by database_id, database_name\\r\\n| project database_name, interval_start_time, interval_end_time, avg_interval_duration = iif(isnan(avg_interval_duration), real(null), avg_interval_duration), interval_count\\r\\n| sort by tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 4,
                    "noDataMessage": "There is no data for specified parameters.",
                    "queryType": 9,
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "interval_start_time",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "The start of the first Query Store interval"
                          }
                        },
                        {
                          "columnMatch": "interval_end_time",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "The end of the last Query Store interval"
                          }
                        },
                        {
                          "columnMatch": "avg_interval_duration",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "20ch"
                          },
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "Average duration of Query Store intervals. Reflects changes in interval length configuration, if any."
                          }
                        },
                        {
                          "columnMatch": "interval_count",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "The number of intervals between start and end time"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "database_name",
                          "label": "Database"
                        },
                        {
                          "columnId": "interval_start_time",
                          "label": "Start time"
                        },
                        {
                          "columnId": "interval_end_time",
                          "label": "End time"
                        },
                        {
                          "columnId": "avg_interval_duration",
                          "label": "Interval duration"
                        },
                        {
                          "columnId": "interval_count",
                          "label": "Intervals"
                        }
                      ]
                    },
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "boundary",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "colors",
                          "thresholdsGrid": [
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": null,
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      "leftContent": {
                        "columnMatch": "value",
                        "formatter": 6,
                        "dateFormat": {
                          "showUtcTime": true,
                          "formatName": "shortDateTimePattern"
                        },
                        "tooltipFormat": {
                          "tooltip": "Values are shown in the local time of the database engine instance"
                        }
                      },
                      "showBorder": true,
                      "size": "auto"
                    }
                  },
                  "name": "qds_interval_range"
                }
              ]
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_intervals_group"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize any_database_id = take_any(database_id),\\r\\n            dcount_query_id = dcount(query_id),\\r\\n            any_query_id = take_any(query_id),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", avg(count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_hash,\\r\\n               query_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", query_id, long(null)),\\r\\n               database_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", database_id, int(null)),\\r\\n               database_name = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", database_name, \\\"\\\")\\r\\n| extend database_id = iif(isnull(database_id), any_database_id, database_id),\\r\\n         query_id = iif(isnull(query_id), any_query_id, query_id),\\r\\n         multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries for this query hash. Displayed query text and query details are for one of these \\\", tostring(dcount_query_id), \\\" queries. To see query text and details for a specific query, use aggregation by Query ID.\\\"), \\\"\\\"),\\r\\n         ranked_metric = case(\\r\\n                             \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n                             real(null)\\r\\n                             )\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank\\r\\n| sort by ranked_metric desc\\r\\n| extend rank = row_rank(ranked_metric)\\r\\n| project query_hash,\\r\\n          database_id,\\r\\n          database_name,\\r\\n          query_id,\\r\\n          rank,\\r\\n          ranked_metric,\\r\\n          count_executions,\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning,\\r\\n          tile_label = case(\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Query ID: \\\", tostring(query_id)),\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_hash\\\", strcat(\\\"Query hash: \\\", tostring(query_hash)),\\r\\n                           \\\"\\\"\\r\\n                           ),\\r\\n          ranks\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where query_id == iif(isnotempty(@\\\"{qdsQueryId}\\\"), tolong(@\\\"{qdsQueryId}\\\"), query_id)\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| sort by rank asc, count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Top queries ranked by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "query_id",
                  "parameterName": "query_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                },
                {
                  "fieldName": "database_id",
                  "parameterName": "database_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1
                },
                "subtitleContent": {
                  "columnMatch": "database_name"
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "tile_label",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "unitless"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_tiles_unitless"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize any_database_id = take_any(database_id),\\r\\n            dcount_query_id = dcount(query_id),\\r\\n            any_query_id = take_any(query_id),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", avg(count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_hash,\\r\\n               query_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", query_id, long(null)),\\r\\n               database_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", database_id, int(null)),\\r\\n               database_name = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", database_name, \\\"\\\")\\r\\n| extend database_id = iif(isnull(database_id), any_database_id, database_id),\\r\\n         query_id = iif(isnull(query_id), any_query_id, query_id),\\r\\n         multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries for this query hash. Displayed query text and query details are for one of these \\\", tostring(dcount_query_id), \\\" queries. To see query text and details for a specific query, use aggregation by Query ID.\\\"), \\\"\\\"),\\r\\n         ranked_metric = case(\\r\\n                             \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n                             real(null)\\r\\n                             )\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank\\r\\n| sort by ranked_metric desc\\r\\n| extend rank = row_rank(ranked_metric)\\r\\n| project query_hash,\\r\\n          database_id,\\r\\n          database_name,\\r\\n          query_id,\\r\\n          rank,\\r\\n          ranked_metric,\\r\\n          count_executions,\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning,\\r\\n          tile_label = case(\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Query ID: \\\", tostring(query_id)),\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_hash\\\", strcat(\\\"Query hash: \\\", tostring(query_hash)),\\r\\n                           \\\"\\\"\\r\\n                           ),\\r\\n          ranks\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where query_id == iif(isnotempty(@\\\"{qdsQueryId}\\\"), tolong(@\\\"{qdsQueryId}\\\"), query_id)\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| sort by rank asc, count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Top queries ranked by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "query_id",
                  "parameterName": "query_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                },
                {
                  "fieldName": "database_id",
                  "parameterName": "database_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1
                },
                "subtitleContent": {
                  "columnMatch": "database_name"
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 22,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "tile_label",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "time"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_tiles_time"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize any_database_id = take_any(database_id),\\r\\n            dcount_query_id = dcount(query_id),\\r\\n            any_query_id = take_any(query_id),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", avg(count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_hash,\\r\\n               query_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", query_id, long(null)),\\r\\n               database_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", database_id, int(null)),\\r\\n               database_name = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", database_name, \\\"\\\")\\r\\n| extend database_id = iif(isnull(database_id), any_database_id, database_id),\\r\\n         query_id = iif(isnull(query_id), any_query_id, query_id),\\r\\n         multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries for this query hash. Displayed query text and query details are for one of these \\\", tostring(dcount_query_id), \\\" queries. To see query text and details for a specific query, use aggregation by Query ID.\\\"), \\\"\\\"),\\r\\n         ranked_metric = case(\\r\\n                             \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory * 8 * 1024),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used * 8 * 1024),\\r\\n                             real(null)\\r\\n                             )\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank\\r\\n| sort by ranked_metric desc\\r\\n| extend rank = row_rank(ranked_metric)\\r\\n| project query_hash,\\r\\n          database_id,\\r\\n          database_name,\\r\\n          query_id,\\r\\n          rank,\\r\\n          ranked_metric,\\r\\n          count_executions,\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning,\\r\\n          tile_label = case(\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Query ID: \\\", tostring(query_id)),\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_hash\\\", strcat(\\\"Query hash: \\\", tostring(query_hash)),\\r\\n                           \\\"\\\"\\r\\n                           ),\\r\\n          ranks\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where query_id == iif(isnotempty(@\\\"{qdsQueryId}\\\"), tolong(@\\\"{qdsQueryId}\\\"), query_id)\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| sort by rank asc, count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Top queries ranked by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "query_id",
                  "parameterName": "query_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                },
                {
                  "fieldName": "database_id",
                  "parameterName": "database_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1
                },
                "subtitleContent": {
                  "columnMatch": "database_name"
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 2,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  },
                  "tooltipFormat": {
                    "tooltip": "Query runtime statistic"
                  }
                },
                "secondaryContent": {
                  "columnMatch": "tile_label",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "bytes"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_tiles_bytes"
          },
          {
            "type": 1,
            "content": {
              "json": "<span style=\"font-size:1.2em\">Each tile represents all queries with the same query hash. The large number on the tile is **query rank** by `{qdsAggregation} {qdsMetricLabelMidsentenceCase}`. Two queries have the same rank if their resource usage during the interval is the same.</span>\r\n\r\n<span style=\"font-size:1.2em\">The tile also shows `{qdsAggregation} {qdsMetricLabelMidsentenceCase}` value, aggregated over selected time range. The length of the bar below this value is proportional to resource usage by this query, compared to other top queries displayed.</span>\r\n\r\n<span style=\"font-size:1.2em\">The `Query hash` value is displayed at the bottom of each tile. You can copy it and paste it in the `Query hash` parameter box above to focus on a specific top query.</span>"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "showDescriptions",
                "comparison": "isEqualTo",
                "value": "true"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_tiles_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_database_id = dcount(database_id),\\r\\n            any_database_id = take_any(database_id),\\r\\n            any_database_name = take_any(database_name),\\r\\n            dcount_query_id = dcount(query_id),\\r\\n            any_query_id = take_any(query_id),\\r\\n            dcount_sql_module_name = dcount(sql_module_name),\\r\\n            any_sql_module_name = take_any(sql_module_name),\\r\\n            dcount_context_settings_id = dcount(context_settings_id),\\r\\n            any_context_settings_id = take_any(context_settings_id),\\r\\n            dcount_plan_id = dcount(plan_id),\\r\\n            plan_id = take_any(plan_id),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            count_successful_executions = case(\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avgif(count_executions, execution_type_desc == \\\"Regular\\\"), 2),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", minif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sumif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              real(null)\\r\\n                                              ),\\r\\n            count_aborted_executions = case(\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avgif(count_executions, execution_type_desc == \\\"Aborted\\\"), 2),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", minif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sumif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           real(null)\\r\\n                                           ),\\r\\n            count_exception_executions = case(\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avgif(count_executions, execution_type_desc == \\\"Exception\\\"), 2),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", minif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sumif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             real(null)\\r\\n                                             ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_hash,\\r\\n               query_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", query_id, long(null)),\\r\\n               database_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", database_id, int(null))\\r\\n| extend database_id = iif(isnull(database_id), any_database_id, database_id),\\r\\n         query_id = iif(isnull(query_id), any_query_id, query_id),\\r\\n         multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries for this query hash. Displayed query text and query details are for one of these \\\", tostring(dcount_query_id), \\\" queries. To see query text and details for a specific query, use aggregation by Query ID.\\\"), \\\"\\\")\\r\\n| project database_id,\\r\\n          q_id = query_id, //workaround for a bug where a column with a name that is a superstring of a hidden column name is incorrectly hidden\\r\\n          query_hash,\\r\\n          database_name_agg = iif(dcount_database_id == 1, any_database_name, strcat(any_database_name, \\\" (+\\\", tostring(dcount_database_id - 1), \\\")\\\")),\\r\\n          query_id_agg = iif(dcount_query_id == 1, tostring(query_id), strcat(query_id, \\\" (+\\\", tostring(dcount_query_id - 1), \\\")\\\")),\\r\\n          plan_id_agg = iif(dcount_plan_id == 1, tostring(plan_id), strcat(plan_id, \\\" (+\\\", tostring(dcount_plan_id - 1), \\\")\\\")),\\r\\n          count_executions,\\r\\n          count_successful_executions,\\r\\n          count_aborted_executions,\\r\\n          count_exception_executions,\\r\\n          duration_us,\\r\\n          cpu_time_us,\\r\\n          logical_io_reads,\\r\\n          logical_io_writes,\\r\\n          physical_io_reads,\\r\\n          num_physical_io_reads,\\r\\n          dop,\\r\\n          query_max_used_memory_kb = query_max_used_memory * 8,\\r\\n          rowcount,\\r\\n          log_bytes_used,\\r\\n          tempdb_space_used_kb = tempdb_space_used * 8,\\r\\n          sql_module_name_agg = iif(dcount_sql_module_name == 1, any_sql_module_name, strcat(any_sql_module_name, \\\" (+\\\", tostring(dcount_sql_module_name - 1), \\\")\\\")),\\r\\n          context_settings_id_agg = iif(dcount_context_settings_id == 1, tostring(any_context_settings_id), strcat(any_context_settings_id, \\\" (+\\\", tostring(dcount_context_settings_id - 1), \\\")\\\")),\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory_kb desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory_kb)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used_kb desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used_kb)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory_kb),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used_kb)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank\\r\\n| sort by case(\\r\\n              \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n              \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n              \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n              \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory_kb),\\r\\n              \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n              \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n              \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used_kb),\\r\\n              real(null)\\r\\n              ) desc,\\r\\n          count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where q_id == iif(isnotempty(@\\\"{qdsQueryId}\\\"), tolong(@\\\"{qdsQueryId}\\\"), q_id)\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnalytics": true,
              "title": "Top queries by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "q_id",
                  "parameterName": "query_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                },
                {
                  "fieldName": "database_id",
                  "parameterName": "database_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                }
              ],
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "database_id",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "q_id",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  },
                  {
                    "columnMatch": "count_successful_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_aborted_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_exception_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "duration_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "cpu_time_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_writes",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "24ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "num_physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "24ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "dop",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "14ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "query_max_used_memory_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "rowcount",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "log_bytes_used",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "tempdb_space_used_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "query_sql_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "query_sql_text_json",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "multi_query_text_warning",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ranks",
                    "formatter": 5
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "query_hash",
                    "label": "Query hash"
                  },
                  {
                    "columnId": "database_name_agg",
                    "label": "Database"
                  },
                  {
                    "columnId": "query_id_agg",
                    "label": "Query ID"
                  },
                  {
                    "columnId": "plan_id_agg",
                    "label": "Plan ID"
                  },
                  {
                    "columnId": "count_executions",
                    "label": "Executions"
                  },
                  {
                    "columnId": "duration_us",
                    "label": "Duration"
                  },
                  {
                    "columnId": "cpu_time_us",
                    "label": "CPU time"
                  },
                  {
                    "columnId": "logical_io_reads",
                    "label": "Logical reads"
                  },
                  {
                    "columnId": "logical_io_writes",
                    "label": "Logical writes"
                  },
                  {
                    "columnId": "physical_io_reads",
                    "label": "Physical reads (pages)"
                  },
                  {
                    "columnId": "num_physical_io_reads",
                    "label": "Physical reads (IOs)"
                  },
                  {
                    "columnId": "dop",
                    "label": "DOP"
                  },
                  {
                    "columnId": "query_max_used_memory_kb",
                    "label": "Memory grant"
                  },
                  {
                    "columnId": "rowcount",
                    "label": "Rows"
                  },
                  {
                    "columnId": "log_bytes_used",
                    "label": "Log space"
                  },
                  {
                    "columnId": "tempdb_space_used_kb",
                    "label": "Tempdb space"
                  },
                  {
                    "columnId": "sql_module_name_agg",
                    "label": "SQL module"
                  },
                  {
                    "columnId": "context_settings_id_agg",
                    "label": "Context settings ID"
                  }
                ]
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "grid"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_grid"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "ef3541b2-fdd5-4705-8689-b9ce167c1767",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsAnyWaits",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_wait_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| count\\r\\n| project Count = tostring(Count)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                }
              ],
              "style": "pills",
              "queryType": 9
            },
            "conditionalVisibility": {
              "parameterName": "sqlserver_query_wait_stats",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "qds_waits_existence_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "{multi_query_text_warning}",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "multi_query_text_warning",
                "comparison": "isNotEqualTo",
                "value": ""
              },
              {
                "parameterName": "multi_query_text_warning",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              }
            ],
            "name": "multi_query_text_warning"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(ranks:dynamic)[dynamic({ranks})]\\r\\n| mv-expand bagexpansion=array ranks\\r\\n| mv-expand metric = ranks.Metric to typeof(string), rank = ranks.Rank to typeof(int), value = ranks.Value to typeof(real)\\r\\n| where value > 0 // Do not include high ranks if usage is zero\\r\\n| where not (metric==\\\"DOP\\\" and value==1 or metric==\\\"Executions\\\" and value==1 or metric==\\\"Rows\\\" and value==1) // Do not consider trivial usage\\r\\n| project r=rank, metric, rank\\r\\n| sort by rank asc, metric asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "title": "Query ranks",
              "noDataMessage": "Selected query is not ranked high by any metric",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "r",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "<=",
                          "thresholdValue": "1",
                          "representation": "Sev0",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "<=",
                          "thresholdValue": "3",
                          "representation": "Sev1",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "<=",
                          "thresholdValue": "10",
                          "representation": "Sev2",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "<=",
                          "thresholdValue": "20",
                          "representation": "Sev3",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Sev4",
                          "text": "[\"metric\"]"
                        }
                      ],
                      "customColumnWidthSetting": "27ch"
                    }
                  },
                  {
                    "columnMatch": "metric",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "rank",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Lower numbers mean higher ranks, i.e. higher resource consumption for this metric"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "r",
                    "label": "Metric"
                  },
                  {
                    "columnId": "rank",
                    "label": "Rank"
                  }
                ]
              },
              "sortBy": [],
              "tileSettings": {
                "titleContent": {
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "hotCold"
                  },
                  "tooltipFormat": {
                    "tooltip": "Rank 1 by \"CPU time\" means that the query is the top consumer of CPU, compared to other queries in the same time interval. The metrics ranked in the 1-10 range, if any for this query, are shown."
                  }
                },
                "rightContent": {
                  "columnMatch": "metric",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "customWidth": "25",
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "ranks",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "top_query_ranks"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_wait_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| summarize query_wait_time_ms = case(\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(total_query_wait_time_ms)),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_wait_time_ms),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_wait_time_ms)),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_wait_time_ms)),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_wait_time_ms), // use maximum stdev for the interval\\r\\n                                     real(null)\\r\\n                                     )\\r\\n            by wait_category_desc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "title": "Query wait categories",
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "barchart",
              "chartSettings": {
                "yAxis": [
                  "query_wait_time_ms"
                ],
                "showMetrics": false,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Unknown",
                    "color": "gray"
                  },
                  {
                    "seriesName": "CPU",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "Worker Thread",
                    "color": "brown"
                  },
                  {
                    "seriesName": "Lock",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "Latch",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "Buffer Latch",
                    "color": "purple"
                  },
                  {
                    "seriesName": "Buffer IO",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "Tran Log IO",
                    "color": "green"
                  },
                  {
                    "seriesName": "Network IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Parallelism",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Memory",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "Other Disk IO",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "Replication",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Log Rate Governor",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "25",
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "sqlserver_query_wait_stats",
                "comparison": "isEqualTo",
                "value": "1"
              },
              {
                "parameterName": "qdsAnyWaits",
                "comparison": "isNotEqualTo",
                "value": "0"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_wait_categories"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{query_sql_text_json}\",\"transformers\":null}",
              "size": 1,
              "title": "Query SQL text",
              "noDataMessage": "Unknown",
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "query_sql_text"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Query details",
              "expandable": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_hash\\\",\\r\\n1, \\\"sql_module_name\\\",\\r\\n1, \\\"database_name\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_hash, sql_module_name, database_name) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_hash, sql_module_name, database_name\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_hash\\\", query_hash,\\r\\n                                    query_property_name == \\\"sql_module_name\\\", sql_module_name,\\r\\n                                    query_property_name == \\\"database_name\\\", database_name,\\r\\n                                    \\\"\\\"\\r\\n                                    )\\r\\n| project-away query_hash, sql_module_name, database_name\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_string"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_id\\\",\\r\\n1, \\\"context_settings_id\\\",\\r\\n1, \\\"sql_module_object_id\\\",\\r\\n1, \\\"query_count_compiles\\\",\\r\\n1, \\\"database_id\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_id, context_settings_id, sql_module_object_id, query_count_compiles, database_id) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_id, context_settings_id, sql_module_object_id, query_count_compiles, database_id\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_id\\\", query_id,\\r\\n                                    query_property_name == \\\"context_settings_id\\\", context_settings_id,\\r\\n                                    query_property_name == \\\"sql_module_object_id\\\", sql_module_object_id,\\r\\n                                    query_property_name == \\\"query_count_compiles\\\", query_count_compiles,\\r\\n                                    query_property_name == \\\"database_id\\\", database_id,\\r\\n                                    long(null)\\r\\n                                    )\\r\\n| project-away query_id, context_settings_id, sql_module_object_id, query_count_compiles, database_id\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_number_id"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_last_compile_duration_us\\\",\\r\\n1, \\\"query_last_optimize_duration_us\\\",\\r\\n1, \\\"query_last_optimize_cpu_time_us\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_last_compile_duration_us, query_last_optimize_duration_us, query_last_optimize_cpu_time_us) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_last_compile_duration_us, query_last_optimize_duration_us, query_last_optimize_cpu_time_us\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_last_compile_duration_us\\\", query_last_compile_duration_us,\\r\\n                                    query_property_name == \\\"query_last_optimize_duration_us\\\", query_last_optimize_duration_us,\\r\\n                                    query_property_name == \\\"query_last_optimize_cpu_time_us\\\", query_last_optimize_cpu_time_us,\\r\\n                                    long(null)\\r\\n                                    )\\r\\n| project-away query_last_compile_duration_us, query_last_optimize_duration_us, query_last_optimize_cpu_time_us\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "query_property_value",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 22,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_duration"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_last_compile_memory_kb\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_last_compile_memory_kb) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_last_compile_memory_kb\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_last_compile_memory_kb\\\", query_last_compile_memory_kb,\\r\\n                                    long(null)\\r\\n                                    )\\r\\n| project-away query_last_compile_memory_kb\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "query_property_value",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 3,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_kb"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_initial_compile_start_time\\\",\\r\\n1, \\\"query_last_compile_start_time\\\",\\r\\n1, \\\"query_last_execution_time\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_initial_compile_start_time, query_last_compile_start_time, query_last_execution_time) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_initial_compile_start_time, query_last_compile_start_time, query_last_execution_time\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_initial_compile_start_time\\\", query_initial_compile_start_time,\\r\\n                                    query_property_name == \\\"query_last_compile_start_time\\\", query_last_compile_start_time,\\r\\n                                    query_property_name == \\\"query_last_execution_time\\\", query_last_execution_time,\\r\\n                                    datetime(null)\\r\\n                                    )\\r\\n| project-away query_initial_compile_start_time, query_last_compile_start_time, query_last_execution_time\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "query_property_value",
                          "formatter": 6,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          },
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_datetime"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "query_id",
                "comparison": "isNotEqualTo",
                "value": "0"
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "0"
              }
            ],
            "name": "query_details_group"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "5e875829-c0a1-4d00-b853-d90b119a5883",
                  "version": "KqlParameterItem/1.0",
                  "name": "showPlansAs",
                  "label": "Show query plans as",
                  "type": 10,
                  "description": "Select \"Chart\" to show query plans as bars on a time chart. Select \"Grid\" to show a summary of query plan statistics in a grid.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"chart\",\"label\":\"Chart\"},\r\n    {\"value\":\"grid\",\"label\":\"Grid\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "chart"
                },
                {
                  "id": "e13aabd4-e4d7-46a7-a1d7-20292f9a521b",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridPlan",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "{\"plan_id\":0,\"interval_end_time\":\"1900-01-01\"}"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartPlan",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "{\"x\":\"1900-01-01\",\"series\":\"\"}",
                  "id": "8dafcf7a-df0e-4d9b-83ec-55579bad8df5"
                },
                {
                  "id": "b66d1dc9-af20-41b2-8a68-ad2aab7d2ee6",
                  "version": "KqlParameterItem/1.0",
                  "name": "planTabName",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "value": "details"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "query_plan_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| summarize dcount_database_id = dcount(database_id),\\r\\n            any_database_name = take_any(database_name),\\r\\n            dcount_plan_id = dcount(plan_id),\\r\\n            any_plan_id = take_any(plan_id),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            interval_end_time = max(interval_end_time)\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", plan_id, long(null)),\\r\\n               execution_type_desc,\\r\\n               is_forced_plan,\\r\\n               plan_forcing_type_desc\\r\\n| extend plan_id = iif(isnull(plan_id), any_plan_id, plan_id)\\r\\n| project query_plan_hash,\\r\\n          plan_id,\\r\\n          p_id_agg = iif(dcount_plan_id == 1, tostring(any_plan_id), strcat(any_plan_id, \\\" (+\\\", tostring(dcount_plan_id - 1), \\\")\\\")),\\r\\n          database_name_agg = iif(dcount_database_id == 1, any_database_name, strcat(any_database_name, \\\" (+\\\", tostring(dcount_database_id - 1), \\\")\\\")),\\r\\n          interval_end_time,\\r\\n          execution_type_desc,\\r\\n          count_executions,\\r\\n          plan_forcing = case(plan_forcing_type_desc == \\\"AUTO\\\", \\\"Auto\\\", plan_forcing_type_desc == \\\"MANUAL\\\" or is_forced_plan, \\\"Manual\\\", \\\"None\\\"),\\r\\n          duration_us,\\r\\n          cpu_time_us,\\r\\n          logical_io_reads,\\r\\n          logical_io_writes,\\r\\n          physical_io_reads,\\r\\n          num_physical_io_reads,\\r\\n          dop,\\r\\n          query_max_used_memory_kb = query_max_used_memory * 8,\\r\\n          rowcount,\\r\\n          log_bytes_used,\\r\\n          tempdb_space_used_kb = tempdb_space_used * 8\\r\\n| sort by case(\\r\\n              \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n              \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n              \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n              \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory_kb),\\r\\n              \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n              \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n              \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used_kb),\\r\\n              real(null)\\r\\n              ) desc,\\r\\n          count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take 100 // assumption: looking at more than 100 plans is not interesting\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} metrics by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportFieldName": "",
              "exportParameterName": "selectedGridPlan",
              "exportDefaultValue": "{\"plan_id\":0,\"interval_end_time\":\"\"}",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "plan_id",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "interval_end_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "execution_type_desc",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Aborted",
                          "representation": "orange",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Exception",
                          "representation": "red",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ],
                      "customColumnWidthSetting": "18ch"
                    }
                  },
                  {
                    "columnMatch": "count_executions",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  },
                  {
                    "columnMatch": "plan_forcing",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Auto",
                          "representation": "lightBlue",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Manual",
                          "representation": "magenta",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "duration_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "15ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "cpu_time_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_writes",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "24ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "num_physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "22ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "dop",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "query_max_used_memory_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "rowcount",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "log_bytes_used",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "tempdb_space_used_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "query_plan_hash",
                    "label": "Plan hash"
                  },
                  {
                    "columnId": "p_id_agg",
                    "label": "Plan ID"
                  },
                  {
                    "columnId": "database_name_agg",
                    "label": "Database"
                  },
                  {
                    "columnId": "execution_type_desc",
                    "label": "Execution type"
                  },
                  {
                    "columnId": "count_executions",
                    "label": "Executions"
                  },
                  {
                    "columnId": "plan_forcing",
                    "label": "Forcing"
                  },
                  {
                    "columnId": "duration_us",
                    "label": "Duration"
                  },
                  {
                    "columnId": "cpu_time_us",
                    "label": "CPU time"
                  },
                  {
                    "columnId": "logical_io_reads",
                    "label": "Logical reads"
                  },
                  {
                    "columnId": "logical_io_writes",
                    "label": "Logical writes"
                  },
                  {
                    "columnId": "physical_io_reads",
                    "label": "Physical reads (pages)"
                  },
                  {
                    "columnId": "num_physical_io_reads",
                    "label": "Physical reads (IOs)"
                  },
                  {
                    "columnId": "dop",
                    "label": "DOP"
                  },
                  {
                    "columnId": "query_max_used_memory_kb",
                    "label": "Memory grant"
                  },
                  {
                    "columnId": "rowcount",
                    "label": "Rows"
                  },
                  {
                    "columnId": "log_bytes_used",
                    "label": "Log space"
                  },
                  {
                    "columnId": "tempdb_space_used_kb",
                    "label": "Tempdb space"
                  }
                ]
              },
              "sortBy": []
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "grid"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plans_grid"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| summarize any_plan_id = take_any(plan_id),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           )\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", plan_id, long(null)),\\r\\n               interval_end_time\\r\\n| extend plan_id = iif(isnull(plan_id), any_plan_id, plan_id),\\r\\n         metric = case(\\r\\n                      \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n                      real(null)\\r\\n                      )\\r\\n| project plan_label = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Plan ID: \\\", tostring(plan_id)), strcat(\\\"Plan hash: \\\", query_plan_hash)),\\r\\n          interval_end_time,\\r\\n          metric\\r\\n| make-series metric = avg(metric) default = long(null) on interval_end_time from todatetime(\\\"{qdsStartTime}\\\") to todatetime(\\\"{qdsEndTime}\\\") step {timeRange:grain} by plan_label;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnnotations": true,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} {qdsMetricLabelMidsentenceCase} by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportParameterName": "selectedChartPlan",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "unstackedbar",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              },
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "plan_label",
                "createOtherGroup": null,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "chart"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "unitless"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plan_chart_unitless"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| summarize any_plan_id = take_any(plan_id),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              )\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", plan_id, long(null)),\\r\\n               interval_end_time\\r\\n| extend plan_id = iif(isnull(plan_id), any_plan_id, plan_id),\\r\\n         metric = case(\\r\\n                      \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n                      real(null)\\r\\n                      )\\r\\n| project plan_label = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Plan ID: \\\", tostring(plan_id)), strcat(\\\"Plan hash: \\\", query_plan_hash)),\\r\\n          interval_end_time,\\r\\n          metric\\r\\n| make-series metric = avg(metric) default = long(null) on interval_end_time from todatetime(\\\"{qdsStartTime}\\\") to todatetime(\\\"{qdsEndTime}\\\") step {timeRange:grain} by plan_label;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnnotations": true,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} {qdsMetricLabelMidsentenceCase} by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportParameterName": "selectedChartPlan",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "unstackedbar",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              },
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "plan_label",
                "createOtherGroup": null,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 22,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "chart"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "time"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plan_chart_time"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| summarize any_plan_id = take_any(plan_id),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", plan_id, long(null)),\\r\\n               interval_end_time\\r\\n| extend plan_id = iif(isnull(plan_id), any_plan_id, plan_id),\\r\\n         metric = case(\\r\\n                      \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory * 8 * 1024),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used * 8 * 1024),\\r\\n                      real(null)\\r\\n                      )\\r\\n| project plan_label = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Plan ID: \\\", tostring(plan_id)), strcat(\\\"Plan hash: \\\", query_plan_hash)),\\r\\n          interval_end_time,\\r\\n          metric\\r\\n| make-series metric = avg(metric) default = long(null) on interval_end_time from todatetime(\\\"{qdsStartTime}\\\") to todatetime(\\\"{qdsEndTime}\\\") step {timeRange:grain} by plan_label;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnnotations": true,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} {qdsMetricLabelMidsentenceCase} by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportParameterName": "selectedChartPlan",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "unstackedbar",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              },
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "plan_label",
                "createOtherGroup": null,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 2,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "chart"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "bytes"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plan_chart_bytes"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "ffe8027f-b68d-4d91-8d73-3743e54a65c3",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartPlanId",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| top 1 by collection_time_utc desc\\r\\n| project plan_id\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "b551bad3-2098-47d2-ab67-852c93ea574b",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartPlanHash",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| top 1 by collection_time_utc desc\\r\\n| project query_plan_hash\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "3bbed235-3813-4be5-bfe3-0766b4383fe5",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartIntervalEndTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Time (x-coordinate) selected on a chart is generated by make-series and is unlikely to match any existing interval_end_time.\\r\\n// Look up the nearest interval_end_time here.\\r\\nunion\\r\\n(\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{selectedChartPlan:$.x}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| summarize interval_end_time = max(interval_end_time)\\r\\n),\\r\\n(\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{selectedChartPlan:$.x}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| summarize interval_end_time = min(interval_end_time)\\r\\n)\\r\\n| summarize interval_end_time = min(interval_end_time)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "58eba7e0-da24-47e5-9fc3-01af84b0046c",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridPlanId",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"print plan_id = tolong(\\\"{selectedGridPlan:$.plan_id}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "1d92a89b-f1b1-4642-b09c-fd015f67cf9c",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridPlanHash",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"print plan_hash = \\\"{selectedGridPlan:$.query_plan_hash}\\\"\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "aa9ce676-6214-44be-8a4a-af84f775c14e",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridIntervalEndTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"print interval_end_time = \\\"{selectedGridPlan:$.interval_end_time}\\\"\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "3977044c-1e4b-4277-86a0-0cf85f2ed2e5",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedPlanId",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "grid",
                        "resultValType": "param",
                        "resultVal": "selectedGridPlanId"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "chart",
                        "resultValType": "param",
                        "resultVal": "selectedChartPlanId"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "0"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedPlanHash",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "grid",
                        "resultValType": "param",
                        "resultVal": "selectedGridPlanHash"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "chart",
                        "resultValType": "param",
                        "resultVal": "selectedChartPlanHash"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "0"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "120eaca9-83d5-447d-af06-098e53d04674"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedIntervalEndTime",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "grid",
                        "resultValType": "param",
                        "resultVal": "selectedGridIntervalEndTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "chart",
                        "resultValType": "param",
                        "resultVal": "selectedChartIntervalEndTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "\"1900-01-01\""
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "903fef93-1c44-4bd7-867e-14b50d01f80e"
                }
              ],
              "style": "pills",
              "queryType": 9
            },
            "name": "selected_plan_parameters"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "96c6627e-1c4f-49cb-86e8-928964ecfc19",
                  "cellValue": "planTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Plan details",
                  "subTarget": "details",
                  "style": "link"
                },
                {
                  "id": "e8e0a56b-d1d9-46d0-ab32-e5864d25574f",
                  "cellValue": "planTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Plan XML",
                  "subTarget": "xmlPlan",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "selectedPlanId",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "selectedIntervalEndTime",
                "comparison": "isNotEqualTo",
                "value": "null"
              }
            ],
            "name": "plan_detail_tabs"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"engine_version\\\",\\r\\n1, \\\"query_plan_hash\\\",\\r\\n1, \\\"last_force_failure_reason_desc\\\",\\r\\n1, \\\"plan_forcing_type_desc\\\",\\r\\n1, \\\"database_name\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, engine_version, query_plan_hash, last_force_failure_reason_desc, plan_forcing_type_desc, database_name)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, engine_version, query_plan_hash, last_force_failure_reason_desc, plan_forcing_type_desc, database_name\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"engine_version\\\", engine_version,\\r\\n                                    plan_property_name == \\\"query_plan_hash\\\", query_plan_hash,\\r\\n                                    plan_property_name == \\\"last_force_failure_reason_desc\\\", last_force_failure_reason_desc,\\r\\n                                    plan_property_name == \\\"plan_forcing_type_desc\\\", plan_forcing_type_desc,\\r\\n                                    plan_property_name == \\\"database_name\\\", database_name,\\r\\n                                    \\\"\\\"\\r\\n                                    )\\r\\n| project-away engine_version, query_plan_hash, last_force_failure_reason_desc, plan_forcing_type_desc, database_name\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_string"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"is_parallel_plan\\\",\\r\\n1, \\\"is_forced_plan\\\",\\r\\n1, \\\"is_natively_compiled\\\",\\r\\n1, \\\"has_compile_replay_script\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, is_parallel_plan, is_forced_plan, is_natively_compiled, has_compile_replay_script)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, is_parallel_plan, is_forced_plan, is_natively_compiled, has_compile_replay_script\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"is_parallel_plan\\\", is_parallel_plan,\\r\\n                                    plan_property_name == \\\"is_forced_plan\\\", is_forced_plan,\\r\\n                                    plan_property_name == \\\"is_natively_compiled\\\", is_natively_compiled,\\r\\n                                    plan_property_name == \\\"has_compile_replay_script\\\", has_compile_replay_script,\\r\\n                                    bool(null)\\r\\n                                    )\\r\\n| project-away is_parallel_plan, is_forced_plan, is_natively_compiled, has_compile_replay_script\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "plan_property_value",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "Subtract",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_boolean"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"plan_id\\\",\\r\\n1, \\\"plan_group_id\\\",\\r\\n1, \\\"force_failure_count\\\",\\r\\n1, \\\"plan_count_compiles\\\",\\r\\n1, \\\"compatibility_level\\\",\\r\\n1, \\\"database_id\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, plan_id, plan_group_id, force_failure_count, plan_count_compiles, compatibility_level, database_id)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, plan_id, plan_group_id, force_failure_count, plan_count_compiles, compatibility_level, database_id\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"plan_id\\\", plan_id,\\r\\n                                    plan_property_name == \\\"plan_group_id\\\", plan_group_id,\\r\\n                                    plan_property_name == \\\"force_failure_count\\\", force_failure_count,\\r\\n                                    plan_property_name == \\\"plan_count_compiles\\\", plan_count_compiles,\\r\\n                                    plan_property_name == \\\"compatibility_level\\\", tolong(compatibility_level),\\r\\n                                    plan_property_name == \\\"database_id\\\", tolong(database_id),\\r\\n                                    long(null)\\r\\n                                    )\\r\\n| project-away plan_id, plan_group_id, force_failure_count, plan_count_compiles, compatibility_level, database_id\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_number"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"plan_initial_compile_start_time\\\",\\r\\n1, \\\"plan_last_compile_start_time\\\",\\r\\n1, \\\"plan_last_execution_time\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, plan_initial_compile_start_time, plan_last_compile_start_time, plan_last_execution_time)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, plan_initial_compile_start_time, plan_last_compile_start_time, plan_last_execution_time\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"plan_initial_compile_start_time\\\", plan_initial_compile_start_time,\\r\\n                                    plan_property_name == \\\"plan_last_compile_start_time\\\", plan_last_compile_start_time,\\r\\n                                    plan_property_name == \\\"plan_last_execution_time\\\", plan_last_execution_time,\\r\\n                                    datetime(null)\\r\\n                                    )\\r\\n| project-away plan_initial_compile_start_time, plan_last_compile_start_time, plan_last_execution_time\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "plan_property_value",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_datetime"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"plan_avg_compile_duration\\\",\\r\\n1, \\\"plan_last_compile_duration\\\"\\r\\n];\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, plan_avg_compile_duration_us, plan_last_compile_duration_us)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, plan_avg_compile_duration_us, plan_last_compile_duration_us\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"plan_avg_compile_duration\\\", plan_avg_compile_duration_us,\\r\\n                                    plan_property_name == \\\"plan_last_compile_duration\\\", toreal(plan_last_compile_duration_us),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n| project-away plan_avg_compile_duration_us, plan_last_compile_duration_us\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "plan_property_value",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 22,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_duration"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "planTabName",
                "comparison": "isEqualTo",
                "value": "details"
              },
              {
                "parameterName": "selectedPlanId",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "plan_details_group"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id in ({qdsDatabase})\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, query_plan)\\r\\n| project query_plan\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 9,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "selectedPlanId",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "selectedIntervalEndTime",
                "comparison": "isNotEqualTo",
                "value": "null"
              },
              {
                "parameterName": "planTabName",
                "comparison": "isEqualTo",
                "value": "xmlPlan"
              }
            ],
            "name": "query_xml_plan"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Top queries"
        },
        {
          "parameterName": "sqlserver_query_runtime_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "top_queries_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Each connectivity probe opens a new connection and executes a simple read query. A successful connectivity probe establishes that the network connection and simple query processing was successful, but does not guarantee server or database availability and health."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "connectivity_help"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "d22c6ae2-511d-4fc3-be51-11212028d0fe",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivitySampleType",
                  "label": "Data to show",
                  "type": 10,
                  "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "Historical"
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "name": "connectivity_sample_type_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "1b807fef-bbc9-4862-aeb3-22813875dd51",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivitySampleSubtype",
                  "label": "Sample type",
                  "type": 10,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{\"value\":\"all\",\"label\":\"All\"},{\"value\":\"failed\",\"label\":\"Failed\"}]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "all"
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "connectivitySampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "connectivity_sample_subtype_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server name to target server/machine name\\r\\nlet connection_server_target = (\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, server_name, machine_name) by connection_server_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| lookup connection_server_target on connection_server_name // A failed probe has empty machine_name/server_name. Look them up for the most recent successful probe with the same connection server name.\\r\\n| extend machine_name = iif(isempty(machine_name), machine_name1, machine_name),\\r\\n         server_name = iif(isempty(server_name), server_name1, server_name)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend sample_subtype = iif(probe_return_value != 1, \\\"failed\\\", \\\"successful\\\")\\r\\n| where \\\"{connectivitySampleSubtype}\\\" == \\\"all\\\" or (\\\"{connectivitySampleSubtype}\\\" == \\\"failed\\\" and sample_subtype == \\\"{connectivitySampleSubtype}\\\")\\r\\n| make-series metric = count() default = long(null) on probe_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2 by sample_subtype\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 4,
              "aggregation": 3,
              "title": "Select a sample",
              "noDataMessage": "No connectivity samples are available",
              "timeBrushParameterName": "timeRange",
              "exportParameterName": "connectivityHistoricalSample",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "barchart",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "failed",
                    "label": "Failed",
                    "color": "red"
                  },
                  {
                    "seriesName": "successful",
                    "label": "Successful",
                    "color": "greenDark"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "connectivitySampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "connectivity_timeline"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server name to target server/machine name\\r\\nlet connection_server_target = (\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, server_name, machine_name) by connection_server_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| lookup connection_server_target on connection_server_name // A failed probe has empty machine_name/server_name. Look them up for the most recent successful probe with the same connection server name.\\r\\n| extend machine_name = iif(isempty(machine_name), machine_name1, machine_name),\\r\\n         server_name = iif(isempty(server_name), server_name1, server_name)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend sample_subtype = iif(probe_return_value != 1, \\\"failed\\\", \\\"successful\\\")\\r\\n| summarize count_successful_samples = countif(sample_subtype == \\\"successful\\\"),\\r\\n            count_failed_samples = countif(sample_subtype == \\\"failed\\\")\\r\\n| project strcat(\\\"There are `\\\", count_successful_samples, \\\"` successful and `\\\", count_failed_samples, \\\"` failed connectivity probe(s) in the selected time range. Each vertical bar stands for a group of probes. Bar height is the total number of probes in a group. Select a bar to view one probe from that group, and its preceding and following probes. Zoom in to see smaller groups, down to individual probes.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "No connectivity samples are available",
              "queryType": 9,
              "visualization": "card",
              "textSettings": {
                "style": "markdown"
              }
            },
            "conditionalVisibility": {
              "parameterName": "connectivitySampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "connectivity_sample_count"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "56e281c0-0f45-4b7a-9942-9328603b6e16",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivityLatestSampleTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server name to target server/machine name\\r\\nlet connection_server_target = (\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, server_name, machine_name) by connection_server_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| lookup connection_server_target on connection_server_name // A failed probe has empty machine_name/server_name. Look them up for the most recent successful probe with the same connection server name.\\r\\n| extend machine_name = iif(isempty(machine_name), machine_name1, machine_name),\\r\\n         server_name = iif(isempty(server_name), server_name1, server_name)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize probe_time_utc = max(probe_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "c83db031-6de6-46e6-9cf2-a5863eee0a22",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivityHistoricalSampleTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Selected time from the history chart is a binned time generated by make-series and is unlikely to match an actual sample.\\r\\n// Look up an actual sample within the sample group selected on the history chart, differentiating between samples in different series.\\r\\n// Map connection server name to target server/machine name\\r\\nlet connection_server_target = (\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, server_name, machine_name) by connection_server_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between (todatetime(\\\"{connectivityHistoricalSample:$.x}\\\") .. (todatetime(\\\"{connectivityHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| lookup connection_server_target on connection_server_name // A failed probe has empty machine_name/server_name. Look them up for the most recent successful probe with the same connection server name.\\r\\n| extend machine_name = iif(isempty(machine_name), machine_name1, machine_name),\\r\\n         server_name = iif(isempty(server_name), server_name1, server_name)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend sample_subtype = iif(probe_return_value != 1, \\\"failed\\\", \\\"successful\\\")\\r\\n| where sample_subtype == \\\"{connectivityHistoricalSample:$.series}\\\"\\r\\n| summarize probe_time_utc = min(probe_time_utc) // Selecting any sample within a sample group is valid. Use the earliest for determinism.\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "a46d5538-ceba-4047-bf72-0f6494a4ab51",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivitySampleTime",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "connectivitySampleType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Latest",
                        "resultValType": "param",
                        "resultVal": "connectivityLatestSampleTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "connectivitySampleType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Historical",
                        "resultValType": "param",
                        "resultVal": "connectivityHistoricalSampleTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "connectivityLatestSampleTime"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "formHorizontal",
              "queryType": 9
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "alwaysHidden",
              "comparison": "isNotEqualTo"
            },
            "name": "connectivity_sample_time_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server name to target server/machine name\\r\\nlet connection_server_target = (\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, server_name, machine_name) by connection_server_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc == todatetime(\\\"{connectivitySampleTime}\\\")\\r\\n| lookup connection_server_target on connection_server_name // A failed probe has empty machine_name/server_name. Look them up for the most recent successful probe with the same connection server name.\\r\\n| extend machine_name = iif(isempty(machine_name), machine_name1, machine_name),\\r\\n         server_name = iif(isempty(server_name), server_name1, server_name)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time = probe_time_utc, probe_time_utc, offset = format_timespan(now() - probe_time_utc, \\\"d.hh:mm:ss\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 4,
              "noDataMessage": "No sample is selected",
              "queryType": 9,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "sample_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "28ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "probe_time_utc",
                    "formatter": 6,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      }
                    },
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "offset",
                    "formatter": 2,
                    "tooltipFormat": {
                      "tooltip": "Time difference between latest probe and displayed probe"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "sample_time",
                    "label": "Probe time"
                  },
                  {
                    "columnId": "probe_time_utc",
                    "label": "Probe time (UTC)"
                  },
                  {
                    "columnId": "offset",
                    "label": "Time offset"
                  }
                ]
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "connectivitySampleTime",
              "comparison": "isNotEqualTo"
            },
            "name": "selected_connectivity_sample"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server name to target server/machine name\\r\\nlet connection_server_target = (\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, server_name, machine_name) by connection_server_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\n// Get the latest successful probe before the current probe, and the earliest successful probe after the current probe\\r\\n// For a failed probe, these will be the last successful probe before outage and first successful probe after outage\\r\\n// For a successful probe, these will be the immediately preceding and immediately following probes\\r\\nlet range_bounds = toscalar(\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc between (({timeRange:start}) .. ({timeRange:end}))\\r\\n| lookup connection_server_target on connection_server_name\\r\\n| extend machine_name = iif(isempty(machine_name), machine_name1, machine_name),\\r\\n         server_name = iif(isempty(server_name), server_name1, server_name)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize left_bound_probe_time_utc = maxif(probe_time_utc, probe_time_utc < todatetime(\\\"{connectivitySampleTime}\\\") and probe_return_value == 1),\\r\\n            right_bound_probe_time_utc = minif(probe_time_utc, probe_time_utc > todatetime(\\\"{connectivitySampleTime}\\\") and probe_return_value == 1)\\r\\n| extend bound_probe_times = pack_array(left_bound_probe_time_utc, right_bound_probe_time_utc)\\r\\n| project-away left_bound_probe_time_utc, right_bound_probe_time_utc\\r\\n);\\r\\nsqlserver_connectivity\\r\\n| where probe_time_utc in (todatetime(\\\"{connectivitySampleTime}\\\"), range_bounds[0], range_bounds[1]) // The number of returned rows may be less than 3 if left/right bound probes fall outside selected time range\\r\\n| lookup connection_server_target on connection_server_name // A failed probe has empty machine_name/server_name. Look them up for the most recent successful probe with the same connection server name.\\r\\n| extend machine_name = iif(isempty(machine_name), machine_name1, machine_name),\\r\\n         server_name = iif(isempty(server_name), server_name1, server_name)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| order by probe_time_utc asc\\r\\n| project probe_time_utc,\\r\\n          offset = format_timespan(probe_time_utc - todatetime(\\\"{connectivitySampleTime}\\\"), \\\"d.hh:mm:ss\\\"),\\r\\n          probe_return_value,\\r\\n          error_number,\\r\\n          error_message,\\r\\n          error_state,\\r\\n          connection_server_name,\\r\\n          connection_database_name,\\r\\n          connection_application_intent,\\r\\n          connection_timeout_seconds,\\r\\n          execution_timeout_seconds,\\r\\n          client_connection_id\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Connectivity probes",
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "probe_time_utc",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "28ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "offset",
                    "formatter": 2,
                    "formatOptions": {
                      "customColumnWidthSetting": "15ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "The difference between selected probe time and preceding or following probe time"
                    }
                  },
                  {
                    "columnMatch": "probe_return_value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "1",
                          "representation": "success",
                          "text": "{0} - Successful"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "0",
                          "representation": "failed",
                          "text": "{0} - Failed"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Unknown",
                          "text": "{0}{1}"
                        }
                      ],
                      "customColumnWidthSetting": "18ch"
                    }
                  },
                  {
                    "columnMatch": "connection_server_name",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "30ch"
                    }
                  },
                  {
                    "columnMatch": "connection_timeout_seconds",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "execution_timeout_seconds",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "probe_time_utc",
                    "label": "Probe time"
                  },
                  {
                    "columnId": "offset",
                    "label": "Time offset"
                  },
                  {
                    "columnId": "probe_return_value",
                    "label": "Result"
                  },
                  {
                    "columnId": "error_number",
                    "label": "Error number"
                  },
                  {
                    "columnId": "error_message",
                    "label": "Error message"
                  },
                  {
                    "columnId": "error_state",
                    "label": "Error state"
                  },
                  {
                    "columnId": "connection_server_name",
                    "label": "Connection server"
                  },
                  {
                    "columnId": "connection_database_name",
                    "label": "Database"
                  },
                  {
                    "columnId": "connection_application_intent",
                    "label": "Application intent"
                  },
                  {
                    "columnId": "connection_timeout_seconds",
                    "label": "Connection timeout"
                  },
                  {
                    "columnId": "execution_timeout_seconds",
                    "label": "Execution timeout"
                  },
                  {
                    "columnId": "client_connection_id",
                    "label": "Client connection ID"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "connectivitySampleTime",
              "comparison": "isNotEqualTo"
            },
            "name": "connectivity_probe"
          },
          {
            "type": 1,
            "content": {
              "json": "If a failed probe is displayed, then the last successful probe before that failed probe, and the first successful probe after that failed probe are displayed as well, if they are present in the selected time range.\r\n\r\nIf a successful probe is displayed, then the immediately preceding and immediately following successful probes, if any, are displayed as well."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "connectivity_probes_help"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Connectivity"
        },
        {
          "parameterName": "sqlserver_connectivity",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "connectivity_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "b9130f6e-73a3-473d-bd5b-c9b44b20fe0c",
                  "version": "KqlParameterItem/1.0",
                  "name": "includeSystemDatabaseBackups",
                  "label": "System database backups",
                  "type": 10,
                  "description": "Include backups of system databases (master, model, msdb)",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{\"value\":\"true\",\"label\":\"Yes\"},{\"value\":\"false\",\"label\":\"No\"}]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "true"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "backup_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_sql_backup_history\\r\\n| where collection_time_utc between (({timeRange:start}) .. ({timeRange:end}))\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where {includeSystemDatabaseBackups} or (not({includeSystemDatabaseBackups}) and database_name !in(\\\"master\\\",\\\"model\\\",\\\"msdb\\\"))\\r\\n| sort by database_name asc, backup_type_desc asc, backup_start_time_local asc\\r\\n| extend backup_duration_seconds = datetime_diff(\\\"second\\\", backup_finish_time_local, backup_start_time_local),\\r\\n         backup_type_midsentence_case = tolower(backup_type_desc),\\r\\n         backup_interval_seconds = iif(database_name == prev(database_name) and backup_type_desc == prev(backup_type_desc), datetime_diff(\\\"second\\\", backup_start_time_local, prev(backup_start_time_local)), long(null))\\r\\n| summarize count_backups = count(),\\r\\n            avg_backup_duration_seconds = avg(backup_duration_seconds),\\r\\n            min_backup_duration_seconds = minif(backup_duration_seconds, backup_duration_seconds > 0),\\r\\n            max_backup_duration_seconds = maxif(backup_duration_seconds, backup_duration_seconds > 0),\\r\\n            p90_backup_duration_seconds = percentile(backup_duration_seconds, 90),\\r\\n            avg_backup_interval_seconds = avg(backup_interval_seconds),\\r\\n            min_backup_interval_seconds = minif(backup_interval_seconds, backup_interval_seconds > 0),\\r\\n            max_backup_interval_seconds = maxif(backup_interval_seconds, backup_interval_seconds > 0),\\r\\n            p90_backup_interval_seconds = percentile(backup_interval_seconds, 90)\\r\\n            by backup_type_desc, backup_type_midsentence_case\\r\\n| extend avg_backup_duration_seconds = format_timespan(1s * iif(isnan(avg_backup_duration_seconds), real(null), avg_backup_duration_seconds), \\\"d.hh:mm:ss\\\"),\\r\\n         min_backup_duration_seconds = format_timespan(1s * min_backup_duration_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         max_backup_duration_seconds = format_timespan(1s * max_backup_duration_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         p90_backup_duration_seconds = format_timespan(1s * p90_backup_duration_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         avg_backup_interval_seconds = format_timespan(1s * iif(isnan(avg_backup_interval_seconds), real(null), avg_backup_interval_seconds), \\\"d.hh:mm:ss\\\"),\\r\\n         min_backup_interval_seconds = format_timespan(1s * min_backup_interval_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         max_backup_interval_seconds = format_timespan(1s * max_backup_interval_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         p90_backup_interval_seconds = format_timespan(1s * p90_backup_interval_seconds, \\\"d.hh:mm:ss\\\")\\r\\n| extend duration_stats = bag_pack(\\\"Statistic\\\", \\\"Backup duration\\\", \\\"Average\\\", avg_backup_duration_seconds, \\\"Minimum\\\", min_backup_duration_seconds, \\\"Maximum\\\", max_backup_duration_seconds, \\\"90th percentile\\\", p90_backup_duration_seconds),\\r\\n         interval_stats = bag_pack(\\\"Statistic\\\", \\\"Backup interval\\\", \\\"Average\\\", avg_backup_interval_seconds, \\\"Minimum\\\", min_backup_interval_seconds, \\\"Maximum\\\", max_backup_interval_seconds, \\\"90th percentile\\\", p90_backup_interval_seconds),\\r\\n         tile_ordinal = case(\\r\\n                            backup_type_desc == \\\"Full\\\", 1,\\r\\n                            backup_type_desc == \\\"Differential\\\", 2,\\r\\n                            backup_type_desc == \\\"Log\\\", 3,\\r\\n                            0\\r\\n                            )\\r\\n| project backup_type_desc, backup_type_midsentence_case, count_backups, avg_backup_interval_seconds, tile_ordinal, backup_stats = dynamic_to_json(pack_array(duration_stats, interval_stats));\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "title": "Backup summary",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "backup_stats",
                  "parameterName": "backup_stats",
                  "parameterType": 1
                },
                {
                  "fieldName": "backup_type_desc",
                  "parameterName": "backup_type_desc",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "backup_type_desc",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "colors",
                    "thresholdsGrid": [
                      {
                        "operator": "==",
                        "thresholdValue": "Full",
                        "representation": "blueDark",
                        "text": "{0}{1}"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "Differential",
                        "representation": "turquoise",
                        "text": "{0}{1}"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "Log",
                        "representation": "green",
                        "text": "{0}{1}"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "text": "{0}{1}"
                      }
                    ]
                  },
                  "tooltipFormat": {
                    "tooltip": "The number of [\"backup_type_midsentence_case\"] backups in selected time range and average backup interval, if available"
                  }
                },
                "leftContent": {
                  "columnMatch": "count_backups",
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "avg_backup_interval_seconds",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": "is Empty",
                        "representation": "Refresh",
                        "text": "N/A"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "Refresh",
                        "text": "every {0}{1}"
                      }
                    ]
                  },
                  "numberFormat": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": false,
                "sortCriteriaField": "tile_ordinal",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "customWidth": "50",
            "name": "backup_summary"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{backup_stats}\",\"transformers\":[null]}",
              "size": 3,
              "title": "{backup_type_desc} backup statistics",
              "showExportToExcel": true,
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Average",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      },
                      "emptyValCustomText": "N/A"
                    }
                  },
                  {
                    "columnMatch": "Minimum",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      },
                      "emptyValCustomText": "N/A"
                    }
                  },
                  {
                    "columnMatch": "Maximum",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      },
                      "emptyValCustomText": "N/A"
                    }
                  },
                  {
                    "columnMatch": "90th percentile",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      },
                      "emptyValCustomText": "N/A"
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "backup_stats",
              "comparison": "isNotEqualTo"
            },
            "name": "backup _properties"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Backup operations",
              "expandable": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_sql_backup_history\\r\\n| where collection_time_utc between (({timeRange:start}) .. ({timeRange:end}))\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where {includeSystemDatabaseBackups} or (not({includeSystemDatabaseBackups}) and database_name !in(\\\"master\\\",\\\"model\\\",\\\"msdb\\\"))\\r\\n| where isempty(\\\"{backup_type_desc}\\\") or (isnotempty(\\\"{backup_type_desc}\\\") and backup_type_desc == \\\"{backup_type_desc}\\\")\\r\\n| sort by case(backup_type_desc == \\\"Full\\\", 1, backup_type_desc == \\\"Differential\\\", 2, backup_type_desc == \\\"Log\\\", 3, 0) asc, database_name asc, backup_start_time_local desc\\r\\n| project backup_type_desc,\\r\\n          database_name,\\r\\n          recovery_model_full = iif(recovery_model == \\\"FULL\\\", true, false),\\r\\n          recovery_model_bulk_logged = iif(recovery_model == \\\"BULK_LOGGED\\\", true, false),\\r\\n          recovery_model_simple = iif(recovery_model == \\\"SIMPLE\\\", true, false),\\r\\n          backup_start_time_local,\\r\\n          backup_finish_time_local,\\r\\n          backup_interval = iif(database_name == next(database_name) and backup_type_desc == next(backup_type_desc), datetime_diff(\\\"second\\\", backup_start_time_local, next(backup_start_time_local)), long(null)),\\r\\n          backup_duration_seconds = datetime_diff(\\\"second\\\", backup_finish_time_local, backup_start_time_local),\\r\\n          backup_size_bytes,\\r\\n          compressed_backup_size_bytes,\\r\\n          is_compressed,\\r\\n          is_encrypted,\\r\\n          has_backup_checksums,\\r\\n          is_copy_only,\\r\\n          is_snapshot,\\r\\n          backup_media,\\r\\n          backup_database_file\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 1,
                    "noDataMessage": "There is no data for specified parameters.",
                    "exportedParameters": [
                      {
                        "fieldName": "backup_media",
                        "parameterName": "backup_media",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "backup_database_file",
                        "parameterName": "backup_database_file",
                        "parameterType": 1
                      }
                    ],
                    "showExportToExcel": true,
                    "queryType": 9,
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Log",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Differential",
                                "representation": "turquoise",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Full",
                                "representation": "blueDark",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Backup type",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Log",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Differential",
                                "representation": "turquoise",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Full",
                                "representation": "blueDark",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "backup_type_desc",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "database_name",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"database_name\"]",
                              "columnSettings": [
                                {
                                  "columnName": "recovery_model_full",
                                  "color": "greenDark"
                                },
                                {
                                  "columnName": "recovery_model_bulk_logged",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "recovery_model_simple",
                                  "color": "lightBlue"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "recovery_model_full",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "recovery_model_bulk_logged",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "recovery_model_simple",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "backup_start_time_local",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": true,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "In the local time of database engine instance"
                          }
                        },
                        {
                          "columnMatch": "backup_finish_time_local",
                          "formatter": 6,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "dateFormat": {
                            "showUtcTime": true,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "In the local time of database engine instance"
                          }
                        },
                        {
                          "columnMatch": "backup_interval",
                          "formatter": 8,
                          "formatOptions": {
                            "palette": "orange"
                          },
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 2
                            },
                            "emptyValCustomText": "N/A"
                          },
                          "tooltipFormat": {
                            "tooltip": "Duration between the start of the immediately previous backup and start of this backup"
                          }
                        },
                        {
                          "columnMatch": "backup_duration_seconds",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "palette": "purple"
                          },
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 2
                            }
                          }
                        },
                        {
                          "columnMatch": "backup_size_bytes",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "compressed_backup_size_bytes",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "is_compressed",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "representation": "Canceled",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "is_encrypted",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "representation": "Canceled",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "has_backup_checksums",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "representation": "Canceled",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "is_copy_only",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "representation": "Canceled",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "is_snapshot",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "representation": "Canceled",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "backup_media",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "backup_database_file",
                          "formatter": 5
                        }
                      ],
                      "rowLimit": 500,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "backup_type_desc"
                        ],
                        "expandTopLevel": true
                      },
                      "labelSettings": [
                        {
                          "columnId": "backup_type_desc",
                          "label": "Backup type"
                        },
                        {
                          "columnId": "database_name",
                          "label": "Database"
                        },
                        {
                          "columnId": "backup_start_time_local",
                          "label": "Start time"
                        },
                        {
                          "columnId": "backup_finish_time_local",
                          "label": "Finish time"
                        },
                        {
                          "columnId": "backup_interval",
                          "label": "Interval"
                        },
                        {
                          "columnId": "backup_duration_seconds",
                          "label": "Duration"
                        },
                        {
                          "columnId": "backup_size_bytes",
                          "label": "Size"
                        },
                        {
                          "columnId": "compressed_backup_size_bytes",
                          "label": "Compressed size"
                        },
                        {
                          "columnId": "is_compressed",
                          "label": "Compressed"
                        },
                        {
                          "columnId": "is_encrypted",
                          "label": "Encrypted"
                        },
                        {
                          "columnId": "has_backup_checksums",
                          "label": "Checksums"
                        },
                        {
                          "columnId": "is_copy_only",
                          "label": "Copy only"
                        },
                        {
                          "columnId": "is_snapshot",
                          "label": "Snapshot"
                        }
                      ]
                    }
                  },
                  "name": "backup_details"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{backup_database_file}\",\"transformers\":null}",
                    "size": 3,
                    "title": "Backup database files",
                    "showExportToExcel": true,
                    "queryType": 8,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "backed_up_page_count",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "source_file_block_size_bytes",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "file_size_bytes",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "backup_size",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "is_readonly",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "Canceled",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "is_present",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "Canceled",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "filegroup_name",
                          "label": "Filegroup"
                        },
                        {
                          "columnId": "file_id",
                          "label": "File ID"
                        },
                        {
                          "columnId": "backed_up_page_count",
                          "label": "Backed up pages"
                        },
                        {
                          "columnId": "file_type_desc",
                          "label": "File type"
                        },
                        {
                          "columnId": "source_file_block_size_bytes",
                          "label": "Source file block size"
                        },
                        {
                          "columnId": "file_size_bytes",
                          "label": "File size"
                        },
                        {
                          "columnId": "file_logical_name",
                          "label": "File logical name"
                        },
                        {
                          "columnId": "file_physical_name",
                          "label": "File physical name"
                        },
                        {
                          "columnId": "file_state_desc",
                          "label": "File state"
                        },
                        {
                          "columnId": "file_guid",
                          "label": "File GUID"
                        },
                        {
                          "columnId": "is_readonly",
                          "label": "Read-only"
                        },
                        {
                          "columnId": "is_present",
                          "label": "Present"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "backup_database_file",
                    "comparison": "isNotEqualTo"
                  },
                  "name": "backup_database_file"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{backup_media}\",\"transformers\":null}",
                    "size": 3,
                    "title": "Backup media",
                    "showExportToExcel": true,
                    "queryType": 8,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "physical_block_size",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "family_sequence_number",
                          "label": "Family sequence"
                        },
                        {
                          "columnId": "physical_device_name",
                          "label": "Physical device"
                        },
                        {
                          "columnId": "device_type_desc",
                          "label": "Device type"
                        },
                        {
                          "columnId": "physical_block_size",
                          "label": "Physical block"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "backup_media",
                    "comparison": "isNotEqualTo"
                  },
                  "name": "backup_media"
                }
              ]
            },
            "name": "backup_detail_group"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Backup"
        },
        {
          "parameterName": "sqlserver_sql_backup_history",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "machineName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "backup_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
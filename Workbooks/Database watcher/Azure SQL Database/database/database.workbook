{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxClusterUri",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          },
          {
            "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxDatabase",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          }
        ],
        "style": "pills",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "neverShow",
        "comparison": "isNotEqualTo"
      },
      "name": "link_adx_parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Data store",
        "expandable": true,
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "a762a2ae-beec-4bf5-9f4a-28bea2d2f737",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResourceId",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "value": ""
                },
                {
                  "id": "83420d36-0646-40aa-9637-d06a3d2a6145",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResource",
                  "type": 1,
                  "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{watcherResourceId}?api-version=2023-03-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":null}",
                  "isHiddenWhenLocked": true,
                  "queryType": 12
                },
                {
                  "id": "a6cd9521-127a-43bd-9227-6bcd67756456",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherName",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.name\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxClusterUri",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.properties.datastore.adxClusterUri\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8,
                  "id": "f0889b5f-3fa4-40a0-838d-443b4c0472b6"
                },
                {
                  "id": "0797c608-2ecf-4711-ba9b-6d110f10acd3",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxDatabase",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$.properties.datastore.adxDatabaseResourceId\",\"columnid\":\"value\",\"columnType\":\"string\",\"substringRegexMatch\":\".*/(.*)\",\"substringReplace\":\"$1\"}]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "id": "1b7d18f3-88a9-40ed-9162-92710b29ba69",
                  "version": "KqlParameterItem/1.0",
                  "name": "dataStore",
                  "label": "Choose a data store",
                  "type": 10,
                  "description": "By default, the workbook loads data from the data store for the current database watcher. You may use an alternate data store by entering its Kusto query URI and database name.",
                  "isRequired": true,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"[{\\\"value\\\":\\\"watcher\\\",\\\"label\\\":\\\"{watcherName}\\\"},{\\\"value\\\":\\\"alternate\\\",\\\"label\\\":\\\"Alternate\\\"}]\",\"transformers\":null}",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "queryType": 8,
                  "value": "watcher"
                }
              ],
              "style": "above",
              "queryType": 12
            },
            "customWidth": "30",
            "name": "watcher_adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Kusto query URI: `{watcherAdxClusterUri}` </p>\r\nKusto database: `{watcherAdxDatabase}`"
            },
            "customWidth": "70",
            "conditionalVisibilities": [
              {
                "parameterName": "watcherName",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxDatabase",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "dataStore",
                "comparison": "isEqualTo",
                "value": "watcher"
              }
            ],
            "name": "watcher_data_store"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "bbce4b83-dae6-46e0-bf67-c99ee0ea21f0",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxClusterUri",
                  "label": "Kusto query URI",
                  "type": 1,
                  "description": "Enter a Kusto query URI for the alternate data store. Most commonly, Kusto query URI format is: https://{kusto-cluster-name}.{region}.kusto.windows.net/",
                  "isRequired": true,
                  "value": ""
                },
                {
                  "id": "99cdb447-94d3-40c7-b902-c98628fb736a",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxDatabase",
                  "label": "Kusto database",
                  "type": 1,
                  "description": "Enter a Kusto database name for the alternate data store",
                  "isRequired": true
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "70",
            "conditionalVisibility": {
              "parameterName": "dataStore",
              "comparison": "isEqualTo",
              "value": "alternate"
            },
            "name": "override_adx_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterUri",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxClusterUri",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    }
                  ]
                },
                {
                  "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxDatabase",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxDatabase",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    }
                  ]
                },
                {
                  "id": "c5aca9de-de62-466e-bea8-9a149e935c4f",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterPingResult",
                  "label": "Kusto query URI ping result",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show databases\\r\\n| where DatabaseName == @\\\"{adxDatabase}\\\"\\r\\n| project 1\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9,
                  "value": null
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Cannot connect to Kusto query URI `{adxClusterUri}`, database `{adxDatabase}`. The Kusto cluster may be stopped or unreachable, specified cluster URI may be invalid, or permissions may be insufficient.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "adxClusterPingResult",
                "comparison": "isNotEqualTo",
                "value": "1"
              },
              {
                "parameterName": "adxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "adxDatabase",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "missing_data_bad_permissions_text"
          }
        ],
        "exportParameters": true
      },
      "name": "data_store_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "4efc99f1-4cd2-417f-94ca-60fec15d41c5",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_properties",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_properties\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_storage_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_storage_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "a8baece8-02e2-4bb6-bb1c-1be94863de6f"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_resource_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_resource_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "f027ff10-2be9-46a1-b9b7-9f97d452b9e2"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_performance_counters_common",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_performance_counters_common\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "507ba9c1-409b-41a9-820e-6d751909ea83"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "68caf2eb-6dad-4e75-b5b4-82d6126cbafb"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_memory_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_memory_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "64dd65f6-d23b-40e6-a05b-bb3b758dcc6a"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_storage_io",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_storage_io\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "d1d1dc40-780a-441f-b50d-333f440abb10"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_active_sessions",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_active_sessions\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "0d0bfe52-8bba-4f30-aa12-6ec03515f3fc"
          },
          {
            "id": "9452e0c1-772b-47fb-ade0-5cd94ba80660",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_table_metadata",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_table_metadata\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_geo_replicas",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_geo_replicas\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "7a6903fd-a053-4444-893f-b81b59ad6834"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_query_runtime_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_query_runtime_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "fad10047-d22b-470f-94fe-9289a47cdb1b"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_query_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_query_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "6ea3c539-8e4f-4729-b208-bb0764ea7949"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_connectivity",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_connectivity\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "382670c5-c40b-4556-93c9-77c65e7cb309"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_sql_backup_history",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_sql_backup_history\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "f97ca954-67d2-4cc0-b84e-36cab065eba5"
          }
        ],
        "style": "above",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "name": "table_presence_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "eecd0908-04fd-4739-bef2-bcab66117f39",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": {
              "durationMs": 3600000
            }
          },
          {
            "id": "e61b3c5d-3911-4a7b-8c92-133c352a4b86",
            "version": "KqlParameterItem/1.0",
            "name": "serverName",
            "label": "Logical server",
            "type": 2,
            "isRequired": true,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where isnotempty(logical_server_name)\\r\\n| distinct logical_server_name\\r\\n| order by logical_server_name asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "af2070be-277a-4367-bf50-0023e84eb8c9",
            "version": "KqlParameterItem/1.0",
            "name": "databaseName",
            "label": "Database",
            "type": 2,
            "isRequired": true,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name in~ (\\\"{serverName}\\\")\\r\\n| distinct database_name\\r\\n| order by database_name asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": "db_crmcoretip_20210422_11221428_c0a0"
          },
          {
            "id": "2d229abc-8212-421b-8cf0-6aae8a4797f1",
            "version": "KqlParameterItem/1.0",
            "name": "isPooledDatabase",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| summarize is_pooled_database = max(iif(isnotempty(elastic_pool_name), '1', '0'))\\r\\n// value must be a string to populate parameter value\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "e39d65b4-fa00-41f6-a007-6ec9a16ec1db",
            "version": "KqlParameterItem/1.0",
            "name": "haReplica",
            "label": "HA replica",
            "type": 10,
            "description": "Set to Yes to show data from the high availability replica, if any",
            "isRequired": true,
            "value": "false",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"false\",\"label\":\"No\"},{\"value\":\"true\",\"label\":\"Yes\"}]"
          },
          {
            "id": "859e1723-fba2-4371-88a2-3cce7b3cada6",
            "version": "KqlParameterItem/1.0",
            "name": "showDescriptions",
            "label": "Show descriptions",
            "type": 10,
            "description": "Shows descriptions next to charts",
            "isRequired": true,
            "isGlobal": true,
            "value": "false",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"true\",\"label\":\"Yes\"},{\"value\":\"false\",\"label\":\"No\"}]"
          },
          {
            "id": "d540415a-9c4e-45fc-b7b8-1c37d0f06501",
            "version": "KqlParameterItem/1.0",
            "name": "grainFactor",
            "label": "Grain factor",
            "type": 2,
            "description": "Higher time grain provides more details on charts when granular data exists.",
            "isRequired": true,
            "value": "4",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3},{\"value\":4,\"label\":4},{\"value\":5,\"label\":5},{\"value\":6,\"label\":6}]"
          },
          {
            "id": "32f86b95-6a99-4fc2-9124-5a6e46963d82",
            "version": "KqlParameterItem/1.0",
            "name": "tabName",
            "type": 1,
            "value": "Overview",
            "isHiddenWhenLocked": true
          },
          {
            "id": "64b3e4a0-b802-49bb-8d68-53662b58d0cd",
            "version": "KqlParameterItem/1.0",
            "name": "geoReplTabName",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_geo_replicas\\\"\\r\\n| project tab_name = \\\"Geo-replicas\\\"\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          },
          {
            "id": "700836b8-b929-4512-9d59-dc175d550f35",
            "version": "KqlParameterItem/1.0",
            "name": "tablesTabName",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_table_metadata\\\"\\r\\n| project tab_name = \\\"Tables\\\"\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "backupTabName",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_sql_backup_history\\\"\\r\\n| project tab_name = \\\"Backup\\\"\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "55382142-f21c-4249-828b-294ad4f2ea1c"
          },
          {
            "id": "773fd6ef-dbc0-4733-a899-7690a7cdf527",
            "version": "KqlParameterItem/1.0",
            "name": "showGeoReplication",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Geo-replicas may come and go over the lifetime of a database,\\r\\n// hence the table may exist but all charts will have no data.\\r\\n// Do not show geo-replication charts if there is no data for specified parameters\\r\\nunion isfuzzy=true\\r\\n(\\r\\nsqldb_single_database_geo_replicas\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false\\r\\n| take 1\\r\\n| project any_geo_replication_rows = int(1)\\r\\n),\\r\\n(\\r\\ndatatable(any_geo_replication_rows:int)[0]\\r\\n)\\r\\n| summarize any_geo_replication_rows = tostring(max(any_geo_replication_rows));\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          }
        ],
        "style": "pills",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "filter_parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Overview",
        "expandable": true,
        "expanded": true,
        "loadType": "always",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let time_range = datatable(key:int, time_range_start:datetime, time_range_end:datetime) [\\r\\n1, datetime(\\\"{timeRange:startISO}\\\"), datetime(\\\"{timeRange:endISO}\\\")\\r\\n];\\r\\ntime_range\\r\\n| project time_range_start, time_range_end, time_range_duration = datetime_diff('second', time_range_end, time_range_start), last_refresh_time = now(), fleet_link = \\\"Community-Workbooks/Database watcher/Azure SQL Database/estate\\\", adx_link = strcat(trim_end(\\\"/\\\", \\\"{adxClusterUri}\\\"), \\\"/\\\", \\\"{adxDatabase}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "time_range_start",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Start of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_end",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "End of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_duration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "last_refresh_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Workbook refresh date and time"
                    }
                  },
                  {
                    "columnMatch": "fleet_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "linkLabel": "All databases and elastic pools",
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "column",
                        "templateId": "fleet_link",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "Azure SQL databases and elastic pools",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "linkAdxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "linkAdxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "showDescriptions",
                            "source": "parameter",
                            "value": "showDescriptions"
                          },
                          {
                            "name": "haReplica",
                            "source": "parameter",
                            "value": "haReplica"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "View all monitored Azure SQL databases and elastic pools"
                    }
                  },
                  {
                    "columnMatch": "adx_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "Url",
                      "linkLabel": "Query ADX database"
                    },
                    "tooltipFormat": {
                      "tooltip": "Explore monitoring data using ad-hoc KQL queries"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "time_range_start",
                    "label": "Time range start"
                  },
                  {
                    "columnId": "time_range_end",
                    "label": "Time range end"
                  },
                  {
                    "columnId": "time_range_duration",
                    "label": "Time range duration"
                  },
                  {
                    "columnId": "last_refresh_time",
                    "label": "Last refresh"
                  },
                  {
                    "columnId": "fleet_link",
                    "label": "Estate"
                  },
                  {
                    "columnId": "adx_link",
                    "label": "Data store"
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "name": "header_time_range"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let data_max_size_mb = toscalar(\\r\\nsqldb_single_database_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, data_max_size_mb = iif(data_max_size_mb == -1, decimal(null), data_max_size_mb)\\r\\n| top 1 by sample_time_utc desc\\r\\n| project-away sample_time_utc\\r\\n);\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| top 1 by sample_time_utc desc\\r\\n| project logical_server_name, database_name, uptime = format_timespan(1s * datetime_diff(\\\"second\\\", now(), database_engine_start_time_utc), \\\"d.hh:mm:ss\\\"), service_tier = case(service_tier =~ \\\"GeneralPurpose\\\", \\\"General Purpose\\\", service_tier =~ \\\"BusinessCritical\\\", \\\"Business Critical\\\", service_tier), service_level_objective = iif(service_level_objective =~ \\\"ElasticPool\\\", \\\"Elastic pool\\\", service_level_objective), logical_cpu_count, database_engine_memory_mb, data_max_size_mb, replica_type, elastic_pool_name,\\r\\nrt_tooltip = case(\\r\\n                 replica_type == \\\"Primary\\\", \\\"The primary replica always exists for any database. Primary replicas support read and write workloads. All other replica types support read workloads only.\\\",\\r\\n                 replica_type == \\\"Geo-replication forwarder\\\", \\\"A geo-replication secondary replica, also known as a geo-replication forwarder, is created when you configure geo-replication or failover groups. Data from a primary replica is replicated to one or more geo-replication forwarders.\\\",\\r\\n                 replica_type == \\\"Named secondary\\\", \\\"A named secondary replica may have a database name that is different from its associated primary replica, and may be placed on a different logical server. Data from a primary replica is replicated to one or more named secondary replicas.\\\",\\r\\n                 replica_type == \\\"HA secondary\\\", \\\"For primary, geo-replication forwarder, and named secondary replicas data may be replicated to an HA secondary replica to provide high availability (HA). HA secondary replicas do not have their own names, but inherit the name of the replica for which they provide high availability.\\\",\\r\\n                 \\\"\\\"\\r\\n                 )\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "logical_cpu_count",
                    "formatter": 2,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": []
                      },
                      "customColumnWidthSetting": "16ch"
                    }
                  },
                  {
                    "columnMatch": "database_engine_memory_mb",
                    "formatter": 2,
                    "formatOptions": {
                      "customColumnWidthSetting": "14ch"
                    },
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "data_max_size_mb",
                    "formatter": 2,
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      },
                      "emptyValCustomText": "(N/A)"
                    }
                  },
                  {
                    "columnMatch": "replica_type",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Primary",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "HA secondary",
                          "representation": "turquoise",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Geo-replication forwarder",
                          "representation": "magenta",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Named replica",
                          "representation": "greenDark",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"rt_tooltip\"]"
                    }
                  },
                  {
                    "columnMatch": "elastic_pool_name",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "static",
                        "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "Azure SQL DB elastic pool",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "elasticPoolName",
                            "source": "column",
                            "value": "elastic_pool_name"
                          },
                          {
                            "name": "serverName",
                            "source": "parameter",
                            "value": "serverName"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "linkAdxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "linkAdxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "tabName",
                            "source": "static",
                            "value": "Overview"
                          },
                          {
                            "name": "haReplica",
                            "source": "parameter",
                            "value": "haReplica"
                          },
                          {
                            "name": "showDescriptions",
                            "source": "parameter",
                            "value": "showDescriptions"
                          }
                        ]
                      }
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      },
                      "emptyValCustomText": "(None)"
                    }
                  },
                  {
                    "columnMatch": "rt_tooltip",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "service_tier",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "logical_server_name",
                    "label": "Logical server"
                  },
                  {
                    "columnId": "database_name",
                    "label": "Database"
                  },
                  {
                    "columnId": "uptime",
                    "label": "Uptime"
                  },
                  {
                    "columnId": "service_tier",
                    "label": "Service tier"
                  },
                  {
                    "columnId": "service_level_objective",
                    "label": "Compute size"
                  },
                  {
                    "columnId": "logical_cpu_count",
                    "label": "Logical CPUs"
                  },
                  {
                    "columnId": "database_engine_memory_mb",
                    "label": "Memory"
                  },
                  {
                    "columnId": "data_max_size_mb",
                    "label": "Max data storage"
                  },
                  {
                    "columnId": "replica_type",
                    "label": "Replica type"
                  },
                  {
                    "columnId": "elastic_pool_name",
                    "label": "Elastic pool"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "service_tier",
                  "sortOrder": 1
                }
              ],
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "name": "header_db_properties"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "header_group"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "tabStyle": "bigger",
        "links": [
          {
            "id": "e108c42f-d83e-470e-baf3-579e5018fb7b",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Performance",
            "subTarget": "Overview",
            "style": "secondary"
          },
          {
            "id": "341b21d7-3e64-49aa-8665-cbf41f016c7e",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Activity",
            "subTarget": "Activity",
            "style": "secondary"
          },
          {
            "id": "3d9c1aaf-fcc2-41f5-8738-c59cc0076213",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Top queries",
            "subTarget": "Top queries",
            "style": "link"
          },
          {
            "id": "9f26ac72-497e-4b7b-bd31-9e1216f83fb8",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Storage",
            "subTarget": "Storage",
            "style": "secondary"
          },
          {
            "id": "282f8932-cee9-4123-a2fe-872558a8d230",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "{tablesTabName}",
            "subTarget": "Tables",
            "style": "secondary"
          },
          {
            "id": "c2ccad7b-6a89-4449-9038-2353fb3ce59b",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Connectivity",
            "subTarget": "Connectivity",
            "style": "link"
          },
          {
            "id": "811b1d60-37fd-4de6-a947-f3f8e5a8a301",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "{geoReplTabName}",
            "subTarget": "Geo-replicas",
            "style": "secondary"
          },
          {
            "id": "a027676c-7651-470d-b987-f50db7d6c6d3",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "{backupTabName}",
            "subTarget": "Backup",
            "style": "link"
          },
          {
            "id": "5f25321e-8c04-44b8-9867-bcbe0f949016",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Properties",
            "subTarget": "Properties",
            "style": "secondary"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "top_tabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Resources and requests",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "18c7490d-6c49-4e1a-9ec4-e3e65dd77a8c",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedResourceMetrics",
                  "label": "Metrics to display",
                  "type": 2,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"CPU\",\"label\":\"CPU\"},\r\n    {\"value\":\"Instance CPU\",\"label\":\"Instance CPU\"},\r\n    {\"value\":\"Data IO\",\"label\":\"Data IO\"},\r\n    {\"value\":\"Log write\",\"label\":\"Log write\"},\r\n    {\"value\":\"Workers\",\"label\":\"Workers\"},\r\n    {\"value\":\"DTU\",\"label\":\"DTU\"},\r\n    {\"value\":\"Memory\",\"label\":\"Memory\"},\r\n    {\"value\":\"Instance memory\",\"label\":\"Instance memory\"},\r\n    {\"value\":\"XTP memory\",\"label\":\"XTP memory\"},\r\n    {\"value\":\"Sessions\",\"label\":\"Sessions\"}\r\n]\r\n",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "value": [
                    "CPU",
                    "Instance CPU",
                    "Data IO",
                    "Log write",
                    "Workers"
                  ]
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "resource_metric_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"CPU\\\",\\r\\n1, \\\"Data IO\\\",\\r\\n1, \\\"Log write\\\",\\r\\n1, \\\"Workers\\\",\\r\\n1, \\\"Memory\\\",\\r\\n1, \\\"Instance CPU\\\",\\r\\n1, \\\"Instance memory\\\",\\r\\n1, \\\"XTP memory\\\",\\r\\n1, \\\"Sessions\\\",\\r\\n1, \\\"DTU\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_single_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, avg_cpu_percent, avg_data_io_percent, avg_log_write_percent, xtp_storage_percent, max_worker_percent, avg_memory_usage_percent, avg_instance_cpu_percent, avg_instance_memory_percent, max_session_percent, avg_dtu_percent\\r\\n| where \\\"{selectedResourceMetrics}\\\" == \\\"'*'\\\" or metric_name in ({selectedResourceMetrics})\\r\\n| extend metric = case(\\r\\n                    metric_name == \\\"CPU\\\", avg_cpu_percent,\\r\\n                    metric_name == \\\"Data IO\\\", avg_data_io_percent,\\r\\n                    metric_name == \\\"Log write\\\", avg_log_write_percent,\\r\\n                    metric_name == \\\"Workers\\\", max_worker_percent,\\r\\n                    metric_name == \\\"Memory\\\", avg_memory_usage_percent,\\r\\n                    metric_name == \\\"Instance CPU\\\", avg_instance_cpu_percent,\\r\\n                    metric_name == \\\"Instance memory\\\", avg_instance_memory_percent,\\r\\n                    metric_name == \\\"XTP memory\\\", xtp_storage_percent,\\r\\n                    metric_name == \\\"Sessions\\\", max_session_percent,\\r\\n                    metric_name == \\\"DTU\\\", avg_dtu_percent,\\r\\n                    decimal(null))\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Resource utilization",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "exportToExcelOptions": "all",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Instance memory",
                    "color": "purple"
                  },
                  {
                    "seriesName": "CPU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "Workers",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Memory",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Instance CPU",
                    "color": "red"
                  },
                  {
                    "seriesName": "Sessions",
                    "color": "brown"
                  },
                  {
                    "seriesName": "Log write",
                    "color": "green"
                  },
                  {
                    "seriesName": "DTU",
                    "color": "gray"
                  },
                  {
                    "seriesName": "Data IO",
                    "color": "blue"
                  },
                  {
                    "seriesName": "XTP memory",
                    "color": "turquoise"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "textSettings": {
                "style": "markdown"
              }
            },
            "name": "resource_utilization"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`CPU`|CPU utilization relative to the CPU maximum limit per database, as measured by the database engine. As the limit is approached, query latency may increase. Includes only CPU utilization by user workload. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198628).|\r\n|`Data IO`|IO utilization relative to the maximum IOPS limit per database. Reflects physical data file reads, not transaction log writes. As the limit is approached, query latency may increase. If this impacts applications, consider workload tuning to reduce the volume of data reads, or scale up to a compute size with a higher `Data IO` limit. Common workload tuning includes [creating indexes](https://go.microsoft.com/fwlink/?linkid=2198640) and implementing [data compression](https://go.microsoft.com/fwlink/?linkid=2198735) (row, page, [columnstore](https://go.microsoft.com/fwlink/?linkid=2198859)). [Learn more](https://go.microsoft.com/fwlink/?linkid=2198851).|\r\n|`Log write`|Transaction log write throughput, relative to the log throughput limit per database. When this metric approaches 100%, data ingestion and data modification become slower. If this impacts applications, consider workload tuning to reduce the volume of log writes, or scale up to a compute size with a higher `Log write` limit. Workload tuning includes implementing [data compression](https://go.microsoft.com/fwlink/?linkid=2198735) (row, page, [columnstore](https://go.microsoft.com/fwlink/?linkid=2198859)), and/or using `tempdb` for transient data by using temporary tables or permanent tables created in `tempdb`. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198639).|\r\n|`Workers`|Worker thread utilization relative to maximum worker thread limit per database. If values over 50% occur consistently, consider workload tuning to reduce worker consumption (for example, reduce [MAXDOP](https://go.microsoft.com/fwlink/?linkid=2198634)), or proactively scale up to a compute size with a higher `Workers` limit. When worker threads are exhausted, new queries and connections will fail. Metric value is obtained by periodic sampling. Actual worker utilization *may spike to higher values* between samples. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198862).|\r\n|`Instance CPU`|CPU utilization relative to the maximum limit for the database engine instance, as measured by the operating system. As the limit is approached, query latency may increase. Includes all CPU utilization by the database engine, including user and system workloads. Measured at one minute granularity. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198861).|\r\n|`Memory`| Memory utilization relative to the maximum memory limit per database. Expected to be at or near 100% for databases with active workloads to provide optimal performance. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198856).|\r\n|`Instance memory`|Memory utilization relative to the maximum limit for the database engine instance, as measured by the operating system. Expected to be at or near 100% for databases with active workloads to provide optimal performance. Measured at one minute granularity.|\r\n|`Sessions`|Session (connection) utilization relative to the maximum limit per database. High utilization is rare, and most commonly occurs due to not using connection pooling. It may also indicate a connection leak in the application.|\r\n|`DTU`|This metric is derived from the `CPU`, `Data IO`, and `Log write` metrics, as the largest of these values at each point in time. `DTU = MAX(CPU, Data IO, Log write)`. Available only for databases using the [DTU model](https://go.microsoft.com/fwlink/?linkid=2198637), not the newer [vCore model](https://go.microsoft.com/fwlink/?linkid=2198646).|\r\n|`XTP memory`|Utilization of memory for [In-Memory OLTP](https://go.microsoft.com/fwlink/?linkid=2198858) (also known as \"exteme transaction processing\", or XTP), relative to the maximum XTP memory limit per database. When this metric reaches 100%, XTP transactions that add or modify data or create memory-optimized objects will fail. Available only for service tiers that support In-Memory OLTP.|\r\n\r\n[Learn more](https://go.microsoft.com/fwlink/?linkid=2198742) about resource management in Azure SQL Database. Data is collected from [sys.dm_db_resource_stats](https://go.microsoft.com/fwlink/?linkid=2198641)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "resource_stats_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total request count\\\")\\r\\n| project sample_time_utc, object_name, counter_name, cntr_value\\r\\n| sort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away object_name, cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Request rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Total request count",
                    "label": "Requests",
                    "color": "greenDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "requests"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Requests`|A request is one or more SQL statements (queries) that a client sends to the database engine to execute. Requests rate is a commonly used measure of workload throughput. |\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_single_database_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "resources_and_requests_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Waits",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "7ae3f51d-d369-4ab7-aa86-76f80ccdc98b",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Cumulative waits",
                  "subTarget": "wait_stats_resource_cumulative",
                  "style": "link"
                },
                {
                  "id": "7b11612a-5427-4472-b1ed-e56aab7e01af",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Average waits",
                  "subTarget": "wait_stats_resource_average",
                  "style": "link"
                },
                {
                  "id": "cea87ec4-e50a-4eba-a8e8-c4ca7fc3c123",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Average signal waits",
                  "subTarget": "wait_stats_signal_average",
                  "style": "link"
                },
                {
                  "id": "0f53f0f1-53b2-43bf-9c97-b26ea4d74609",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Waiting tasks",
                  "subTarget": "wait_stats_waiting_tasks",
                  "style": "link"
                }
              ]
            },
            "name": "waits_tabs"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, wait_type, wait_time_ms\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms), wait_time_ms - prev(wait_time_ms), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = toreal(delta_wait_time_ms) / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_resource_cumulative"
            },
            "name": "wait_stats_resource_cumulative"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, wait_type, wait_time_ms, waiting_tasks_count\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms), wait_time_ms - prev(wait_time_ms), long(null)),\\r\\n         delta_waiting_tasks_count = iif(waiting_tasks_count >= prev(waiting_tasks_count) and wait_type == prev(wait_type), waiting_tasks_count - prev(waiting_tasks_count), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend delta_avg_wait_time_ms = iif(delta_waiting_tasks_count != 0, toreal(delta_wait_time_ms) / delta_waiting_tasks_count, real(null))\\r\\n| make-series metric = avg(delta_avg_wait_time_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_resource_average"
            },
            "name": "wait_stats_resource_average"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, wait_type, signal_wait_time_ms, waiting_tasks_count\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_signal_wait_time_ms = iif(signal_wait_time_ms >= prev(signal_wait_time_ms), signal_wait_time_ms - prev(signal_wait_time_ms), long(null)),\\r\\n         delta_waiting_tasks_count = iif(waiting_tasks_count >= prev(waiting_tasks_count), waiting_tasks_count - prev(waiting_tasks_count), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend delta_avg_signal_wait_time_ms = iif(delta_waiting_tasks_count != 0, toreal(delta_signal_wait_time_ms) / delta_waiting_tasks_count, real(null))\\r\\n| make-series metric = avg(delta_avg_signal_wait_time_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_signal_average"
            },
            "name": "wait_stats_signal_average"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, wait_type, waiting_tasks_count\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_waiting_tasks_count = iif(waiting_tasks_count >= prev(waiting_tasks_count), waiting_tasks_count - prev(waiting_tasks_count), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = toreal(delta_waiting_tasks_count) / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_waiting_tasks"
            },
            "name": "wait_stats_waiting_tasks"
          },
          {
            "type": 1,
            "content": {
              "json": "|Chart|Description|\r\n|:-|:-|\r\n|Cumulative waits|The Y axis shows the cumulative time all tasks spent waiting per second, for top wait types.|\r\n|Average waits|The Y axis shows the average time a task has spent waiting, for wait types. Calculated as *cumulative resource wait time* / *number of waiting tasks*.|\r\n|Average signal waits|The Y axis shows the average time a task spent waiting for CPU to become available after the resource wait was over. High values may indicate CPU pressure.|\r\n|Waiting tasks|The Y axis shows the number of waiting tasks, for top wait types.|\r\n\r\nData is collected from [sys.dm_os_wait_stats](https://go.microsoft.com/fwlink/?linkid=2198648), or [sys.dm_db_wait_stats](https://go.microsoft.com/fwlink/?linkid=2198633) for databases in an elastic pool."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "waits_help"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_single_database_wait_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "waits_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Workload statistics",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Batch Resp Statistics\\\" and instance_name == \\\"Elapsed Time:Requests\\\"\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| partition hint.strategy = shuffle by counter_name\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| summarize count_requests = sum(delta_cntr_value) by counter_name\\r\\n)\\r\\n| project low_elapsed_time_ms = case(\\r\\n                                    counter_name == \\\"Batches >=000000ms & <000001ms\\\", \\\"≥0 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000001ms & <000002ms\\\", \\\"≥1 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000002ms & <000005ms\\\", \\\"≥2 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000005ms & <000010ms\\\", \\\"≥5 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000010ms & <000020ms\\\", \\\"≥10 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000020ms & <000050ms\\\", \\\"≥20 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000050ms & <000100ms\\\", \\\"≥50 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000100ms & <000200ms\\\", \\\"≥100 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000200ms & <000500ms\\\", \\\"≥200 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000500ms & <001000ms\\\", \\\"≥500 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=001000ms & <002000ms\\\", \\\"≥1 s\\\",\\r\\n                                    counter_name == \\\"Batches >=002000ms & <005000ms\\\", \\\"≥2 s\\\",\\r\\n                                    counter_name == \\\"Batches >=005000ms & <010000ms\\\", \\\"≥5 s\\\",\\r\\n                                    counter_name == \\\"Batches >=010000ms & <020000ms\\\", \\\"≥10 s\\\",\\r\\n                                    counter_name == \\\"Batches >=020000ms & <050000ms\\\", \\\"≥20 s\\\",\\r\\n                                    counter_name == \\\"Batches >=050000ms & <100000ms\\\", \\\"≥50 s\\\",\\r\\n                                    counter_name == \\\"Batches >=100000ms\\\", \\\"≥100 s\\\",\\r\\n                                    \\\"\\\"\\r\\n                                    ),\\r\\n        count_requests, counter_name\\r\\n| sort by counter_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "showAnalytics": true,
              "title": "Requests by duration",
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "categoricalbar",
              "chartSettings": {
                "group": "low_elapsed_time_ms",
                "createOtherGroup": 0,
                "showLegend": true
              }
            },
            "name": "batch_response_stats"
          },
          {
            "type": 1,
            "content": {
              "json": "This chart shows a distribution of request durations by elapsed time. Each bar on the histogram corresponds to the number of requests with durations in certain time bucket. For example, the bar labeled `≥1 ms` shows the number of requests with elapsed time ranging from 1 millisecond (inclusive) to 2 milliseconds.\r\n\r\nFor the same workload, a shift in the number of requests to the right over time indicates an increase in query response time. "
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "batch_response_stats_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (\\r\\n        (object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"SQL Compilations/sec\\\",\\\"SQL Re-Compilations/sec\\\"))\\r\\n        or\\r\\n        (object_name == \\\"General Statistics\\\" and counter_name in (\\\"Temp Tables Creation Rate\\\"))\\r\\n        or\\r\\n        (object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Query optimizations/sec\\\") and instance_name startswith \\\"UserPrimaryGroup.DBId\\\")\\r\\n        )\\r\\n| project sample_time_utc, object_name, cntr_value, counter_name\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric, long(null), false), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Compilation, optimization, temp tables",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "SQL Compilations/sec",
                    "label": "SQL compilations",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "SQL Re-Compilations/sec",
                    "label": "SQL recompilations",
                    "color": "red"
                  },
                  {
                    "seriesName": "Temp Tables Creation Rate",
                    "label": "Temp tables creation",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Query optimizations/sec",
                    "label": "Query optimizations",
                    "color": "redBright"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "rate_statistics_1"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`SQL compilations`|A query is compiled when it is not found in plan cache. If a query is parameterized (explicitly or automatically), it may be matched to an existing query in plan cache. Such queries may still be compiled, but they avoid CPU-intentive optimization.|\r\n|`Query optimizations`|As part of query compilation, a query may be optimized to create an execution plan. Optimization is a CPU-intentive process. Make sure queries are parameterized to avoid unnecessary optimization. Specify data type, length, precision, and scale in parameter definition. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198744).|\r\n|`SQL recompilations`|A query is re-compiled because its previously cached plan is no longer valid or optimal. This may happen because of schema and data changes. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198738).|\r\n|`Temp tables creation`|The number of temporary tables and table variables created per second. Temp table caching alleviates possible contention due to high rate of temp table creation.|\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (\\r\\n        (object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"SQL Attention rate\\\"))\\r\\n        or\\r\\n        (object_name == \\\"General Statistics\\\" and counter_name in (\\\"Logins/sec\\\",\\\"Logouts/sec\\\"))\\r\\n        or\\r\\n        (object_name == \\\"SQL Errors\\\" and counter_name == \\\"Errors/sec\\\" and instance_name == \\\"User Errors\\\")\\r\\n        or\\r\\n        (object_name == \\\"Access Methods\\\" and counter_name == \\\"Table Lock Escalations/sec\\\")\\r\\n        or\\r\\n        (object_name == \\\"Locks\\\" and counter_name == \\\"Number of Deadlocks/sec\\\" and instance_name == \\\"_Total\\\")\\r\\n        )\\r\\n| project sample_time_utc, object_name, cntr_value, \\r\\n          counter_name = case(\\r\\n                             counter_name == \\\"Errors/sec\\\" and instance_name == \\\"User Errors\\\", \\\"User Errors/sec\\\",\\r\\n                             counter_name == \\\"Number of Deadlocks/sec\\\", \\\"Deadlocks/sec\\\",\\r\\n                             counter_name\\r\\n                             )\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Deadlocks, lock escalation, logins, logouts, timeouts",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Logouts/sec",
                    "label": "Logouts",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "Logins/sec",
                    "label": "Logins",
                    "color": "green"
                  },
                  {
                    "seriesName": "SQL Attention rate",
                    "label": "Attentions",
                    "color": "orange"
                  },
                  {
                    "seriesName": "User Errors/sec",
                    "label": "User errors",
                    "color": "gray"
                  },
                  {
                    "seriesName": "Table Lock Escalations/sec",
                    "label": "Table lock escalations",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Deadlocks/sec",
                    "label": "Deadlocks",
                    "color": "purpleDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "rate_statistics_2"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Deadlocks`|A deadlock occurs when two or more requests block each other, requiring the database engine to terminate one of them. In some workloads, deadlocks occur routinely. A spike in the number of deadlocks may require investigation. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198741).|\r\n|`Logins`|A high number of logins and logouts per second may indicate that connection pooling is not used. Learn more: [connection pooling in ADO.NET (SqlClient)](https://go.microsoft.com/fwlink/?linkid=2198736), and [connection pooling in JDBC Driver for SQL Server](https://go.microsoft.com/fwlink/?linkid=2198857).|\r\n|`Logouts`|A spike in logouts per second may indicate a restart of client application|\r\n|`User errors`|In many applications, user errors occur routinely. A spike in the number of user errors may require investigation.|\r\n|`Attentions`|An attention event occurs when a query times out or is canceled. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198868).|\r\n|`Table lock escalations`|Lock escalation to the object (table) level reduces memory use, but may cause lock blocking. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198651).|\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (object_name == \\\"General Statistics\\\" and counter_name in (\\\"Active Temp Tables\\\",\\\"Logical Connections\\\",\\\"Processes blocked\\\",\\\"User Connections\\\"))\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Connections, blocked processes, temp tables",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "User Connections",
                    "label": "User connections",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "Active Temp Tables",
                    "label": "Active temp tables",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Logical Connections",
                    "label": "Logical connections",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Processes blocked",
                    "label": "Processes blocked",
                    "color": "redBright"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 1
                    }
                  }
                }
              }
            },
            "name": "count_statistics"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Active temp tables`|The number of temporary tables or table variables in use|\r\n|`Logical connections`|If multiple active result sets (MARS) is used, each physical connection may be used by multiple logical sessions. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198630).|\r\n|`Processes blocked`|The number of sessions that were blocked at data collection time. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198855).|\r\n|`User connections`|The number of physical connections, excluding system connections|\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_3"
          },
          {
            "type": 1,
            "content": {
              "json": "Data is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_4"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_single_database_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "isPooledDatabase",
          "comparison": "isNotEqualTo",
          "value": "1"
        }
      ],
      "name": "workload_statistics_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Memory",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_memory_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, memory_clerk_type, memory_clerk_name, memory_size_mb\\r\\n| make-series metric = avg(memory_size_mb) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by memory_clerk_type\\r\\n| project memory_clerk_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Memory clerks",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "memory_clerk_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "memory_clerks"
          },
          {
            "type": 1,
            "content": {
              "json": "All significant memory allocations by components of the database engine are tracked under specific  memory clerks. It is common for some memory clerks, such as `MEMORYCLERK_SQLBUFFERPOOL` and `CACHESTORE_COLUMNSTOREOBJECTPOOL`, to allocate large amounts of memory to cache data pages. Persistently high memory utilization by other memory clerks may require investigation. Data is collected from [sys.dm.os_memory_clerks](https://go.microsoft.com/fwlink/?linkid=2198866)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_clerks"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Memory Manager\\\"\\r\\n| where counter_name in (\\\"Target Server Memory (KB)\\\",\\\"Total Server Memory (KB)\\\",\\\"Granted Workspace Memory (KB)\\\",\\\"Lock Memory (KB)\\\")\\r\\n| project sample_time_utc, counter_name = replace_string(counter_name, \\\" (KB)\\\", \\\"\\\"), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Memory manager",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Target Server Memory",
                    "label": "Target server memory"
                  },
                  {
                    "seriesName": "Total Server Memory",
                    "label": "Total server memory"
                  },
                  {
                    "seriesName": "Lock Memory",
                    "label": "Lock memory"
                  },
                  {
                    "seriesName": "Granted Workspace Memory",
                    "label": "Granted workspace memory"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 3,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "memory_manager"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Memory Manager\\\"\\r\\n| where counter_name in (\\\"Memory Grants Outstanding\\\",\\\"Memory Grants Pending\\\")\\r\\n| extend counter_name = case(counter_name == \\\"Memory Grants Outstanding\\\", \\\"Outstanding grants\\\", counter_name == \\\"Memory Grants Pending\\\", \\\"Pending grants\\\", \\\"\\\")\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Memory grants",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "memory_grants"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Target server memory`|The database engine does not allocate memory beyond its current target memory. Target memory is determined by initial engine configuration, and may be adjusted if external memory pressure occurs.|\r\n|`Total server memory`|Total memory allocated by the database engine. Commonly, total server memory closely matches target server memory because the database engine allocates all available memory for various caches. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198638).|\r\n|`Lock memory`|Memory allocated for locks. High lock memory may be due to large transactions and/or disabled lock escalation. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198651).|\r\n|`Granted workspace memory`|Memory allocated for query processing, also known as query memory grants. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198869).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_memory_manager"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Outstanding grants`|A non-zero value indicates that some currently running queries have allocated query workspace memory.|\r\n|`Pending grants`|A non-zero value indicates that some queries cannot start or continue execution because they are waiting for a memory grant. Such waits are tracked under `RESOURCE_SEMAPHORE` wait type. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198636).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_memory_grants"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Resource Pool Stats\\\" and counter_name == \\\"Out of memory count\\\"\\r\\n| extend instance_name = case(instance_name == \\\"SloSharedPool1\\\" or instance_name startswith \\\"UserPool.\\\", \\\"User pool OOM\\\", instance_name == \\\"SloHkPool\\\", \\\"XTP pool OOM\\\", \\\"\\\")\\r\\n| project sample_time_utc, instance_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by instance_name\\r\\n| project instance_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 2,
              "showAnalytics": true,
              "title": "Resource pool out of memory (OOM) events",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "XTP pool",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "User pool",
                    "color": "redBright"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "resource_pools_oom"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (\\r\\n        (object_name == \\\"Buffer Manager\\\" and counter_name == \\\"Buffer cache hit ratio\\\")\\r\\n        or\\r\\n        (object_name == \\\"Plan Cache\\\" and counter_name == \\\"Cache Hit Ratio\\\" and instance_name == \\\"_Total\\\")\\r\\n        )\\r\\n| project sample_time_utc, counter_name = iif(object_name == \\\"Plan Cache\\\" and counter_name == \\\"Cache Hit Ratio\\\", \\\"Plan cache hit ratio\\\", counter_name), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Cache hit ratios",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Buffer cache hit ratio",
                    "color": "green"
                  },
                  {
                    "seriesName": "Plan cache hit ratio",
                    "color": "magenta"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "cache_hit_ratios"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`User pool OOM`|The number of out-of-memory events that have occurred in the resource pool allocated for user workloads. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198856).|\r\n|`XTP pool OOM`|The number of out-of-memory events that have occurred in the resource pool allocated for memory-optimized tables and other [In-Memory OLTP](https://go.microsoft.com/fwlink/?linkid=2198858) (aka XTP) objects.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_pool_oom"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Buffer cache hit ratio`|Percentage of data pages that were found in the buffer pool (an in-memory data cache), avoiding slower reads from storage. When sufficient memory is provisioned for the workload, the value at steady state is close to 100%. Occasional dips are possible as IO-intensive queries execute. [Learn more](https://go.microsoft.com/fwlink/?linkid=2197944).|\r\n|`Plan cache hit ratio`|Query execution plans are optimized and stored in an in-memory cache for reuse. This metric is the percentage of plans that were found in plan cache during query execution. When queries are properly parameterized (by specifying data type, length, precision, and scale in parameter definition), query plan reuse is facilitated and this metric tends to be close to 100%. When this metric is much lower than 100%, it may indicate that essentialy the same queries are optimized and stored repeatedly, increasing CPU and memory usage. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198738).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_cache_hit_ratios"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Buffer Manager\\\"\\r\\n| where counter_name in (\\\"Background writer pages/sec\\\",\\\"Checkpoint pages/sec\\\",\\\"Lazy writes/sec\\\",\\\"Page reads/sec\\\",\\\"Page writes/sec\\\",\\\"Readahead pages/sec\\\")\\r\\n| extend counter_name = replace_string(counter_name, \\\"/sec\\\", \\\"\\\")\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| partition hint.strategy = shuffle by counter_name\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n)\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Buffer manager",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "buffer_manager"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Buffer Node\\\" and counter_name == \\\"Page life expectancy\\\"\\r\\n| project sample_time_utc, numa_node = strcat(\\\"NUMA node: \\\", instance_name), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = 0 on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by numa_node\\r\\n| project numa_node, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Page life expectancy",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "page_life_expectancy"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Background writer pages`|Data pages written by indirect checkpoint. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198733).|\r\n|`Checkpoint pages`|Data pages written by automatic or manual checkpoints. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198739).|\r\n|`Lazy writes`|Data pages written by the lazy writer. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198747).|\r\n|`Readahead pages`|Pages read from storage using larger and more efficient IO requests in anticipation of their use by the workload. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198865).|\r\n|`Page reads`|Pages read from storage into the buffer pool. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198853).|\r\n|`Page writes`|Data pages written to data files. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198747).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_buffer_manager"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Page life expectancy`|The time a page is predicted to stay in the buffer pool if it is not referenced by workload. Deep drops in page life expectancy, or consistently low values may be caused by IO intensive queries that flush out most of cached pages from the buffer pool.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_ple"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_single_database_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_memory_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "isPooledDatabase",
          "comparison": "isNotEqualTo",
          "value": "1"
        }
      ],
      "name": "memory_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Transactions and replicas",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Databases\\\" and counter_name in (\\\"Transactions/sec\\\",\\\"Write Transactions/sec\\\",\\\"Log Flushes/sec\\\")\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, series_name = strcat(counter_name, iif(instance_name == \\\"tempdb\\\", \\\" | tempdb\\\", \\\"\\\")), value\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_name\\r\\n| project series_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Transaction and log flush rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Transactions/sec | tempdb",
                    "label": "Transactions | tempdb",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "Write Transactions/sec | tempdb",
                    "label": "Write transactions | tempdb",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "Log Flushes/sec | tempdb",
                    "label": "Log flushes | tempdb",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Transactions/sec",
                    "label": "Transactions",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Log Flushes/sec",
                    "label": "Log flushes",
                    "color": "green"
                  },
                  {
                    "seriesName": "Write Transactions/sec",
                    "label": "Write transactions",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 1
                    }
                  }
                }
              }
            },
            "name": "transactions"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Transactions`|Transaction rate for all transactions, including read and write transactions, and user and system transactions. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198854).|\r\n|`Write transactions`|The rate of transactions that wrote to the transaction log of the database. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198644).|\r\n|`Log flushes`|The rate of writes to transaction log as the number of writes per second.|\r\n\r\nMetrics are provided separately for the user database, and for the `tempdb` database. Data is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transactions"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Databases\\\" and counter_name == \\\"Log Bytes Flushed/sec\\\"\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, series_name = strcat(counter_name, iif(instance_name == \\\"tempdb\\\", \\\" | tempdb\\\", \\\"\\\")), value\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_name\\r\\n| project series_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Log flush rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log Bytes Flushed/sec | tempdb",
                    "label": "Log flush rate | tempdb",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Log Bytes Flushed/sec",
                    "label": "Log flush rate",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "transaction_log"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where instance_name == @\\\"{databaseName}\\\"\\r\\n| where (object_name == \\\"Database Replica\\\" and counter_name == \\\"Transaction Delay\\\")\\r\\n        or\\r\\n        (object_name == \\\"Databases\\\" and counter_name == \\\"Write Transactions/sec\\\")\\r\\n// Transaction Delay reports cumulative delay in ms/second for all transactions. Derive average per-transaction delay by dividing by the number of write transactions for this database\\r\\n| project sample_time_utc, object_name, counter_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| summarize transaction_delay = sumif(value, counter_name == \\\"Transaction Delay\\\"),\\r\\n            write_transactions = sumif(value, counter_name == \\\"Write Transactions/sec\\\")\\r\\n            by sample_time_utc\\r\\n| project sample_time_utc, transaction_delay_per_transaction = iif(write_transactions != 0 and isnotempty(transaction_delay) and isnotempty(write_transactions), transaction_delay / write_transactions, real(null))\\r\\n| make-series transaction_delay_per_transaction = avg(transaction_delay_per_transaction) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}\\r\\n| project transaction_delay_per_transaction = series_fill_linear(transaction_delay_per_transaction), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Transaction delay",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "transaction_delay_per_transaction"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "transaction_delay_per_transaction",
                    "label": "Transaction delay",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "transaction_delay"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log flush rate`|The rate of writes to the transaction log, as the amount of data per second. Provided separately for the user database, and for the `tempdb` database.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transaction_log"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Transaction delay`|The average delay encountered by each transaction to guarantee that committed data is hardened in the transaction log of synchronous commit replicas. The value is zero when the database does not have any availability group replicas with synchronous commit.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transaction_delay"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (replica_type != \\\"Primary\\\" and object_name == \\\"Database Replica\\\" and counter_name in (\\\"Log Bytes Received/sec\\\",\\\"Redone Bytes/sec\\\"))\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Secondary replica rates",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log Bytes Received/sec",
                    "label": "Log receive rate",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Redone Bytes/sec",
                    "label": "Redo rate",
                    "color": "orange"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "redo"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where instance_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where replica_type != \\\"Primary\\\" and object_name == \\\"Database Replica\\\" and counter_name in (\\\"Recovery Queue\\\")\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Secondary replica redo queue",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Recovery Queue",
                    "label": "Redo queue",
                    "color": "purple"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 3,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "secondary_replica_redo_queue"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log receive rate`, `Redo rate`|The rates of receiving and applying transaction log on a secondary replica. When redo rate is comparable to log receive rate, data latency on a secondary replica is minimal; in case of failover to this secondary replica, failover time is minimal as well. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198629).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_secondary_redo_rate"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Redo queue`|The amount of transaction log data waiting to be redone, or applied to data files. When redo queue is low, data latency on a secondary replica is minimal; in case of failover to this secondary replica, failover time is minimal as well. This metric is only available for secondary replicas. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198629).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_secondary_redo_queue"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_single_database_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "transactions_and_replicas_group"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let metric = datatable(key:int, metric_name:string, tile_ordinal:int) [\\r\\n1, \\\"Data\\\", 1,\\r\\n1, \\\"Log\\\", 2,\\r\\n1, \\\"Tempdb data\\\", 3,\\r\\n1, \\\"Tempdb log\\\", 4,\\r\\n1, \\\"Local storage\\\", 5,\\r\\n1, \\\"Query store\\\", 6\\r\\n];\\r\\nlet storage_timeline = (\\r\\nsqldb_single_database_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner metric on key\\r\\n| project key, metric_name, sample_time_utc, \\r\\n          data_size_used_ratio = data_size_used_mb / data_max_size_mb, \\r\\n          log_size_used_ratio = log_size_used_mb / log_max_size_mb, \\r\\n          tempdb_data_size_used_ratio = tempdb_data_size_used_mb / tempdb_data_max_size_mb, \\r\\n          tempdb_log_size_used_ratio = tempdb_log_size_used_mb / tempdb_log_max_size_mb, \\r\\n          local_storage_size_ratio = toreal(used_local_storage_size_mb) / toreal(max_local_storage_size_mb),\\r\\n          query_store_size_ratio = toreal(query_store_size_mb) / toreal(query_store_max_size_mb),\\r\\n          data_max_size_mb\\r\\n| extend metric_value = case(\\r\\n                            metric_name == \\\"Data\\\" and data_max_size_mb != -1, data_size_used_ratio,\\r\\n                            metric_name == \\\"Log\\\", log_size_used_ratio,\\r\\n                            metric_name == \\\"Tempdb data\\\", tempdb_data_size_used_ratio,\\r\\n                            metric_name == \\\"Tempdb log\\\", tempdb_log_size_used_ratio,\\r\\n                            metric_name == \\\"Local storage\\\", todecimal(local_storage_size_ratio),\\r\\n                            metric_name == \\\"Query store\\\", todecimal(query_store_size_ratio),\\r\\n                            decimal(null)\\r\\n                            )\\r\\n| make-series metric_value = avg(metric_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by metric_name, key\\r\\n);\\r\\nsqldb_single_database_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| top 1 by sample_time_utc desc\\r\\n| project key = int(1), last_data_size_used_ratio = data_size_used_mb / data_max_size_mb,\\r\\n                        last_log_size_used_ratio = log_size_used_mb / log_max_size_mb, \\r\\n                        last_tempdb_data_size_used_ratio = tempdb_data_size_used_mb / tempdb_data_max_size_mb, \\r\\n                        last_tempdb_log_size_used_ratio = tempdb_log_size_used_mb / tempdb_log_max_size_mb,  \\r\\n                        last_local_storage_size_ratio = toreal(used_local_storage_size_mb) / toreal(max_local_storage_size_mb),\\r\\n                        last_query_store_size_ratio = toreal(query_store_size_mb) / toreal(query_store_max_size_mb),\\r\\n                        data_max_size_mb,\\r\\n                        log_max_size_mb,\\r\\n                        tempdb_data_max_size_mb,\\r\\n                        tempdb_log_max_size_mb,\\r\\n                        max_local_storage_size_mb,\\r\\n                        query_store_max_size_mb\\r\\n| join kind=inner metric on key\\r\\n| extend metric_value = case(\\r\\n                            metric_name == \\\"Data\\\" and data_max_size_mb != -1, last_data_size_used_ratio,\\r\\n                            metric_name == \\\"Log\\\", last_log_size_used_ratio,\\r\\n                            metric_name == \\\"Tempdb data\\\", last_tempdb_data_size_used_ratio,\\r\\n                            metric_name == \\\"Tempdb log\\\", last_tempdb_log_size_used_ratio,\\r\\n                            metric_name == \\\"Local storage\\\", todecimal(last_local_storage_size_ratio),\\r\\n                            metric_name == \\\"Query store\\\", todecimal(last_query_store_size_ratio),\\r\\n                            decimal(null)\\r\\n                            ),\\r\\n        tooltip_max_size = format_bytes(case(\\r\\n                                            metric_name == \\\"Data\\\", data_max_size_mb,\\r\\n                                            metric_name == \\\"Log\\\", log_max_size_mb,\\r\\n                                            metric_name == \\\"Tempdb data\\\", tempdb_data_max_size_mb,\\r\\n                                            metric_name == \\\"Tempdb log\\\", tempdb_log_max_size_mb,\\r\\n                                            metric_name == \\\"Local storage\\\", todecimal(max_local_storage_size_mb),\\r\\n                                            metric_name == \\\"Query store\\\", todecimal(query_store_max_size_mb),\\r\\n                                            decimal(null)\\r\\n                                            ) * 1024 * 1024)\\r\\n| summarize last_metric_value = max(metric_value),\\r\\n            tooltip_max_size = take_any(tooltip_max_size),\\r\\n            data_max_size_mb = take_any(data_max_size_mb)\\r\\n            by metric_name, tile_ordinal\\r\\n| join kind=leftouter storage_timeline on metric_name\\r\\n| project sample_time_utc, metric_value, metric_name, last_metric_value, tile_ordinal, tooltip_max_size = iif(metric_name == \\\"Data\\\" and data_max_size_mb == -1, \\\"N/A\\\", tooltip_max_size)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "Storage consumption",
        "noDataMessage": "There is no data for specified parameters.",
        "queryType": 9,
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "metric_name",
            "formatter": 1,
            "tooltipFormat": {
              "tooltip": "Percentage of maximum size ([\"tooltip_max_size\"]). For more information, see Storage consumption details."
            }
          },
          "rightContent": {
            "columnMatch": "last_metric_value",
            "formatter": 12,
            "formatOptions": {
              "min": 0,
              "max": 1,
              "palette": "greenRed"
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "percent",
                "minimumFractionDigits": 2
              },
              "emptyValCustomText": "-"
            }
          },
          "secondaryContent": {
            "columnMatch": "metric_value",
            "formatter": 9,
            "formatOptions": {
              "min": 0,
              "max": 1,
              "palette": "greenRed"
            }
          },
          "showBorder": false,
          "sortCriteriaField": "tile_ordinal",
          "sortOrderField": 1
        },
        "graphSettings": {
          "type": 0
        },
        "chartSettings": {
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "Maximum query store",
              "color": "redBright"
            },
            {
              "seriesName": "Persistent version store",
              "color": "orange"
            },
            {
              "seriesName": "Used query store",
              "color": "green"
            },
            {
              "seriesName": "Online index version store",
              "color": "pink"
            },
            {
              "seriesName": "Hyperscale RBPEX",
              "color": "blue"
            }
          ],
          "showDataPoints": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 0,
              "options": {
                "style": "percent",
                "useGrouping": true,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "sqldb_single_database_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "storage_consumption"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Storage consumption details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Metrics on these charts describe storage space consumption in data and transaction log files for this database and for the `tempdb` database of the same database engine instance. Space consumed within data files by specialized data stores, such as Persistent Version Store, Query Store, etc. is provided as well. Data is collected from [sys.database_files](https://go.microsoft.com/fwlink/?linkid=2198860), [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647), and several other DMVs."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "storage_utilization_details_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used data\\\",\\r\\n1, \\\"Allocated data\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_single_database_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, data_size_used_mb, data_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used data\\\", data_size_used_mb,\\r\\n                      metric_name == \\\"Allocated data\\\", data_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Data storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used data",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "data_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used log\\\",\\r\\n1, \\\"Allocated log\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_single_database_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, log_size_used_mb, log_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used log\\\", log_size_used_mb,\\r\\n                      metric_name == \\\"Allocated log\\\", log_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Transaction log storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated log",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used log",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "log_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used tempdb data\\\",\\r\\n1, \\\"Allocated tempdb data\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_single_database_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, tempdb_data_size_used_mb, tempdb_data_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used tempdb data\\\", tempdb_data_size_used_mb,\\r\\n                      metric_name == \\\"Allocated tempdb data\\\", tempdb_data_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Tempdb data storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated tempdb data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used tempdb data",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "tempdb_data_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used tempdb log\\\",\\r\\n1, \\\"Allocated tempdb log\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_single_database_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, tempdb_log_size_used_mb, tempdb_log_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used tempdb log\\\", tempdb_log_size_used_mb,\\r\\n                      metric_name == \\\"Allocated tempdb log\\\", tempdb_log_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Tempdb transaction log storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated tempdb log",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used tempdb log",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "tempdb_log_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Persistent version store\\\",\\r\\n1, \\\"Online index version store\\\",\\r\\n1, \\\"Used query store\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_single_database_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, rbpex_size_mb, persistent_version_store_size_mb, online_index_version_store_size_mb, query_store_size_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Persistent version store\\\", persistent_version_store_size_mb,\\r\\n                      metric_name == \\\"Online index version store\\\", online_index_version_store_size_mb,\\r\\n                      metric_name == \\\"Used query store\\\", todecimal(query_store_size_mb),\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Special purpose data storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Persistent version store",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Used query store",
                    "color": "green"
                  },
                  {
                    "seriesName": "Online index version store",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Hyperscale RBPEX",
                    "color": "blue"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "special_purpose_stores"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "sqldb_single_database_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "storage_consumption_details_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Storage IO statistics",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Metrics on these charts describe storage IO statistics including IOPS, throughput, and latency for this database and for the `tempdb` database of the same database engine instance. Separate charts are provided for reads and writes. Data is collected from [sys.dm_io_virtual_file_stats()](https://go.microsoft.com/fwlink/?linkid=2198746)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "storage_io_stats_help"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "ca53e0e9-7129-4b85-b842-35b42d1ab5c4",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "IOPS",
                  "subTarget": "IOPS",
                  "style": "link",
                  "linkIsContextBlade": true
                },
                {
                  "id": "8b5fd7cb-85e0-4912-aaf3-de7c1b10d7d4",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Throughput",
                  "subTarget": "Throughput",
                  "style": "link"
                },
                {
                  "id": "f6a93425-3f64-42f3-8715-4d59849ff645",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Latency",
                  "subTarget": "Latency",
                  "style": "link"
                }
              ]
            },
            "name": "storage_io_stats_navigation"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, io_database_id, num_of_reads, io_snapshot_sample_ms\\r\\n| sort by io_database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_reads = iif(num_of_reads >= prev(num_of_reads) and io_database_id == prev(io_database_id) and file_id == prev(file_id), num_of_reads - prev(num_of_reads), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| extend iops = toreal(delta_num_of_reads) / delta_io_snapshot_sample_ms * 1000\\r\\n| summarize iops = sum(iops) by sample_time_utc, file_type, io_database_id\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), iops\\r\\n| make-series metric = avg(iops) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Read IOPS",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Log",
                    "color": "green"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "tempdb | Log",
                    "color": "greenDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "IOPS"
            },
            "name": "read_iops"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, io_database_id, num_of_writes, io_snapshot_sample_ms\\r\\n| sort by io_database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_writes = iif(num_of_writes >= prev(num_of_writes) and io_database_id == prev(io_database_id) and file_id == prev(file_id), num_of_writes - prev(num_of_writes), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| extend iops = toreal(delta_num_of_writes) / delta_io_snapshot_sample_ms * 1000\\r\\n| summarize iops = sum(iops) by sample_time_utc, file_type, io_database_id\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), iops\\r\\n| make-series metric = avg(iops) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Write IOPS",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "tempdb | Log",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Log",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "Data",
                    "color": "red"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "redDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "IOPS"
            },
            "name": "write_iops"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, io_database_id, num_of_bytes_read, io_snapshot_sample_ms\\r\\n| sort by io_database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_bytes_read = iif(num_of_bytes_read >= prev(num_of_bytes_read) and io_database_id == prev(io_database_id) and file_id == prev(file_id), num_of_bytes_read - prev(num_of_bytes_read), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and io_database_id == prev(io_database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_bytes_read = sum(delta_num_of_bytes_read) by sample_time_utc, file_type, io_database_id, delta_io_snapshot_sample_ms\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), delta_read_throughput = toreal(delta_num_of_bytes_read) / delta_io_snapshot_sample_ms * 1000\\r\\n| make-series metric = avg(delta_read_throughput) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Read throughput",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Log",
                    "color": "green"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "tempdb | Log",
                    "color": "greenDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Throughput"
            },
            "name": "read_throughput"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, io_database_id, num_of_bytes_written, io_snapshot_sample_ms\\r\\n| sort by io_database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_bytes_written = iif(num_of_bytes_written >= prev(num_of_bytes_written) and io_database_id == prev(io_database_id) and file_id == prev(file_id), num_of_bytes_written - prev(num_of_bytes_written), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and io_database_id == prev(io_database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_bytes_written = sum(delta_num_of_bytes_written) by sample_time_utc, file_type, io_database_id, delta_io_snapshot_sample_ms\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), delta_write_throughput = toreal(delta_num_of_bytes_written) / delta_io_snapshot_sample_ms * 1000\\r\\n| make-series metric = avg(delta_write_throughput) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Write throughput",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "tempdb | Log",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Data",
                    "color": "red"
                  },
                  {
                    "seriesName": "Log",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "redDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Throughput"
            },
            "name": "write_throughput"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, io_database_id, num_of_reads, io_stall_read_ms, io_snapshot_sample_ms\\r\\n| sort by io_database_id asc, file_id asc, sample_time_utc asc\\r\\n| extend delta_num_of_reads = iif(num_of_reads >= prev(num_of_reads) and io_database_id == prev(io_database_id) and file_id == prev(file_id), num_of_reads - prev(num_of_reads), long(null)),\\r\\n         delta_io_stall_read_ms = iif(io_stall_read_ms >= prev(io_stall_read_ms) and io_database_id == prev(io_database_id) and file_id == prev(file_id), io_stall_read_ms - prev(io_stall_read_ms), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and io_database_id == prev(io_database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_reads = sum(delta_num_of_reads),\\r\\n            delta_io_stall_read_ms = sum(delta_io_stall_read_ms)\\r\\n  by sample_time_utc, file_type, io_database_id\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), delta_read_latency_ms = iif(delta_num_of_reads != 0, toreal(delta_io_stall_read_ms) / delta_num_of_reads, real(null))\\r\\n| make-series metric = avg(delta_read_latency_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Read latency",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log",
                    "color": "green"
                  },
                  {
                    "seriesName": "Data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "tempdb | Log",
                    "color": "greenDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Latency"
            },
            "name": "read_latency"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, io_database_id, num_of_writes, io_stall_write_ms, io_snapshot_sample_ms\\r\\n| sort by io_database_id asc, file_id asc, sample_time_utc asc\\r\\n| extend delta_num_of_writes = iif(num_of_writes >= prev(num_of_writes) and io_database_id == prev(io_database_id) and file_id == prev(file_id), num_of_writes - prev(num_of_writes), long(null)),\\r\\n         delta_io_stall_write_ms = iif(io_stall_write_ms >= prev(io_stall_write_ms) and io_database_id == prev(io_database_id) and file_id == prev(file_id), io_stall_write_ms - prev(io_stall_write_ms), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and io_database_id == prev(io_database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_writes = sum(delta_num_of_writes),\\r\\n            delta_io_stall_write_ms = sum(delta_io_stall_write_ms)\\r\\n  by sample_time_utc, file_type, io_database_id\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), delta_write_latency_ms = iif(delta_num_of_writes != 0, toreal(delta_io_stall_write_ms) / delta_num_of_writes, real(null))\\r\\n| make-series metric = avg(delta_write_latency_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Write latency",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "Data",
                    "color": "red"
                  },
                  {
                    "seriesName": "tempdb | Log",
                    "color": "orange"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "redDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Latency"
            },
            "name": "write_latency"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "sqldb_single_database_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "storage_io_stats_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "287d84d2-28ab-471d-822f-00fe825d3edc",
            "version": "KqlParameterItem/1.0",
            "name": "propertySampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "property_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| make-series metric = count() default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No database property samples are available",
        "timeBrushParameterName": "timeRange",
        "exportParameterName": "propertyHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "purple"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "property_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_samples = count()\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No database property samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "property_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "662fc17f-ac90-47b3-b9e1-5630c924e154",
            "version": "KqlParameterItem/1.0",
            "name": "propertyLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = max(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "61ec378d-5ee1-46ba-88d4-f895a3ac1a4b",
            "version": "KqlParameterItem/1.0",
            "name": "propertyHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_properties\\r\\n| where sample_time_utc between (todatetime(\\\"{propertyHistoricalSample:$.x}\\\") .. (todatetime(\\\"{propertyHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = min(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "d55daf33-5e18-474a-9f0c-04b540096ec8",
            "version": "KqlParameterItem/1.0",
            "name": "propertySampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "propertySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "propertyLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "propertySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "propertyHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "propertyLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "property_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "selected_property_sample"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project logical_cpu_count, db_scoped_configs = todynamic(notable_db_scoped_configs)\\r\\n| mv-expand db_scoped_configs\\r\\n| mv-expand name=db_scoped_configs.name to typeof(string), value = db_scoped_configs.value to typeof(string), value_for_secondary = db_scoped_configs.value_for_secondary to typeof(string)\\r\\n| extend note_icon = case(\\r\\n                         name == \\\"MAXDOP\\\" and logical_cpu_count > 8 and (toint(value) > 8 or toint(value) == 0 or toint(value_for_secondary) > 8 or toint(value_for_secondary) == 0), \\\"warning\\\", \\r\\n                         name == \\\"MAXDOP\\\" and toint(value) == 1, \\\"info\\\", \\r\\n                         \\\"\\\"\\r\\n                         ), \\r\\n         note_text = case(\\r\\n                         name == \\\"MAXDOP\\\" and toint(value) == 1, \\\"Query parallelism is disabled\\\", \\r\\n                         name == \\\"MAXDOP\\\",\\\"Configure 'MAXDOP' as recommended\\\",\\r\\n                         \\\"\\\"\\r\\n                         ),\\r\\n         note_url = case(\\r\\n                        name == \\\"MAXDOP\\\",\\\"https://go.microsoft.com/fwlink/?linkid=2198634\\\",\\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away db_scoped_configs, logical_cpu_count\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "name",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Database-scoped configurations are shown if set to a non-default value, or if they are commonly used"
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "name",
                    "label": "Database configuration name"
                  },
                  {
                    "columnId": "value",
                    "label": "Value"
                  },
                  {
                    "columnId": "value_for_secondary",
                    "label": "Value for secondary"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "db_scoped_configurations"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"database_create_time\\\",\\r\\n1, \\\"database_engine_start_time_utc\\\",\\r\\n1, \\\"database_engine_build_time\\\",\\r\\n1, \\\"last_good_checkdb_time\\\"\\r\\n];\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, create_date, database_engine_start_time_utc, database_engine_build_time, last_good_checkdb_time\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"database_create_time\\\", create_date,\\r\\n                            property_name == \\\"database_engine_start_time_utc\\\", database_engine_start_time_utc,\\r\\n                            property_name == \\\"database_engine_build_time\\\", database_engine_build_time,\\r\\n                            property_name == \\\"last_good_checkdb_time\\\", last_good_checkdb_time,\\r\\n                            datetime(null)\\r\\n                            )\\r\\n| project-away create_date, database_engine_start_time_utc, database_engine_build_time, last_good_checkdb_time\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\"), \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\"), \\\"DBCC CHECKDB was never executed on this database\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\"), \\\"https://go.microsoft.com/fwlink/?linkid=2198749\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Values are shown in the local time of the database engine instance"
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "database_properties_datetime"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"is_read_only\\\",\\r\\n1, \\\"is_auto_shrink_on\\\",\\r\\n1, \\\"is_auto_create_stats_on\\\",\\r\\n1, \\\"is_auto_update_stats_on\\\",\\r\\n1, \\\"is_auto_update_stats_async_on\\\",\\r\\n1, \\\"is_read_committed_snapshot_on\\\",\\r\\n1, \\\"is_parameterization_forced\\\",\\r\\n1, \\\"is_subscribed\\\",\\r\\n1, \\\"is_encrypted\\\",\\r\\n1, \\\"is_accelerated_database_recovery_on\\\",\\r\\n1, \\\"is_cdc_enabled\\\",\\r\\n1, \\\"is_change_feed_enabled\\\",\\r\\n1, \\\"is_ledger_on\\\"\\r\\n];\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, is_read_only, is_auto_shrink_on, is_auto_create_stats_on, is_auto_update_stats_on, is_auto_update_stats_async_on, is_read_committed_snapshot_on, is_parameterization_forced, is_subscribed, is_encrypted, is_accelerated_database_recovery_on, is_cdc_enabled, is_change_feed_enabled, is_ledger_on \\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"is_read_only\\\", is_read_only,\\r\\n                            property_name == \\\"is_auto_shrink_on\\\", is_auto_shrink_on,\\r\\n                            property_name == \\\"is_auto_create_stats_on\\\", is_auto_create_stats_on,\\r\\n                            property_name == \\\"is_auto_update_stats_on\\\", is_auto_update_stats_on,\\r\\n                            property_name == \\\"is_auto_update_stats_async_on\\\", is_auto_update_stats_async_on,\\r\\n                            property_name == \\\"is_read_committed_snapshot_on\\\", is_read_committed_snapshot_on,\\r\\n                            property_name == \\\"is_parameterization_forced\\\", is_parameterization_forced,\\r\\n                            property_name == \\\"is_subscribed\\\", is_subscribed,\\r\\n                            property_name == \\\"is_encrypted\\\", is_encrypted,\\r\\n                            property_name == \\\"is_accelerated_database_recovery_on\\\", is_accelerated_database_recovery_on,\\r\\n                            property_name == \\\"is_cdc_enabled\\\", is_cdc_enabled,\\r\\n                            property_name == \\\"is_change_feed_enabled\\\", is_change_feed_enabled,\\r\\n                            property_name == \\\"is_ledger_on\\\", is_ledger_on,\\r\\n                            bool(null)\\r\\n                            )\\r\\n| project-away is_read_only, is_auto_shrink_on, is_auto_create_stats_on, is_auto_update_stats_on, is_auto_update_stats_async_on, is_read_committed_snapshot_on, is_parameterization_forced, is_subscribed, is_encrypted, is_accelerated_database_recovery_on, is_cdc_enabled, is_change_feed_enabled, is_ledger_on\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"is_accelerated_database_recovery_on\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"is_auto_create_stats_on\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"is_auto_shrink_on\\\" and property_value == true, \\\"warning\\\", \\r\\n                        property_name == \\\"is_auto_update_stats_on\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"is_cdc_enabled\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_change_feed_enabled\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_encrypted\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"is_ledger_on\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_parameterization_forced\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_read_committed_snapshot_on\\\" and property_value == false, \\\"info\\\", \\r\\n                        property_name == \\\"is_read_only\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_subscribed\\\" and property_value == true, \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"is_accelerated_database_recovery_on\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"is_auto_create_stats_on\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"is_auto_shrink_on\\\" and property_value == true, \\\"Recommended value is 'Disabled'\\\", \\r\\n                        property_name == \\\"is_auto_update_stats_on\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"is_cdc_enabled\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_change_feed_enabled\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_encrypted\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"is_ledger_on\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_parameterization_forced\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_read_committed_snapshot_on\\\" and property_value == false, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_read_only\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_subscribed\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"is_accelerated_database_recovery_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198635\\\", \\r\\n                        property_name == \\\"is_auto_create_stats_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198642\\\", \\r\\n                        property_name == \\\"is_auto_shrink_on\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198740\\\", \\r\\n                        property_name == \\\"is_auto_update_stats_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198645\\\", \\r\\n                        property_name == \\\"is_cdc_enabled\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198649\\\", \\r\\n                        property_name == \\\"is_change_feed_enabled\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198748\\\", \\r\\n                        property_name == \\\"is_encrypted\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198852\\\", \\r\\n                        property_name == \\\"is_ledger_on\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198864\\\", \\r\\n                        property_name == \\\"is_parameterization_forced\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198745\\\", \\r\\n                        property_name == \\\"is_read_committed_snapshot_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198854\\\", \\r\\n                        property_name == \\\"is_read_only\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198731\\\", \\r\\n                        property_name == \\\"is_subscribed\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198631\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Inactive",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "database_properties_boolean"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"database_id\\\",\\r\\n1, \\\"logical_cpu_count\\\",\\r\\n1, \\\"database_engine_memory_mb\\\",\\r\\n1, \\\"dtus\\\",\\r\\n1, \\\"compatibility_level\\\",\\r\\n1, \\\"snapshot_isolation_state\\\",\\r\\n1, \\\"sos_target_memory_mb\\\",\\r\\n1, \\\"database_max_workers\\\",\\r\\n1, \\\"database_max_data_iops\\\",\\r\\n1, \\\"database_max_log_rate_mbps\\\",\\r\\n1, \\\"database_max_memory_grant_percent\\\",\\r\\n1, \\\"elastic_pool_max_workers\\\",\\r\\n1, \\\"elastic_pool_max_data_iops\\\",\\r\\n1, \\\"elastic_pool_max_log_rate_mbps\\\",\\r\\n1, \\\"database_engine_max_workers\\\"\\r\\n];\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, database_id, logical_cpu_count, database_engine_memory_mb, dtus, compatibility_level, snapshot_isolation_state, sos_target_memory_mb, database_max_workers, database_max_data_iops, database_max_log_rate_mbps, database_max_memory_grant_percent, elastic_pool_max_workers, elastic_pool_max_data_iops, elastic_pool_max_log_rate_mbps, database_engine_max_workers\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"database_id\\\", toreal(database_id),\\r\\n                            property_name == \\\"logical_cpu_count\\\", toreal(logical_cpu_count),\\r\\n                            property_name == \\\"database_engine_memory_mb\\\", toreal(database_engine_memory_mb),\\r\\n                            property_name == \\\"dtus\\\", toreal(dtus),\\r\\n                            property_name == \\\"compatibility_level\\\", toreal(compatibility_level),\\r\\n                            property_name == \\\"snapshot_isolation_state\\\", toreal(snapshot_isolation_state),\\r\\n                            property_name == \\\"sos_target_memory_mb\\\", toreal(sos_target_memory_mb),\\r\\n                            property_name == \\\"database_max_workers\\\", toreal(database_max_workers),\\r\\n                            property_name == \\\"database_max_data_iops\\\", toreal(database_max_data_iops),\\r\\n                            property_name == \\\"database_max_log_rate_mbps\\\", toreal(database_max_log_rate_mbps),\\r\\n                            property_name == \\\"database_max_memory_grant_percent\\\", toreal(database_max_memory_grant_percent),\\r\\n                            property_name == \\\"elastic_pool_max_workers\\\", toreal(elastic_pool_max_workers),\\r\\n                            property_name == \\\"elastic_pool_max_data_iops\\\", toreal(elastic_pool_max_data_iops),\\r\\n                            property_name == \\\"elastic_pool_max_log_rate_mbps\\\", toreal(elastic_pool_max_log_rate_mbps),\\r\\n                            property_name == \\\"database_engine_max_workers\\\", toreal(database_engine_max_workers),\\r\\n                            real(null)\\r\\n                            )\\r\\n| project-away database_id, logical_cpu_count, database_engine_memory_mb, dtus, compatibility_level, snapshot_isolation_state, sos_target_memory_mb, database_max_workers, database_max_data_iops, database_max_log_rate_mbps, database_max_memory_grant_percent, elastic_pool_max_workers, elastic_pool_max_data_iops, elastic_pool_max_log_rate_mbps, database_engine_max_workers\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"compatibility_level\\\" and property_value <= 120, \\\"warning\\\", \\r\\n                        property_name == \\\"snapshot_isolation_state\\\" and property_value != 1, \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"compatibility_level\\\" and property_value <= 120, \\\"Latest compatibility level includes latest improvements\\\", \\r\\n                        property_name == \\\"snapshot_isolation_state\\\" and property_value != 1, \\\"Non-default value\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"compatibility_level\\\" and property_value <= 120, \\\"https://go.microsoft.com/fwlink/?linkid=2198650\\\", \\r\\n                        property_name == \\\"snapshot_isolation_state\\\" and property_value != 1, \\\"https://go.microsoft.com/fwlink/?linkid=2198854\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "database_properties_number"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"collation_name\\\",\\r\\n1, \\\"updateability\\\",\\r\\n1, \\\"state_desc\\\",\\r\\n1, \\\"log_reuse_wait_desc\\\",\\r\\n1, \\\"delayed_durability_desc\\\",\\r\\n1, \\\"query_store_actual_state_desc\\\",\\r\\n1, \\\"query_store_query_capture_mode_desc\\\",\\r\\n1, \\\"force_last_good_plan_actual_state\\\",\\r\\n1, \\\"create_index_actual_state\\\",\\r\\n1, \\\"drop_index_actual_state\\\",\\r\\n1, \\\"service_level_objective_long\\\",\\r\\n1, \\\"elastic_pool_name\\\",\\r\\n1, \\\"service_tier\\\"\\r\\n];\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, collation_name, updateability, state_desc, log_reuse_wait_desc, delayed_durability_desc, query_store_actual_state_desc, query_store_query_capture_mode_desc, force_last_good_plan_actual_state, create_index_actual_state, drop_index_actual_state, service_level_objective_long, elastic_pool_name, service_tier\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"collation_name\\\", collation_name,\\r\\n                            property_name == \\\"updateability\\\", updateability,\\r\\n                            property_name == \\\"state_desc\\\", state_desc,\\r\\n                            property_name == \\\"log_reuse_wait_desc\\\", log_reuse_wait_desc,\\r\\n                            property_name == \\\"delayed_durability_desc\\\", delayed_durability_desc,\\r\\n                            property_name == \\\"query_store_actual_state_desc\\\", query_store_actual_state_desc,\\r\\n                            property_name == \\\"query_store_query_capture_mode_desc\\\", query_store_query_capture_mode_desc,\\r\\n                            property_name == \\\"force_last_good_plan_actual_state\\\", force_last_good_plan_actual_state,\\r\\n                            property_name == \\\"create_index_actual_state\\\", create_index_actual_state,\\r\\n                            property_name == \\\"drop_index_actual_state\\\", drop_index_actual_state,\\r\\n                            property_name == \\\"service_level_objective_long\\\", service_level_objective_long,\\r\\n                            property_name == \\\"elastic_pool_name\\\", elastic_pool_name,\\r\\n                            property_name == \\\"service_tier\\\", service_tier,\\r\\n                            \\\"\\\"\\r\\n                            )\\r\\n| project-away collation_name, state_desc, log_reuse_wait_desc, delayed_durability_desc, query_store_actual_state_desc, query_store_query_capture_mode_desc, force_last_good_plan_actual_state, create_index_actual_state, drop_index_actual_state, service_level_objective_long, elastic_pool_name, service_tier\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"delayed_durability_desc\\\" and property_value != \\\"DISABLED\\\", \\\"info\\\", \\r\\n                        property_name == \\\"force_last_good_plan_actual_state\\\" and property_value != \\\"ON\\\" and updateability == \\\"READ_WRITE\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"query_store_actual_state_desc\\\" and property_value != \\\"READ_WRITE\\\" and updateability == \\\"READ_WRITE\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"state_desc\\\" and property_value != \\\"ONLINE\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"updateability\\\" and property_value == \\\"READ_ONLY\\\", \\\"info\\\", \\r\\n                        property_name == \\\"query_store_query_capture_mode_desc\\\" and property_value != \\\"AUTO\\\" and updateability == \\\"READ_WRITE\\\", \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"delayed_durability_desc\\\" and property_value != \\\"DISABLED\\\", \\\"Non-default value\\\", \\r\\n                        property_name == \\\"force_last_good_plan_actual_state\\\" and property_value != \\\"ON\\\" and updateability == \\\"READ_WRITE\\\", \\\"Recommended value is 'ON'\\\", \\r\\n                        property_name == \\\"query_store_actual_state_desc\\\" and property_value != \\\"READ_WRITE\\\" and updateability == \\\"READ_WRITE\\\", \\\"Recommended value is 'READ_WRITE'\\\", \\r\\n                        property_name == \\\"state_desc\\\" and property_value != \\\"ONLINE\\\", \\\"Unexpected value, investigate\\\", \\r\\n                        property_name == \\\"updateability\\\" and property_value == \\\"READ_ONLY\\\", \\\"Replica or read-only database\\\", \\r\\n                        property_name == \\\"query_store_query_capture_mode_desc\\\" and property_value != \\\"AUTO\\\" and updateability == \\\"READ_WRITE\\\", \\\"Non-default value\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"delayed_durability_desc\\\" and property_value != \\\"DISABLED\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198732\\\", \\r\\n                        property_name == \\\"force_last_good_plan_actual_state\\\" and property_value != \\\"ON\\\" and updateability == \\\"READ_WRITE\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198737\\\", \\r\\n                        property_name == \\\"query_store_actual_state_desc\\\" and property_value != \\\"READ_WRITE\\\" and updateability == \\\"READ_WRITE\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198632\\\", \\r\\n                        property_name == \\\"state_desc\\\" and property_value != \\\"ONLINE\\\", \\\"\\\", \\r\\n                        property_name == \\\"updateability\\\" and property_value == \\\"READ_ONLY\\\", \\\"\\\", \\r\\n                        property_name == \\\"query_store_query_capture_mode_desc\\\" and property_value != \\\"AUTO\\\" and updateability == \\\"READ_WRITE\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198632\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away updateability\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "database_properties_string"
          },
          {
            "type": 1,
            "content": {
              "json": "Data is collected from [sys.databases](https://go.microsoft.com/fwlink/?linkid=2198730), [sys.database_scoped_configurations](https://go.microsoft.com/fwlink/?linkid=2198643), [sys.dm_os_sys_info](https://go.microsoft.com/fwlink/?linkid=2198867), and several other DMVs."
            },
            "name": "properties_and_config_help"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "properties_and_configuration_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "4335a005-6127-40cb-b8af-d028b7c0be31",
            "version": "KqlParameterItem/1.0",
            "name": "tableSampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "sqldb_single_database_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "table_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_table_metadata\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| make-series metric = dcount(sample_time_utc) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No table metadata samples are available",
        "timeBrushParameterName": "timeRange",
        "exportFieldName": "",
        "exportParameterName": "tableHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "turquoise"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tableSampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "table_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_table_metadata\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_samples = dcount(sample_time_utc)\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No table metadata samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "sqldb_single_database_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tableSampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "tables_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "75801860-acf2-4fdd-b12f-9ab8d2813617",
            "version": "KqlParameterItem/1.0",
            "name": "tableLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_table_metadata\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = max(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "aaa7c0f1-ae5e-41eb-ac7d-dac5d4b32546",
            "version": "KqlParameterItem/1.0",
            "name": "tableHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_table_metadata\\r\\n| where sample_time_utc between (todatetime(\\\"{tableHistoricalSample:$.x}\\\") .. (todatetime(\\\"{tableHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = min(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "a1f00d83-547b-4b3f-b85f-1cb244eec622",
            "version": "KqlParameterItem/1.0",
            "name": "tableSampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "tableSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "tableLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "tableSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "tableHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "tableLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "sqldb_single_database_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "table_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_table_metadata\\r\\n| where sample_time_utc == todatetime(\\\"{tableSampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_objects = count() by sample_time_utc\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\"), count_objects\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            },
            {
              "columnId": "count_objects",
              "label": "Tables"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "sqldb_single_database_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tableSampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "selected_table_sample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let current_snapshot = materialize(\\r\\nsqldb_single_database_table_metadata\\r\\n| where sample_time_utc == todatetime(\\\"{tableSampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project-away logical_server_name, database_name, logical_database_id, physical_database_id, replica_type\\r\\n| extend count_partitions = count_no_compression_partitions + count_row_compression_partitions + count_page_compression_partitions + count_columnstore_compression_partitions + count_columnstore_archive_compression_partitions,\\r\\n         total_used_size_mb = toreal(in_row_used_size_mb + lob_used_size_mb + row_overflow_used_size_mb),\\r\\n         total_reserved_size_mb = toreal(in_row_reserved_size_mb + lob_reserved_size_mb + row_overflow_reserved_size_mb)\\r\\n| extend used_allocations_label = strcat(round(100 * in_row_used_size_mb/total_used_size_mb, 2), \\\"% | \\\", round(100 * row_overflow_used_size_mb/total_used_size_mb, 2), \\\"% | \\\", round(100 * lob_used_size_mb/total_used_size_mb, 2), \\\"%\\\"),\\r\\n         compression_label = trim(\\\" [|] \\\", strcat(\\r\\n                                                 iif(count_no_compression_partitions > 0, \\\"None | \\\", \\\"\\\"),\\r\\n                                                 iif(count_row_compression_partitions > 0, \\\"Row | \\\", \\\"\\\"),\\r\\n                                                 iif(count_page_compression_partitions > 0, \\\"Page | \\\", \\\"\\\"),\\r\\n                                                 iif(count_columnstore_compression_partitions > 0, \\\"Columnstore | \\\", \\\"\\\"),\\r\\n                                                 iif(count_columnstore_archive_compression_partitions > 0, \\\"Columnstore archive | \\\", \\\"\\\")\\r\\n                                                 ))\\r\\n| extend used_allocations_label = iif(used_allocations_label == \\\"% | % | %\\\", \\\"-\\\", used_allocations_label)\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"temporal_type_desc\\\",\\\"durability_desc\\\",\\\"ledger_type_desc\\\"\\r\\n]);\\r\\nlet column_labels_number = dynamic(\\r\\n[\\r\\n\\\"count_no_compression_partitions\\\",\\\"count_row_compression_partitions\\\",\\\"count_page_compression_partitions\\\",\\\"count_columnstore_compression_partitions\\\",\\\"count_columnstore_archive_compression_partitions\\\",\\\"text_in_row_limit\\\"\\r\\n]);\\r\\nlet column_labels_number_id = dynamic(\\r\\n[\\r\\n\\\"schema_id\\\",\\\"database_id\\\"\\r\\n]);\\r\\nlet column_labels_number_mb = dynamic(\\r\\n[\\r\\n\\\"in_row_used_size_mb\\\",\\\"in_row_reserved_size_mb\\\",\\\"lob_used_size_mb\\\",\\\"lob_reserved_size_mb\\\",\\\"row_overflow_used_size_mb\\\",\\\"row_overflow_reserved_size_mb\\\"\\r\\n]);\\r\\nlet column_labels_bool = dynamic(\\r\\n[\\r\\n\\\"large_value_types_out_of_row\\\",\\\"is_memory_optimized\\\",\\\"is_tracked_by_cdc\\\",\\\"is_replicated\\\",\\\"is_external\\\",\\\"is_node\\\",\\\"is_edge\\\",\\\"is_dropped_ledger_table\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet table_details_string = (\\r\\ncurrent_snapshot\\r\\n| project object_id, temporal_type_desc, durability_desc, ledger_type_desc\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for numbers grid\\r\\nlet table_details_number = (\\r\\ncurrent_snapshot\\r\\n| project object_id, count_no_compression_partitions, count_row_compression_partitions, count_page_compression_partitions, count_columnstore_compression_partitions, count_columnstore_archive_compression_partitions, text_in_row_limit\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number to typeof(string) on (project column_label, column_value = tolong(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for id numbers grid\\r\\nlet table_details_number_id = (\\r\\ncurrent_snapshot\\r\\n| project object_id, schema_id, database_id\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_id to typeof(string) on (project column_label, column_value = toint(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_id = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for mb numbers grid\\r\\nlet table_details_number_mb = (\\r\\ncurrent_snapshot\\r\\n| project object_id, in_row_used_size_mb, in_row_reserved_size_mb, lob_used_size_mb, lob_reserved_size_mb, row_overflow_used_size_mb, row_overflow_reserved_size_mb\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_mb to typeof(string) on (project column_label, column_value = toreal(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_mb = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for boolean grid\\r\\nlet table_details_bool = (\\r\\ncurrent_snapshot\\r\\n| project object_id, large_value_types_out_of_row, is_memory_optimized, is_tracked_by_cdc, is_replicated, is_external, is_node, is_edge, is_dropped_ledger_table\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_bool to typeof(string) on (project column_label, column_value = toboolean(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_bool = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\ncurrent_snapshot\\r\\n| join table_details_string on object_id\\r\\n| join table_details_number on object_id\\r\\n| join table_details_number_id on object_id\\r\\n| join table_details_number_mb on object_id\\r\\n| join table_details_bool on object_id\\r\\n| project object_id, object_type, schema_name, object_name, count_rows, total_used_size_mb, total_reserved_size_mb, count_partitions, compression_partitions = count_partitions, allocation_used_size_mb = total_used_size_mb, lock_escalation_desc, used_allocations_label, compression_label, in_row_used_size_mb, lob_used_size_mb, row_overflow_used_size_mb, count_no_compression_partitions, count_row_compression_partitions, count_page_compression_partitions, count_columnstore_compression_partitions, count_columnstore_archive_compression_partitions, details_string, details_number, details_number_id, details_number_mb, details_bool\\r\\n| sort by tolower(schema_name) asc, tolower(object_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 2,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number",
            "parameterName": "details_number",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_id",
            "parameterName": "details_number_id",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_mb",
            "parameterName": "details_number_mb",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_bool",
            "parameterName": "details_bool",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          }
        ],
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "count_rows",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "count_partitions",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_used_size_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "total_reserved_size_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "compression_partitions",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"compression_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "count_no_compression_partitions",
                      "color": "green"
                    },
                    {
                      "columnName": "count_row_compression_partitions",
                      "color": "greenDark"
                    },
                    {
                      "columnName": "count_page_compression_partitions",
                      "color": "magenta"
                    },
                    {
                      "columnName": "count_columnstore_compression_partitions",
                      "color": "pink"
                    },
                    {
                      "columnName": "count_columnstore_archive_compression_partitions",
                      "color": "purple"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "None (green), Row (dark green), Page (magenta), Columnstore (pink), Columnstore archive (purple)"
              }
            },
            {
              "columnMatch": "allocation_used_size_mb",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"used_allocations_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "in_row_used_size_mb",
                      "color": "blue"
                    },
                    {
                      "columnName": "row_overflow_used_size_mb",
                      "color": "orange"
                    },
                    {
                      "columnName": "lob_used_size_mb",
                      "color": "red"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "In-row (blue), Overflow (orange), LOB (red)"
              }
            },
            {
              "columnMatch": "lock_escalation_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "!=",
                    "thresholdValue": "TABLE",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "used_allocations_label",
              "formatter": 5
            },
            {
              "columnMatch": "compression_label",
              "formatter": 5
            },
            {
              "columnMatch": "in_row_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "lob_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "row_overflow_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "count_no_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_row_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_page_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_columnstore_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_columnstore_archive_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_number",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_id",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_mb",
              "formatter": 5
            },
            {
              "columnMatch": "details_bool",
              "formatter": 5
            }
          ],
          "sortBy": [
            {
              "itemKey": "schema_name",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "object_id",
              "label": "Object ID"
            },
            {
              "columnId": "object_type",
              "label": "Object type"
            },
            {
              "columnId": "schema_name",
              "label": "Schema name"
            },
            {
              "columnId": "object_name",
              "label": "Object name"
            },
            {
              "columnId": "count_rows",
              "label": "Rows"
            },
            {
              "columnId": "total_used_size_mb",
              "label": "Used size (MB)"
            },
            {
              "columnId": "total_reserved_size_mb",
              "label": "Reserved size (MB)"
            },
            {
              "columnId": "count_partitions",
              "label": "Partitions"
            },
            {
              "columnId": "compression_partitions",
              "label": "Compression"
            },
            {
              "columnId": "allocation_used_size_mb",
              "label": "Allocation types"
            },
            {
              "columnId": "lock_escalation_desc",
              "label": "Lock escalation"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "schema_name",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "sqldb_single_database_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tableSampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "table_metadata"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Selected table details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_mb}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_number_mb"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_number"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8
            },
            "customWidth": "50",
            "name": "table_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_id}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8
            },
            "customWidth": "50",
            "name": "table_details_number_id"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_bool}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Inactive",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_bool"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "sqldb_single_database_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tableSampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "table_details"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "eb139db6-a5e2-4c94-aead-297fab717765",
            "version": "KqlParameterItem/1.0",
            "name": "activitySampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "activity_sample_type_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "dfaf53a4-40fc-486d-a130-437ff6b91eb2",
            "version": "KqlParameterItem/1.0",
            "name": "activitySampleSubType",
            "label": "Sample type",
            "type": 10,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"all\",\"label\":\"All\"},{\"value\":\"blocked\",\"label\":\"Blocked\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "all"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "customWidth": "50",
      "name": "activity_sample_subtype_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_active_sessions\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend blocking_session_id = iif(\\r\\n                                  blocking_session_id in (0, -4, -5), // Do not treat long latch waits as relevant blocking\\r\\n                                  int(null),\\r\\n                                  blocking_session_id\\r\\n                                  )\\r\\n| extend sample_subtype = iif(isnotempty(blocking_session_id), \\\"blocked\\\", \\\"not_blocked\\\")\\r\\n| where \\\"{activitySampleSubType}\\\" == \\\"all\\\" or (\\\"{activitySampleSubType}\\\" == \\\"blocked\\\" and sample_subtype == \\\"{activitySampleSubType}\\\")\\r\\n| make-series metric = dcount(sample_time_utc) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2 by sample_subtype\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No activity samples are available",
        "timeBrushParameterName": "timeRange",
        "exportFieldName": "",
        "exportParameterName": "activityHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "not_blocked",
              "label": "Not blocked",
              "color": "grayBlue"
            },
            {
              "seriesName": "blocked",
              "label": "Blocked",
              "color": "orange"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "activity_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_active_sessions\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_samples = dcount(sample_time_utc)\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples. Samples are not collected when there are no active sessions.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No activity samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "activity_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "8ef6f4e0-6f4b-4f96-bb11-1ea8fc44f3c1",
            "version": "KqlParameterItem/1.0",
            "name": "activityLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_active_sessions\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = max(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "0a1027de-5009-4fd2-8769-366714c9a903",
            "version": "KqlParameterItem/1.0",
            "name": "activityHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Selected time from the history chart is a binned time generated by make-series and is unlikely to match an actual sample.\\r\\n// Look up an actual sample within the sample group selected on the history chart, differentiating between samples in different series.\\r\\nsqldb_single_database_active_sessions\\r\\n| where sample_time_utc between (todatetime(\\\"{activityHistoricalSample:$.x}\\\") .. (todatetime(\\\"{activityHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend blocking_session_id = iif(blocking_session_id == 0, int(null), blocking_session_id)\\r\\n| extend sample_type = iif(isnotempty(blocking_session_id), \\\"blocked\\\", \\\"not_blocked\\\")\\r\\n| where sample_type == \\\"{activityHistoricalSample:$.series}\\\"\\r\\n| summarize sample_time_utc = min(sample_time_utc) // Selecting any sample within a sample group is valid. Use the earliest for determinism.\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "5734b987-5dff-4c5a-8b7f-019462c37c56",
            "version": "KqlParameterItem/1.0",
            "name": "activitySampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "activitySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "activityLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "activitySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "activityHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "activityLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "activity_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_active_sessions\\r\\n| where sample_time_utc == todatetime(\\\"{activitySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_sessions = count() by sample_time_utc\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\"), count_sessions\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            },
            {
              "columnId": "count_sessions",
              "label": "Active sessions"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "selected_activity_sample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// The sample to be displayed\\r\\nlet current_snapshot = materialize(\\r\\nsqldb_single_database_active_sessions\\r\\n| where sample_time_utc == todatetime(\\\"{activitySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project-away logical_server_name, database_name, logical_database_id, physical_database_id, replica_type\\r\\n| extend blocking_session_id = iif(\\r\\n                                  blocking_session_id in (0, -4, -5), // Do not treat long latch waits as relevant blocking\\r\\n                                  int(null),\\r\\n                                  blocking_session_id\\r\\n                                  )\\r\\n);\\r\\n// Blocking-related columns\\r\\nlet b = materialize(\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, blocking_session_id\\r\\n);\\r\\n// Assumption: blocking chains are at most 9 levels deep. If proven incorrect, introduce additional lookups\\r\\nlet head_blockers = materialize(\\r\\nb\\r\\n| lookup (b | project session_id, blocking_session_id2 = blocking_session_id) on $left.blocking_session_id == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id3 = blocking_session_id) on $left.blocking_session_id2 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id4 = blocking_session_id) on $left.blocking_session_id3 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id5 = blocking_session_id) on $left.blocking_session_id4 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id6 = blocking_session_id) on $left.blocking_session_id5 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id7 = blocking_session_id) on $left.blocking_session_id6 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id8 = blocking_session_id) on $left.blocking_session_id7 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id9 = blocking_session_id) on $left.blocking_session_id8 == $right.session_id\\r\\n| project session_id,\\r\\n          request_id,\\r\\n          head_blocking_session_id = coalesce(\\r\\n                                             blocking_session_id9,\\r\\n                                             blocking_session_id8,\\r\\n                                             blocking_session_id7,\\r\\n                                             blocking_session_id6,\\r\\n                                             blocking_session_id5,\\r\\n                                             blocking_session_id4,\\r\\n                                             blocking_session_id3,\\r\\n                                             blocking_session_id2,\\r\\n                                             blocking_session_id\\r\\n                                             )\\r\\n| where isnotempty(head_blocking_session_id)\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"session_status\\\",\\\"workload_group_name\\\",\\\"connection_id\\\",\\\"encrypt_option\\\",\\\"wait_resource\\\",\\\"transaction_isolation_level\\\",\\\"query_hash\\\",\\\"query_plan_hash\\\",\\\"session_cpu_time\\\",\\\"session_duration\\\"\\r\\n]);\\r\\nlet column_labels_number_count = dynamic(\\r\\n[\\r\\n\\\"session_logical_reads\\\",\\\"session_writes\\\",\\\"session_row_count\\\",\\\"request_row_count\\\",\\\"dop\\\",\\\"parallel_worker_count\\\"\\r\\n]);\\r\\nlet column_labels_number_id = dynamic(\\r\\n[\\r\\n\\\"database_id\\\",\\\"workload_group_id\\\",\\\"request_id\\\",\\\"sql_module_object_id\\\",\\\"blocking_session_id\\\"\\r\\n]);\\r\\nlet column_labels_number_kb = dynamic(\\r\\n[\\r\\n\\\"granted_memory\\\",\\\"requested_memory\\\",\\\"max_used_memory\\\",\\\"ideal_memory\\\"\\r\\n]);\\r\\nlet column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"login_time\\\",\\\"request_start_time\\\"\\r\\n]);\\r\\nlet column_labels_task_counts = dynamic(\\r\\n[\\r\\n\\\"pending\\\", \\\"runnable\\\", \\\"running\\\", \\\"suspended\\\", \\\"done\\\", \\\"spinloop\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet session_details_string = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, session_status, workload_group_name, connection_id, encrypt_option, wait_resource, transaction_isolation_level, query_hash, query_plan_hash, session_cpu_time = format_timespan(session_cpu_time_ms * 1ms, \\\"d.hh:mm:ss.fff\\\"), session_duration = format_timespan(session_total_elapsed_time_ms * 1ms, \\\"d.hh:mm:ss.fff\\\")\\r\\n| project session_id, request_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by session_id, request_id // for each session_id and request_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for count numbers grid\\r\\nlet session_details_number_count = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, session_logical_reads, session_writes, session_row_count, request_row_count, dop, parallel_worker_count\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_count to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_count = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// result set for id numbers grid\\r\\nlet session_details_number_id = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, database_id, workload_group_id, sql_module_object_id, blocking_session_id\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_id to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_id = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// result set for byte numbers grid\\r\\nlet session_details_number_kb = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, granted_memory = memory_grant_kb, requested_memory = requested_memory_kb, max_used_memory = max_used_memory_kb, ideal_memory = ideal_memory_kb\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_kb to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_kb = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// result set for datetime grid\\r\\nlet session_details_datetime = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, login_time, request_start_time\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_datetime = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\nlet session_details_task_counts = ( \\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, pending = pending_task_count, runnable = runnable_task_count, running = running_task_count, suspended = suspended_task_count, done = done_task_count, spinloop = spinloop_task_count\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_task_counts to typeof(string) on (project column_label, column_value = toint(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Task type\\\", column_label, \\\"Count\\\", column_value)\\r\\n| summarize task_counts = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// return last snapshot with json arrays for each detail grid\\r\\ncurrent_snapshot\\r\\n| lookup head_blockers on $left.session_id == $right.session_id and $left.request_id == $right.request_id\\r\\n| join session_details_string on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_number_count on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_number_id on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_number_kb on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_datetime on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_task_counts on session_id and $left.request_id == $right.request_id\\r\\n| join kind=leftouter (\\r\\n                      head_blockers\\r\\n                      | summarize count_blocked_sessions = count() by head_blocking_session_id\\r\\n                      ) on $left.session_id == $right.head_blocking_session_id\\r\\n| project request_total_elapsed_time_ms, request_duration = format_timespan(1ms * request_total_elapsed_time_ms, \\\"d.hh:mm:ss.fff\\\"), session_id, request_id, request_status, command, input_buffer_text, blocked_by = head_blocking_session_id, count_blocked_sessions, wait_type, wait_time = format_timespan(1ms * iif(wait_time_ms != 0, wait_time_ms, int(null)), \\\"d.hh:mm:ss.fff\\\"), open_transaction_count, request_cpu_time = format_timespan(1ms * request_cpu_time_ms, \\\"d.hh:mm:ss.fff\\\"), request_logical_reads, request_writes, percent_complete = iif(percent_complete == 0, real(null), percent_complete), tempdb_allocations_kb, tempdb_current_kb, sql_module_name, login_name, host_name, program_name, client_net_address,\\r\\n  statement_text_json = dynamic_to_json(pack(\\\"statement_text\\\", statement_text)), input_buffer_text_json = dynamic_to_json(pack(\\\"input_buffer_text\\\", input_buffer_text)),\\r\\n  session_wait_stats = iif(isempty(session_wait_stats), '[{\\\"wait_type\\\":\\\"\\\",\\\"wait_time_ms\\\":\\\"\\\",\\\"signal_wait_time_ms\\\":\\\"\\\",\\\"max_wait_time_ms\\\":\\\"\\\",\\\"waiting_tasks_count\\\":\\\"\\\"}]', session_wait_stats),\\r\\n  details_datetime, details_number_id, details_number_kb, details_string, details_number_count, task_counts\\r\\n| sort by count_blocked_sessions desc nulls last, request_total_elapsed_time_ms desc nulls last // blockers first, followed by sessions with longest running requests, then longest running sessions\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "title": "Active sessions",
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "session_wait_stats",
            "parameterName": "session_wait_stats",
            "parameterType": 1,
            "defaultValue": "[{\"wait_type\":\"\",\"wait_time_ms\":\"\",\"signal_wait_time_ms\":\"\",\"max_wait_time_ms\":\"\",\"waiting_tasks_count\":\"\"}]"
          },
          {
            "fieldName": "task_counts",
            "parameterName": "task_counts",
            "parameterType": 1,
            "defaultValue": "[{\"Task type\":\"\",\"Count\":\"\"}]"
          },
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_count",
            "parameterName": "details_number_count",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_id",
            "parameterName": "details_number_id",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_kb",
            "parameterName": "details_number_kb",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_datetime",
            "parameterName": "details_datetime",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "statement_text_json",
            "parameterName": "statement_text",
            "parameterType": 1,
            "defaultValue": "\"\""
          },
          {
            "fieldName": "input_buffer_text_json",
            "parameterName": "input_buffer_text",
            "parameterType": 1,
            "defaultValue": "\"\""
          }
        ],
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "request_total_elapsed_time_ms",
              "formatter": 5
            },
            {
              "columnMatch": "request_status",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "background",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "running",
                    "representation": "greenDark",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "runnable",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "sleeping",
                    "representation": "gray",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "suspended",
                    "representation": "yellow",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "command",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "SELECT",
                    "representation": "lightBlue",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "INSERT",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "UPDATE",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "DELETE",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "EXECUTE",
                    "representation": "grayBlue",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "MERGE",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "SELECT INTO",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "CREATE INDEX",
                    "representation": "turquoise",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "startsWith",
                    "thresholdValue": "COMMIT",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "contains",
                    "thresholdValue": "ROLLBACK",
                    "representation": "red",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "startsWith",
                    "thresholdValue": "DBCC",
                    "representation": "purple",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "startsWith",
                    "thresholdValue": "BACKUP",
                    "representation": "yellow",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "blocked_by",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "!=",
                    "thresholdValue": "0",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Session [\"session_id\"] is blocked. The head blocker of the blocking chain is session [\"blocked_by\"]."
              }
            },
            {
              "columnMatch": "count_blocked_sessions",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": ">",
                    "thresholdValue": "0",
                    "representation": "3",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Session [\"session_id\"] is a head blocker in a blocking chain. It blocks [\"count_blocked_sessions\"] other session(s)."
              }
            },
            {
              "columnMatch": "open_transaction_count",
              "formatter": 2
            },
            {
              "columnMatch": "percent_complete",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": 100,
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 1,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "statement_text_json",
              "formatter": 5
            },
            {
              "columnMatch": "input_buffer_text_json",
              "formatter": 5
            },
            {
              "columnMatch": "session_wait_stats",
              "formatter": 5
            },
            {
              "columnMatch": "details_datetime",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_id",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_kb",
              "formatter": 5
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_count",
              "formatter": 5
            },
            {
              "columnMatch": "task_counts",
              "formatter": 5
            }
          ],
          "filter": true,
          "labelSettings": [
            {
              "columnId": "request_duration",
              "label": "Request duration"
            },
            {
              "columnId": "session_id",
              "label": "Session ID"
            },
            {
              "columnId": "request_id",
              "label": "Request ID"
            },
            {
              "columnId": "request_status",
              "label": "Status"
            },
            {
              "columnId": "command",
              "label": "Command"
            },
            {
              "columnId": "input_buffer_text",
              "label": "Input buffer"
            },
            {
              "columnId": "blocked_by",
              "label": "Head blocker"
            },
            {
              "columnId": "count_blocked_sessions",
              "label": "Blocked sessions"
            },
            {
              "columnId": "wait_type",
              "label": "Wait type"
            },
            {
              "columnId": "wait_time",
              "label": "Wait time"
            },
            {
              "columnId": "open_transaction_count",
              "label": "Open transactions"
            },
            {
              "columnId": "request_cpu_time",
              "label": "Request CPU"
            },
            {
              "columnId": "request_logical_reads",
              "label": "Request logical reads"
            },
            {
              "columnId": "request_writes",
              "label": "Request writes"
            },
            {
              "columnId": "percent_complete",
              "label": "% complete"
            },
            {
              "columnId": "tempdb_allocations_kb",
              "label": "Tempdb allocations"
            },
            {
              "columnId": "tempdb_current_kb",
              "label": "Tempdb current"
            },
            {
              "columnId": "sql_module_name",
              "label": "Module"
            },
            {
              "columnId": "login_name",
              "label": "Login"
            },
            {
              "columnId": "host_name",
              "label": "Host"
            },
            {
              "columnId": "program_name",
              "label": "Program"
            },
            {
              "columnId": "client_net_address",
              "label": "Client net address"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "active_sessions"
    },
    {
      "type": 1,
      "content": {
        "json": "The grid shows a snapshot of active user sessions in this database at a point in time. Snapshots are collected at regular intervals defined by `Active Sessions` dataset configuration. A session is considered active if it is running a request (for example, executing a query), has an open transaction, or is blocking other sessions. Click on a session in the grid to view session details, including SQL query text, session waits, etc.\r\n\r\nData is collected from [sys.dm_exec_connections](https://go.microsoft.com/fwlink/?linkid=2214209), [sys.dm_exec_sessions](https://go.microsoft.com/fwlink/?linkid=2213978) [sys.dm_exec_requests](https://go.microsoft.com/fwlink/?linkid=2214068), [sys.dm_exec_session_wait_stats](https://go.microsoft.com/fwlink/?linkid=2214069), and other views."
      },
      "conditionalVisibilities": [
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "activity_help"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Selected session details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "4f7e9040-f18d-4a23-8092-f0b4ea855401",
                  "cellValue": "sqlTextTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Input buffer text",
                  "subTarget": "InputBuffer",
                  "style": "link"
                },
                {
                  "id": "542bad80-2f31-4b7a-88de-76df2fabff67",
                  "cellValue": "sqlTextTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Statement text",
                  "subTarget": "Statement",
                  "style": "link"
                }
              ]
            },
            "name": "sql_text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{input_buffer_text}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "conditionalVisibility": {
              "parameterName": "sqlTextTabName",
              "comparison": "isEqualTo",
              "value": "InputBuffer"
            },
            "name": "input_buffer_text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{statement_text}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "conditionalVisibility": {
              "parameterName": "sqlTextTabName",
              "comparison": "isEqualTo",
              "value": "Statement"
            },
            "name": "statement_text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{session_wait_stats}\",\"transformers\":null}",
              "size": 3,
              "title": "Session waits",
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "wait_time_ms",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "signal_wait_time_ms",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "max_wait_time_ms",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "waiting_tasks_count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "wait_type",
                    "label": "Wait type"
                  },
                  {
                    "columnId": "wait_time_ms",
                    "label": "Wait time (ms)"
                  },
                  {
                    "columnId": "signal_wait_time_ms",
                    "label": "Signal wait time (ms)"
                  },
                  {
                    "columnId": "max_wait_time_ms",
                    "label": "Max wait time (ms)"
                  },
                  {
                    "columnId": "waiting_tasks_count",
                    "label": "Waiting tasks"
                  }
                ]
              }
            },
            "name": "session_wait_stats"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_datetime}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_datetime"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_id}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table"
            },
            "customWidth": "33",
            "name": "session_details_number_id"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_kb}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "max": 262144,
                      "palette": "coldHot"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_number_kb"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "2-Read Committed",
                          "representation": "Blank",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "1-Read Uncommitted",
                          "representation": "SmileySad",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "3-Repeatable Read",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "4-Serializable",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "5-Snapshot",
                          "representation": "1",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_count}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_number_count"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{task_counts}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "task_counts"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_single_database_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "session_details_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Log send rate\\\",\\r\\n1, \\\"Redo rate\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_single_database_geo_replicas\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| project sample_time_utc, partner_logical_server_name, partner_database_name, log_send_rate_kbps, redo_rate_kbps, key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, partner_logical_server_name, partner_database_name, log_send_rate_kbps, redo_rate_kbps\\r\\n| extend metric = case(\\r\\n                    metric_name == \\\"Log send rate\\\", log_send_rate_kbps,\\r\\n                    metric_name == \\\"Redo rate\\\", redo_rate_kbps,\\r\\n                    long(null))\\r\\n| project sample_time_utc, series = strcat(metric_name, \\\" | \\\", partner_logical_server_name, \\\" | \\\", partner_database_name), metric\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series\\r\\n| project series, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Replication rates",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 12,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "georeplication_rate"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log send rate`|The rate at which the primary replica sends transaction log data to a geo-secondary replica.|\r\n|`Redo rate`|The rate of redo, or log apply, process on a geo-secondary replica. When redo rate is approximately equal or higher than `Log send rate`, data latency on the geo-secondary replica is minimal; in case of failover to this geo-replica, failover time and data loss (for forced failovers) are minimal as well.|\r\n\r\nData is collected from [sys.dm_geo_replication_link_status](https://go.microsoft.com/fwlink/?linkid=2198743) and [sys.dm_database_replica_states](https://go.microsoft.com/fwlink/?linkid=2198734)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "georeplication_help_replication_rate"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Log send queue\\\",\\r\\n1, \\\"Redo queue\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_single_database_geo_replicas\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| project sample_time_utc, partner_logical_server_name, partner_database_name, log_send_queue_size_kb, redo_queue_size_kb, key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, partner_logical_server_name, partner_database_name, log_send_queue_size_kb, redo_queue_size_kb\\r\\n| extend metric = case(\\r\\n                    metric_name == \\\"Log send queue\\\", log_send_queue_size_kb,\\r\\n                    metric_name == \\\"Redo queue\\\", redo_queue_size_kb,\\r\\n                    long(null))\\r\\n| project sample_time_utc, series = strcat(metric_name, \\\" | \\\", partner_logical_server_name, \\\" | \\\", partner_database_name), metric\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series\\r\\n| project series, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Replication queues",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 3,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "georeplication_queues"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log send queue`|The amount of transaction log data waiting to be sent from the primary replica to a geo-replica.|\r\n|`Redo queue`|The amount of transaction log data waiting to be redone, or applied to data files on a geo-replica. When redo queue is low, data latency on a geo-replica is minimal; in case of failover to this geo-replica, failover time and data loss (for forced failovers) are minimal as well.|\r\n\r\nData is collected from [sys.dm_geo_replication_link_status](https://go.microsoft.com/fwlink/?linkid=2198743) and [sys.dm_database_replica_states](https://go.microsoft.com/fwlink/?linkid=2198734)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "georeplication_help_replication_queues"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_geo_replicas\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| project sample_time_utc, series = strcat(partner_logical_server_name, \\\" | \\\", partner_database_name), replication_lag_seconds\\r\\n| make-series metric = avg(replication_lag_seconds) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series\\r\\n| project series, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Replication lag",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "georeplication_lag"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Replication lag`|Delay between committing a transaction on the primary replica and hardening the transaction in the transaction log of a geo-replica. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198863).|\r\n\r\nData is collected from [sys.dm_geo_replication_link_status](https://go.microsoft.com/fwlink/?linkid=2198743)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "georeplication_help_replication_lag"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "f9fb6ee6-fe38-4fa3-864c-62360b7c2edd",
                  "version": "KqlParameterItem/1.0",
                  "name": "georeplicationSampleType",
                  "label": "Data to show",
                  "type": 10,
                  "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "Latest"
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "georeplication_sample_type_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_geo_replicas\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| make-series metric = dcount(sample_time_utc) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\\r\\n\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "title": "Select a sample",
              "noDataMessage": "No geo-replication samples are available",
              "timeBrushParameterName": "timeRange",
              "exportFieldName": "",
              "exportParameterName": "georeplicationHistoricalSample",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "barchart",
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "metric",
                    "color": "lightBlue"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "georeplicationSampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "georeplication_timeline"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_geo_replicas\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize count_samples = dcount(sample_time_utc)\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "No geo-replication samples are available",
              "queryType": 9,
              "visualization": "card",
              "textSettings": {
                "style": "markdown"
              }
            },
            "conditionalVisibility": {
              "parameterName": "georeplicationSampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "georeplication_sample_count"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "0d50daff-a0fa-4061-804b-03e75643cb13",
                  "version": "KqlParameterItem/1.0",
                  "name": "georeplicationLatestSampleTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_geo_replicas\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize sample_time_utc = max(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "fd1525e9-19cb-4c4a-901d-9a1eead41519",
                  "version": "KqlParameterItem/1.0",
                  "name": "georeplicationHistoricalSampleTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_geo_replicas\\r\\n| where sample_time_utc between (todatetime(\\\"{georeplicationHistoricalSample:$.x}\\\") .. (todatetime(\\\"{georeplicationHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize sample_time_utc = min(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "57d4c5b6-018a-4c83-a7f5-599bb212efb2",
                  "version": "KqlParameterItem/1.0",
                  "name": "georeplicationSampleTime",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "georeplicationSampleType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Latest",
                        "resultValType": "param",
                        "resultVal": "georeplicationLatestSampleTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "georeplicationSampleType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Historical",
                        "resultValType": "param",
                        "resultVal": "georeplicationHistoricalSampleTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "georeplicationLatestSampleTime"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "pills",
              "queryType": 9
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "alwaysHidden",
              "comparison": "isNotEqualTo"
            },
            "name": "georeplication_sample_time_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_geo_replicas\\r\\n| where sample_time_utc == todatetime(\\\"{georeplicationLatestSampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize count_georeplicas = count() by sample_time_utc\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\"), count_georeplicas\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 4,
              "noDataMessage": "No sample is selected",
              "queryType": 9,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "sample_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "28ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "sample_time_utc",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "28ch"
                    },
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "offset",
                    "formatter": 2,
                    "tooltipFormat": {
                      "tooltip": "Time difference between last workbook refresh and displayed sample"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "sample_time",
                    "label": "Collection time"
                  },
                  {
                    "columnId": "sample_time_utc",
                    "label": "Collection time (UTC)"
                  },
                  {
                    "columnId": "offset",
                    "label": "Time offset"
                  },
                  {
                    "columnId": "count_georeplicas",
                    "label": "Geo-replicas"
                  }
                ]
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "georeplicationSampleTime",
              "comparison": "isNotEqualTo"
            },
            "name": "selected_georeplication_sample"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"geo_replication_link_id\\\",\\\"secondary_allow_connections\\\",\\\"suspend_reason_desc\\\", \\\"partner_service_level_objective_long\\\"\\r\\n]);\\r\\nlet column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"last_replication_time\\\",\\\"last_commit_time\\\",\\\"last_sent_time\\\",\\\"last_hardened_time\\\",\\\"last_redone_time\\\"\\r\\n]);\\r\\nlet properties = (\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc <= todatetime(\\\"{georeplicationSampleTime}\\\")\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize arg_max(sample_time_utc, service_level_objective, service_level_objective_long, logical_cpu_count) by logical_server_name, database_name\\r\\n| project logical_server_name, database_name, service_level_objective, service_level_objective_long, logical_cpu_count\\r\\n);\\r\\nlet current_snapshot = materialize(\\r\\nsqldb_single_database_geo_replicas\\r\\n| where sample_time_utc == todatetime(\\\"{georeplicationSampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| lookup properties on $left.partner_logical_server_name == $right.logical_server_name, $left.partner_database_name == $right.database_name\\r\\n| lookup properties on $left.logical_server_name == $right.logical_server_name, $left.database_name == $right.database_name\\r\\n| project-rename local_logical_cpu_count = logical_cpu_count1, partner_logical_cpu_count = logical_cpu_count, partner_service_level_objective = service_level_objective, partner_service_level_objective_long = service_level_objective_long\\r\\n| project-away sample_time_utc, logical_server_name, database_name, database_id, logical_database_id, physical_database_id, log_send_queue_size_kb, log_send_rate_kbps, redo_queue_size_kb, redo_rate_kbps, replication_lag_seconds, service_level_objective1, service_level_objective_long1\\r\\n);\\r\\n// result set for strings grid\\r\\nlet georeplica_details_string = (\\r\\ncurrent_snapshot\\r\\n| project geo_replication_link_id, secondary_allow_connections = secondary_allow_connections_desc, suspend_reason_desc, partner_service_level_objective_long\\r\\n| project geo_replication_link_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project geo_replication_link_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Name\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by geo_replication_link_id // for each geo_replication_link_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for datetime grid\\r\\nlet georeplica_details_datetime = (\\r\\ncurrent_snapshot\\r\\n| project geo_replication_link_id, last_replication_time = last_replication_time_utc,  last_commit_time = last_commit_time_utc, last_sent_time = last_sent_time_utc, last_hardened_time = last_hardened_time_utc, last_redone_time = last_redone_time_utc\\r\\n| project geo_replication_link_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project geo_replication_link_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_datetime = dynamic_to_json(make_list(c)) by geo_replication_link_id\\r\\n);\\r\\ncurrent_snapshot\\r\\n| join kind=inner georeplica_details_string on geo_replication_link_id\\r\\n| join kind=inner georeplica_details_datetime on geo_replication_link_id\\r\\n| project partner_logical_server_name,\\r\\n          partner_database_name,\\r\\n          partner_service_level_objective,\\r\\n          slo_mismatch_vcore_difference = abs(local_logical_cpu_count - partner_logical_cpu_count), // applies to DTU as well\\r\\n          replica_role_desc,\\r\\n          replication_state_desc = case(replication_state_desc == \\\"CATCH_UP\\\", \\\"Catch_up\\\", replication_state_desc == \\\"SEEDING\\\", \\\"Seeding\\\", replication_state_desc == \\\"PENDING\\\", \\\"Pending\\\", replication_state_desc == \\\"SUSPENDED\\\", \\\"Suspended\\\", replication_state_desc),\\r\\n          synchronization_state_desc = case(synchronization_state_desc == \\\"NOT SYNCHRONIZING\\\", \\\"Not synchronizing\\\", synchronization_state_desc == \\\"SYNCHRONIZING\\\", \\\"Synchronizing\\\", synchronization_state_desc == \\\"SYNCHRONIZED\\\", \\\"Synchronized\\\", synchronization_state_desc == \\\"REVERTING\\\", \\\"Reverting\\\", synchronization_state_desc == \\\"INITIALIZING\\\", \\\"Initializing\\\", synchronization_state_desc),\\r\\n          synchronization_health_desc = case(synchronization_health_desc == \\\"NOT_HEALTHY\\\", \\\"Not healthy\\\", synchronization_health_desc == \\\"PARTIALLY_HEALTHY\\\", \\\"Partially healthy\\\", synchronization_health_desc == \\\"HEALTHY\\\", \\\"Healthy\\\", synchronization_health_desc),\\r\\n          is_suspended,\\r\\n          local_logical_cpu_count,\\r\\n          partner_logical_cpu_count,\\r\\n          details_string,\\r\\n          details_datetime\\r\\n| sort by tolower(partner_logical_server_name) asc, tolower(partner_database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "title": "Geo-replicas",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "details_string",
                  "parameterName": "details_string",
                  "parameterType": 1,
                  "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
                },
                {
                  "fieldName": "details_datetime",
                  "parameterName": "details_datetime",
                  "parameterType": 1,
                  "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
                }
              ],
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "partner_service_level_objective",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "slo_mismatch_vcore_difference",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": ">",
                          "thresholdValue": "6",
                          "representation": "Sev0",
                          "text": "[\"partner_service_level_objective\"]"
                        },
                        {
                          "operator": ">",
                          "thresholdValue": "4",
                          "representation": "Sev1",
                          "text": "[\"partner_service_level_objective\"]"
                        },
                        {
                          "operator": ">",
                          "thresholdValue": "2",
                          "representation": "Sev2",
                          "text": "[\"partner_service_level_objective\"]"
                        },
                        {
                          "operator": ">",
                          "thresholdValue": "0",
                          "representation": "Sev3",
                          "text": "[\"partner_service_level_objective\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "[\"partner_service_level_objective\"]"
                        }
                      ]
                    },
                    "tooltipFormat": {
                      "tooltip": "It is recommended that compute size of a geo-replication secondary replica matches the compute size of its primary replica. This database has [\"local_logical_cpu_count\"] logical CPUs, but its partner database has [\"partner_logical_cpu_count\"] logical CPUs."
                    }
                  },
                  {
                    "columnMatch": "replication_state_desc",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Catch_up",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Seeding",
                          "representation": "warning",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Pending",
                          "representation": "pending",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Suspended",
                          "representation": "3",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "synchronization_state_desc",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Not synchronizing",
                          "representation": "error",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Synchronizing",
                          "representation": "1",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Synchronized",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Reverting",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Initializing",
                          "representation": "uninitialized",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "synchronization_health_desc",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Healthy",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Partially healthy",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Not healthy",
                          "representation": "4",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "is_suspended",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "3",
                          "text": "Yes"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "success",
                          "text": "No"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "local_logical_cpu_count",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "partner_logical_cpu_count",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "details_string",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "details_datetime",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "replica_role_desc",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "partner_logical_server_name",
                    "label": "Partner server"
                  },
                  {
                    "columnId": "partner_database_name",
                    "label": "Partner database"
                  },
                  {
                    "columnId": "slo_mismatch_vcore_difference",
                    "label": "Partner compute size"
                  },
                  {
                    "columnId": "replica_role_desc",
                    "label": "Replica role"
                  },
                  {
                    "columnId": "replication_state_desc",
                    "label": "Replication state"
                  },
                  {
                    "columnId": "synchronization_state_desc",
                    "label": "Synchronization state"
                  },
                  {
                    "columnId": "synchronization_health_desc",
                    "label": "Synchronization health"
                  },
                  {
                    "columnId": "is_suspended",
                    "label": "Suspended"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "replica_role_desc",
                  "sortOrder": 1
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "georeplicationSampleTime",
              "comparison": "isNotEqualTo"
            },
            "name": "georeplicas"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Geo-replica properties",
              "expandable": true,
              "expanded": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
                    "size": 3,
                    "noDataMessage": "Unknown",
                    "showExportToExcel": true,
                    "queryType": 8
                  },
                  "customWidth": "50",
                  "name": "georeplica_details_string"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{details_datetime}\",\"transformers\":null}",
                    "size": 3,
                    "noDataMessage": "Unknown",
                    "showExportToExcel": true,
                    "queryType": 8,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Value",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "georeplica_details_datetime"
                }
              ],
              "exportParameters": true
            },
            "conditionalVisibility": {
              "parameterName": "georeplicationSampleTime",
              "comparison": "isNotEqualTo"
            },
            "name": "georeplica_properties"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Geo-replicas"
        },
        {
          "parameterName": "sqldb_single_database_geo_replicas",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "showGeoReplication",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "geo_replication_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "448a29bd-9c86-4cc9-b114-e89eb4532388",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsStartTime",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"union\\r\\n(\\r\\n// The most recent interval that is earlier than the end of time range.\\r\\n// This may be earlier than the start of time range by at most 2h.\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time between (({timeRange:start} - 2h) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| summarize interval_start_time = max(interval_start_time)\\r\\n),\\r\\n(\\r\\n// earliest interval start within time range\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time >= {timeRange:start} and interval_start_time <= {timeRange:end}\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| summarize interval_start_time = min(interval_start_time)\\r\\n)\\r\\n// return the earliest of these times as start of QDS range\\r\\n// if there isn't a complete QDS interval within time range, this will show the most recent available interval outside of the range\\r\\n| summarize qds_start_time = min(interval_start_time)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9
                },
                {
                  "id": "19a73be4-a8a4-43ee-9b97-828f23b34f80",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsEndTime",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"union\\r\\n(\\r\\n// The most recent interval that is earlier than the end of time range.\\r\\n// This may be earlier than the start of time range by at most 2h.\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time between (({timeRange:start} - 2h) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| summarize interval_end_time = max(interval_end_time)\\r\\n),\\r\\n(\\r\\n// latest interval end within time range\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time >= {timeRange:start} and interval_start_time <= {timeRange:end}\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| summarize interval_end_time = max(interval_end_time)\\r\\n)\\r\\n// return the latest of these times as end of QDS range\\r\\n// if there isn't a complete QDS interval within time range, this will show the latest available interval\\r\\n| summarize qds_end_time = datetime_add(\\\"second\\\", 1, max(interval_end_time)) // make-series treats the end of interval as not inclusive, fudge by 1 second\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsCollectionReplicaType",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// QDS data may be collected on the primary or on its secondary HA replica.\\r\\n// QDS data collection from geo and named replicas is blocked to avoid associating query workload from the primary with the server/database name of a geo or named secondary.\\r\\n// If QDS data is collected from both primary and HA secondary, KQL queries must be restricted to data from either primary or HA secondary to avoid wrong results from querying duplicate data.\\r\\n// This parameter determines the replica type to use in that filter.\\r\\n// HA secondary is used only if all data within the interval is from HA secondary. Otherwise, primary is used.\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| summarize count_from_ha_secondary = countif(replica_type == \\\"HA secondary\\\"),\\r\\n            count_from_primary = countif(replica_type == \\\"Primary\\\")\\r\\n| project replica_type = iif(count_from_ha_secondary > 0 and count_from_primary == 0, \\\"HA secondary\\\", \\\"Primary\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9,
                  "id": "597f2e25-7cb4-416e-aaa8-d156dccd25b4"
                }
              ],
              "style": "above",
              "queryType": 9
            },
            "name": "top_query_qds_time_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "<span style=\"font-size:1.2em\">A top query is defined as a query consuming the most resources in a time interval. Resource consumption is reflected by metrics such as _execution count_, _CPU time_, _duration_, _logical reads_, etc. For each top query, choosing an aggregation type lets you see its _total_, _average_, _minimum_, or _maximum_ resource consumption within the selected time interval.</span>\r\n\r\n<span style=\"font-size:1.2em\">Query Store aggregates and stores data using fixed time intervals. Query statistics are collected and displayed for complete intervals only. Because of this, top query data may be delayed. For example, if Query Store interval length is one hour (which is the default configuration), then it will take at least one hour for the most recent query data to become available.</span>\r\n\r\nTop query data is obtained from [Query Store](https://go.microsoft.com/fwlink/?linkid=2213253), using [sys.query_store_query](https://go.microsoft.com/fwlink/?linkid=2213428), [sys.query_store_query_text](https://go.microsoft.com/fwlink/?linkid=2213154), [sys.query_store_plan](https://go.microsoft.com/fwlink/?linkid=2213251), [sys.query_store_runtime_stats](https://go.microsoft.com/fwlink/?linkid=2213252), [sys.query_store_wait_stats](https://go.microsoft.com/fwlink/?linkid=2213155), and other views."
            },
            "conditionalVisibilities": [
              {
                "parameterName": "showDescriptions",
                "comparison": "isEqualTo",
                "value": "true"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_help"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "7d626640-0324-4fe2-ace6-65b0fa6db0ef",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsAggBy",
                  "label": "Aggregate by",
                  "type": 10,
                  "description": "Select the level of aggregation. Use \"Query/plan hash\" to aggregate statistics for similar queries and query plans across all databases. Use \"Query/plan ID\" to aggregate statistics by individual queries and plans within each database.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"query_hash\",\"label\":\"Query/plan hash\"},\r\n    {\"value\":\"query_id\",\"label\":\"Query/plan ID\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "query_hash"
                },
                {
                  "id": "e7bd7068-660b-41bd-894d-b6008ac6e4ca",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsAggregation",
                  "label": "Aggregation",
                  "type": 2,
                  "description": "Select the type of aggregation to use for query runtime statistics",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"total\",\"label\":\"Total\"},\r\n    {\"value\":\"avg\",\"label\":\"Average\"},\r\n    {\"value\":\"max\",\"label\":\"Maximum\"},\r\n    {\"value\":\"min\",\"label\":\"Minimum\"},\r\n    {\"value\":\"stdev\",\"label\":\"Standard deviation\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "total"
                },
                {
                  "id": "d78e016e-7f9c-4ddb-be50-9cc3317387b6",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsMetric",
                  "label": "Metric",
                  "type": 2,
                  "description": "Find top queries sorting by selected metric in descending order",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"count_executions\",\"label\":\"Execution count\"},\r\n    {\"value\":\"duration\",\"label\":\"Duration\"},\r\n    {\"value\":\"cpu_time\",\"label\":\"CPU time\"},\r\n    {\"value\":\"logical_io_reads\",\"label\":\"Logical reads\"},\r\n    {\"value\":\"logical_io_writes\",\"label\":\"Logical writes\"},\r\n    {\"value\":\"physical_io_reads\",\"label\":\"Physical reads (pages)\"},\r\n    {\"value\":\"num_physical_io_reads\",\"label\":\"Physical reads (IOs)\"},\r\n    {\"value\":\"dop\",\"label\":\"DOP\"},\r\n    {\"value\":\"query_max_used_memory\",\"label\":\"Memory grant\"},\r\n    {\"value\":\"rowcount\",\"label\":\"Row count\"},\r\n    {\"value\":\"log_bytes_used\",\"label\":\"Transaction log space used\"},\r\n    {\"value\":\"tempdb_space_used\",\"label\":\"Tempdb space used\"},\r\n    {\"value\":\"page_server_io_reads\",\"label\":\"Page server reads (pages)\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "cpu_time"
                },
                {
                  "id": "45b94f24-7a79-4941-9036-2578462ffc96",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsTopQueryCount",
                  "label": "Top query limit",
                  "type": 2,
                  "description": "The number of top queries to display",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":5,\"label\":\"5\"},\r\n    {\"value\":10,\"label\":\"10\"},\r\n    {\"value\":25,\"label\":\"25\"},\r\n    {\"value\":50,\"label\":\"50\"},\r\n    {\"value\":100,\"label\":\"100\"},\r\n    {\"value\":200,\"label\":\"200\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "10"
                },
                {
                  "id": "2c8e60d0-a395-4aa6-aeba-1d2c39195c3c",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsExecutionType",
                  "label": "Execution types",
                  "type": 2,
                  "description": "Select one or more query execution types",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "0,1,2,3,4",
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"0\",\"label\":\"Regular\"},\r\n    {\"value\":\"3\",\"label\":\"Aborted\"},\r\n    {\"value\":\"4\",\"label\":\"Exception\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all"
                },
                {
                  "id": "f3ca5023-b39e-4246-8f67-9708b721da46",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsQueryId",
                  "label": "Query ID",
                  "type": 1,
                  "description": "Enter a Query ID to show that query only. This is an optional parameter.",
                  "typeSettings": {
                    "paramValidationRules": [
                      {
                        "regExp": "\\\"",
                        "match": false,
                        "message": "Query ID filter value may not contain double quotes"
                      }
                    ]
                  },
                  "value": ""
                },
                {
                  "id": "07f39986-d4e0-4205-b586-dc4924600e4d",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsQueryHash",
                  "label": "Query hash",
                  "type": 1,
                  "description": "Enter a query hash to show top queries with that hash. This is an optional parameter.",
                  "typeSettings": {
                    "paramValidationRules": [
                      {
                        "regExp": "\\\"",
                        "match": false,
                        "message": "Query hash filter value may not contain double quotes"
                      }
                    ]
                  },
                  "value": ""
                },
                {
                  "id": "7917da4e-962c-4ce8-8296-e6f6f22e3992",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsQueryText",
                  "label": "Query text",
                  "type": 1,
                  "description": "Enter a string to find queries with SQL text containing this string. This is an optional parameter.",
                  "typeSettings": {
                    "multiLineText": true,
                    "editorLanguage": "sql",
                    "multiLineHeight": 3
                  }
                },
                {
                  "id": "5fdd560a-69f7-4aca-9dec-7d7b239f4bd3",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsMetricLabelMidsentenceCase",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "count_executions",
                        "resultValType": "static",
                        "resultVal": "execution count"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "duration",
                        "resultValType": "static",
                        "resultVal": "duration"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "cpu_time",
                        "resultValType": "static",
                        "resultVal": "CPU time"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "logical_io_reads",
                        "resultValType": "static",
                        "resultVal": "logical reads"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "logical_io_writes",
                        "resultValType": "static",
                        "resultVal": "logical writes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "physical_io_reads",
                        "resultValType": "static",
                        "resultVal": "physical reads (pages)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "num_physical_io_reads",
                        "resultValType": "static",
                        "resultVal": "physical reads (IOs)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "dop",
                        "resultValType": "static",
                        "resultVal": "DOP"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "query_max_used_memory",
                        "resultValType": "static",
                        "resultVal": "memory grant"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "rowcount",
                        "resultValType": "static",
                        "resultVal": "row count"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "log_bytes_used",
                        "resultValType": "static",
                        "resultVal": "transaction log space used"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "tempdb_space_used",
                        "resultValType": "static",
                        "resultVal": "tempdb space used"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "page_server_io_reads",
                        "resultValType": "static",
                        "resultVal": "page server reads (pages)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "param"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "13721e52-abef-4034-95e1-f7b0a13d12b3",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsMetricUnit",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "duration",
                        "resultValType": "static",
                        "resultVal": "time"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "cpu_time",
                        "resultValType": "static",
                        "resultVal": "time"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "query_max_used_memory",
                        "resultValType": "static",
                        "resultVal": "bytes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "log_bytes_used",
                        "resultValType": "static",
                        "resultVal": "bytes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "tempdb_space_used",
                        "resultValType": "static",
                        "resultVal": "bytes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "unitless"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "top_query_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "87206c56-9a13-4649-85a4-c25af12b86b5",
                  "version": "KqlParameterItem/1.0",
                  "name": "showQueriesAs",
                  "label": "Show queries as",
                  "type": 10,
                  "description": "Show queries as tiles or as a grid",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"tiles\",\"label\":\"Tiles\"},\r\n    {\"value\":\"grid\",\"label\":\"Grid\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "tiles"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "show_query_as_parameters"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Query Store intervals",
              "expandable": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| extend interval_duration_seconds = datetime_diff(\\\"second\\\", interval_end_time, interval_start_time)\\r\\n| summarize interval_start_time = min(interval_start_time),\\r\\n            interval_end_time = max(interval_end_time),\\r\\n            avg_interval_duration = avg(interval_duration_seconds),\\r\\n            interval_count = dcount(interval_end_time)\\r\\n| project interval_start_time, interval_end_time, avg_interval_duration = iif(isnan(avg_interval_duration), real(null), avg_interval_duration), interval_count\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "noDataMessage": "There is no data for specified parameters.",
                    "queryType": 9,
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "interval_start_time",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "The start of the first Query Store interval"
                          }
                        },
                        {
                          "columnMatch": "interval_end_time",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "The end of the last Query Store interval"
                          }
                        },
                        {
                          "columnMatch": "avg_interval_duration",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "Average duration of Query Store intervals. Reflects changes in interval length configuration, if any."
                          }
                        },
                        {
                          "columnMatch": "interval_count",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "The number of intervals between start and end time"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "interval_start_time",
                          "label": "Start time"
                        },
                        {
                          "columnId": "interval_end_time",
                          "label": "End time"
                        },
                        {
                          "columnId": "avg_interval_duration",
                          "label": "Interval duration"
                        },
                        {
                          "columnId": "interval_count",
                          "label": "Intervals"
                        }
                      ]
                    },
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "boundary",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "colors",
                          "thresholdsGrid": [
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": null,
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      "leftContent": {
                        "columnMatch": "value",
                        "formatter": 6,
                        "dateFormat": {
                          "showUtcTime": true,
                          "formatName": "shortDateTimePattern"
                        },
                        "tooltipFormat": {
                          "tooltip": "Values are shown in the local time of the database engine instance"
                        }
                      },
                      "showBorder": true,
                      "size": "auto"
                    }
                  },
                  "name": "qds_interval_range"
                }
              ]
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_intervals_group"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_query_id = dcount(query_id),\\r\\n            any_query_id = take_any(query_id),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", avg(count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            page_server_io_reads = case(\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_page_server_io_reads * count_executions),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_page_server_io_reads),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_page_server_io_reads),\\r\\n                                       real(null)\\r\\n                                       )\\r\\n            by query_hash,\\r\\n               query_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", query_id, long(null))\\r\\n| extend query_id = iif(isnull(query_id), any_query_id, query_id),\\r\\n         multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries for this query hash. Displayed query text and query details are for one of these \\\", tostring(dcount_query_id), \\\" queries. To see query text and details for a specific query, use aggregation by Query ID.\\\"), \\\"\\\"),\\r\\n         ranked_metric = case(\\r\\n                             \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"page_server_io_reads\\\", toreal(page_server_io_reads),\\r\\n                             real(null)\\r\\n                             )\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used)\\r\\n| sort by page_server_io_reads desc | extend page_server_io_reads_rank = row_rank(page_server_io_reads)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Page server reads (pages)\\\", \\\"Rank\\\", page_server_io_reads_rank, \\\"Value\\\", page_server_io_reads)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank, page_server_io_reads_rank\\r\\n| sort by ranked_metric desc\\r\\n| extend rank = row_rank(ranked_metric)\\r\\n| project query_hash,\\r\\n          query_id,\\r\\n          rank,\\r\\n          ranked_metric,\\r\\n          count_executions,\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning,\\r\\n          tile_label = case(\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Query ID: \\\", tostring(query_id)),\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_hash\\\", strcat(\\\"Query hash: \\\", tostring(query_hash)),\\r\\n                           \\\"\\\"\\r\\n                           ),\\r\\n          ranks\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where query_id == iif(isnotempty(@\\\"{qdsQueryId}\\\"), tolong(@\\\"{qdsQueryId}\\\"), query_id)\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| sort by rank asc, count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Top queries ranked by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "query_id",
                  "parameterName": "query_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "tile_label",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "unitless"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_tiles_unitless"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_query_id = dcount(query_id),\\r\\n            any_query_id = take_any(query_id),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", avg(count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            page_server_io_reads = case(\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_page_server_io_reads * count_executions),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_page_server_io_reads),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_page_server_io_reads),\\r\\n                                       real(null)\\r\\n                                       )\\r\\n            by query_hash,\\r\\n               query_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", query_id, long(null))\\r\\n| extend query_id = iif(isnull(query_id), any_query_id, query_id),\\r\\n         multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries for this query hash. Displayed query text and query details are for one of these \\\", tostring(dcount_query_id), \\\" queries. To see query text and details for a specific query, use aggregation by Query ID.\\\"), \\\"\\\"),\\r\\n         ranked_metric = case(\\r\\n                             \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n                             real(null)\\r\\n                             )\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used)\\r\\n| sort by page_server_io_reads desc | extend page_server_io_reads_rank = row_rank(page_server_io_reads)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Page server reads (pages)\\\", \\\"Rank\\\", page_server_io_reads_rank, \\\"Value\\\", page_server_io_reads)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank, page_server_io_reads_rank\\r\\n| sort by ranked_metric desc\\r\\n| extend rank = row_rank(ranked_metric)\\r\\n| project query_hash,\\r\\n          query_id,\\r\\n          rank,\\r\\n          ranked_metric,\\r\\n          count_executions,\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning,\\r\\n          tile_label = case(\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Query ID: \\\", tostring(query_id)),\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_hash\\\", strcat(\\\"Query hash: \\\", tostring(query_hash)),\\r\\n                           \\\"\\\"\\r\\n                           ),\\r\\n          ranks\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where query_id == iif(isnotempty(@\\\"{qdsQueryId}\\\"), tolong(@\\\"{qdsQueryId}\\\"), query_id)\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| sort by rank asc, count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Top queries ranked by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "query_id",
                  "parameterName": "query_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 22,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "tile_label",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "time"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_tiles_time"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_query_id = dcount(query_id),\\r\\n            any_query_id = take_any(query_id),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", avg(count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            page_server_io_reads = case(\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_page_server_io_reads * count_executions),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_page_server_io_reads),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_page_server_io_reads),\\r\\n                                       real(null)\\r\\n                                       )\\r\\n            by query_hash,\\r\\n               query_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", query_id, long(null))\\r\\n| extend query_id = iif(isnull(query_id), any_query_id, query_id),\\r\\n         multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries for this query hash. Displayed query text and query details are for one of these \\\", tostring(dcount_query_id), \\\" queries. To see query text and details for a specific query, use aggregation by Query ID.\\\"), \\\"\\\"),\\r\\n         ranked_metric = case(\\r\\n                             \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory * 8 * 1024),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used * 8 * 1024),\\r\\n                             real(null)\\r\\n                             )\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used)\\r\\n| sort by page_server_io_reads desc | extend page_server_io_reads_rank = row_rank(page_server_io_reads)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Page server reads (pages)\\\", \\\"Rank\\\", page_server_io_reads_rank, \\\"Value\\\", page_server_io_reads)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank, page_server_io_reads_rank\\r\\n| sort by ranked_metric desc\\r\\n| extend rank = row_rank(ranked_metric)\\r\\n| project query_hash,\\r\\n          query_id,\\r\\n          rank,\\r\\n          ranked_metric,\\r\\n          count_executions,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning,\\r\\n          tile_label = case(\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Query ID: \\\", tostring(query_id)),\\r\\n                           \\\"{qdsAggBy}\\\"==\\\"query_hash\\\", strcat(\\\"Query hash: \\\", tostring(query_hash)),\\r\\n                           \\\"\\\"\\r\\n                           ),\\r\\n          ranks\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where query_id == iif(isnotempty(@\\\"{qdsQueryId}\\\"), tolong(@\\\"{qdsQueryId}\\\"), query_id)\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| sort by rank asc, count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Top queries ranked by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "query_id",
                  "parameterName": "query_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 2,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  },
                  "tooltipFormat": {
                    "tooltip": "Query runtime statistic"
                  }
                },
                "secondaryContent": {
                  "columnMatch": "tile_label",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "bytes"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_tiles_bytes"
          },
          {
            "type": 1,
            "content": {
              "json": "Each tile represents a query (if aggregating by `Query ID`) or all queries with the same query hash (if aggregating by `Query hash`). The large number on the tile is **query rank** by `{qdsAggregation} {qdsMetricLabelMidsentenceCase}`. Two queries have the same rank if their resource usage during the interval is the same.<span style=\"font-size:1.2em\">Each tile represents all queries with the same query hash. The large number on the tile is **query rank** by `{qdsAggregation} {qdsMetricLabelMidsentenceCase}`. Two queries have the same rank if their resource usage during the interval is the same.</span>\r\n\r\n<span style=\"font-size:1.2em\">The tile also shows `{qdsAggregation} {qdsMetricLabelMidsentenceCase}` value, aggregated over selected time range. The length of the bar below this value is proportional to resource usage by this query, compared to other top queries displayed.</span>\r\n\r\n<span style=\"font-size:1.2em\">The `Query hash` value is displayed at the bottom of each tile. You can copy it and paste it in the `Query hash` parameter box above to focus on a specific top query.</span>\r\n\r\nThe tile also shows `{qdsAggregation} {qdsMetricLabelMidsentenceCase}` value, aggregated over selected time range. The length of the bar below this value is proportional to resource usage by this query, compared to other top queries displayed.\r\n\r\n`Query ID` or `Query hash` values are displayed at the bottom of each tile. You can copy these values and paste them in the parameter boxes above to focus on specific top queries."
            },
            "conditionalVisibilities": [
              {
                "parameterName": "showDescriptions",
                "comparison": "isEqualTo",
                "value": "true"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_tiles_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_query_id = dcount(query_id),\\r\\n            any_query_id = take_any(query_id),\\r\\n            dcount_sql_module_name = dcount(sql_module_name),\\r\\n            any_sql_module_name = take_any(sql_module_name),\\r\\n            dcount_context_settings_id = dcount(context_settings_id),\\r\\n            any_context_settings_id = take_any(context_settings_id),\\r\\n            dcount_plan_id = dcount(plan_id),\\r\\n            plan_id = take_any(plan_id),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            count_successful_executions = case(\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avgif(count_executions, execution_type_desc == \\\"Regular\\\"), 2),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", minif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sumif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              real(null)\\r\\n                                              ),\\r\\n            count_aborted_executions = case(\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avgif(count_executions, execution_type_desc == \\\"Aborted\\\"), 2),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", minif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sumif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           real(null)\\r\\n                                           ),\\r\\n            count_exception_executions = case(\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avgif(count_executions, execution_type_desc == \\\"Exception\\\"), 2),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", minif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sumif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             real(null)\\r\\n                                             ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            page_server_io_reads = case(\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_page_server_io_reads * count_executions),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_page_server_io_reads),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_page_server_io_reads),\\r\\n                                       real(null)\\r\\n                                       ),\\r\\n            sql_module_name = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", take_any(sql_module_name), \\\"\\\"),\\r\\n            context_settings_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", take_any(context_settings_id), long(null))\\r\\n            by query_hash,\\r\\n               query_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", query_id, long(null))\\r\\n| extend query_id = iif(isnull(query_id), any_query_id, query_id),\\r\\n         multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries for this query hash. Displayed query text and query details are for one of these \\\", tostring(dcount_query_id), \\\" queries. To see query text and details for a specific query, use aggregation by Query ID.\\\"), \\\"\\\")\\r\\n| project query_hash,\\r\\n          query_id_agg = iif(dcount_query_id == 1, tostring(query_id), strcat(query_id, \\\" (+\\\", tostring(dcount_query_id - 1), \\\")\\\")),\\r\\n          plan_id_agg = iif(dcount_plan_id == 1, tostring(plan_id), strcat(plan_id, \\\" (+\\\", tostring(dcount_plan_id - 1), \\\")\\\")),\\r\\n          count_executions,\\r\\n          count_successful_executions,\\r\\n          count_aborted_executions,\\r\\n          count_exception_executions,\\r\\n          duration_us,\\r\\n          cpu_time_us,\\r\\n          logical_io_reads,\\r\\n          logical_io_writes,\\r\\n          physical_io_reads,\\r\\n          num_physical_io_reads,\\r\\n          dop,\\r\\n          query_max_used_memory_kb = query_max_used_memory * 8,\\r\\n          rowcount,\\r\\n          log_bytes_used,\\r\\n          tempdb_space_used_kb = tempdb_space_used * 8,\\r\\n          page_server_io_reads,\\r\\n          q_id = query_id, //workaround for a bug where a column with a name that contains the name of a hidden column is incorrectly hidden\\r\\n          sql_module_name_agg = iif(dcount_sql_module_name == 1, any_sql_module_name, strcat(any_sql_module_name, \\\" (+\\\", tostring(dcount_sql_module_name - 1), \\\")\\\")),\\r\\n          context_settings_id_agg = iif(dcount_context_settings_id == 1, tostring(any_context_settings_id), strcat(any_context_settings_id, \\\" (+\\\", tostring(dcount_context_settings_id - 1), \\\")\\\")),\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory_kb desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory_kb)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used_kb desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used_kb)\\r\\n| sort by page_server_io_reads desc | extend page_server_io_reads_rank = row_rank(page_server_io_reads)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory_kb),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used_kb),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Page server reads (pages)\\\", \\\"Rank\\\", page_server_io_reads_rank, \\\"Value\\\", page_server_io_reads)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank, page_server_io_reads_rank\\r\\n| sort by case(\\r\\n              \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n              \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n              \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n              \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory_kb),\\r\\n              \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n              \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n              \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used_kb),\\r\\n              \\\"{qdsMetric}\\\"==\\\"page_server_io_reads\\\", toreal(page_server_io_reads),\\r\\n              real(null)\\r\\n              ) desc,\\r\\n          count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where q_id == iif(isnotempty(@\\\"{qdsQueryId}\\\"), tolong(@\\\"{qdsQueryId}\\\"), q_id)\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnalytics": true,
              "title": "Top queries by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "q_id",
                  "parameterName": "query_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1,
                  "defaultValue": ""
                }
              ],
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  },
                  {
                    "columnMatch": "count_successful_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_aborted_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_exception_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "duration_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "cpu_time_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_writes",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "24ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "num_physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "24ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "dop",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "14ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "query_max_used_memory_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "rowcount",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "log_bytes_used",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "tempdb_space_used_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "page_server_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "20ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "q_id",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "sql_module_name_agg",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "Available when aggregating by Query ID"
                    }
                  },
                  {
                    "columnMatch": "context_settings_id_agg",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "22ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "Available when aggregating by Query ID"
                    }
                  },
                  {
                    "columnMatch": "query_sql_text_json",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "multi_query_text_warning",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ranks",
                    "formatter": 5
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "query_hash",
                    "label": "Query hash"
                  },
                  {
                    "columnId": "query_id_agg",
                    "label": "Query ID"
                  },
                  {
                    "columnId": "plan_id_agg",
                    "label": "Plan ID"
                  },
                  {
                    "columnId": "count_executions",
                    "label": "Executions"
                  },
                  {
                    "columnId": "duration_us",
                    "label": "Duration"
                  },
                  {
                    "columnId": "cpu_time_us",
                    "label": "CPU time"
                  },
                  {
                    "columnId": "logical_io_reads",
                    "label": "Logical reads"
                  },
                  {
                    "columnId": "logical_io_writes",
                    "label": "Logical writes"
                  },
                  {
                    "columnId": "physical_io_reads",
                    "label": "Physical reads (pages)"
                  },
                  {
                    "columnId": "num_physical_io_reads",
                    "label": "Physical reads (IOs)"
                  },
                  {
                    "columnId": "dop",
                    "label": "DOP"
                  },
                  {
                    "columnId": "query_max_used_memory_kb",
                    "label": "Memory grant"
                  },
                  {
                    "columnId": "rowcount",
                    "label": "Rows"
                  },
                  {
                    "columnId": "log_bytes_used",
                    "label": "Log space"
                  },
                  {
                    "columnId": "tempdb_space_used_kb",
                    "label": "Tempdb space"
                  },
                  {
                    "columnId": "page_server_io_reads",
                    "label": "Page server reads"
                  },
                  {
                    "columnId": "sql_module_name_agg",
                    "label": "SQL module"
                  },
                  {
                    "columnId": "context_settings_id_agg",
                    "label": "Context settings ID"
                  }
                ]
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "grid"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo",
                "value": ""
              }
            ],
            "name": "qds_top_queries_grid"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "ef3541b2-fdd5-4705-8689-b9ce167c1767",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsAnyWaits",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_wait_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| count\\r\\n| project Count = tostring(Count)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                }
              ],
              "style": "pills",
              "queryType": 9
            },
            "conditionalVisibility": {
              "parameterName": "sqldb_single_database_query_wait_stats",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "qds_waits_existence_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "{multi_query_text_warning}",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "multi_query_text_warning",
                "comparison": "isNotEqualTo",
                "value": ""
              },
              {
                "parameterName": "multi_query_text_warning",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              }
            ],
            "name": "multi_query_text_warning"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(ranks:dynamic)[dynamic({ranks})]\\r\\n| mv-expand bagexpansion=array ranks\\r\\n| mv-expand metric = ranks.Metric to typeof(string), rank = ranks.Rank to typeof(int), value = ranks.Value to typeof(real)\\r\\n| where value > 0 // Do not include high ranks if usage is zero\\r\\n| where not (metric==\\\"DOP\\\" and value==1 or metric==\\\"Executions\\\" and value==1 or metric==\\\"Rows\\\" and value==1) // Do not consider trivial usage\\r\\n| project r=rank, metric, rank\\r\\n| sort by rank asc, metric asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "title": "Query ranks",
              "noDataMessage": "Selected query is not ranked high by any metric",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "r",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "<=",
                          "thresholdValue": "1",
                          "representation": "Sev0",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "<=",
                          "thresholdValue": "3",
                          "representation": "Sev1",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "<=",
                          "thresholdValue": "10",
                          "representation": "Sev2",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "<=",
                          "thresholdValue": "20",
                          "representation": "Sev3",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Sev4",
                          "text": "[\"metric\"]"
                        }
                      ],
                      "customColumnWidthSetting": "27ch"
                    }
                  },
                  {
                    "columnMatch": "metric",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "rank",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Lower numbers mean higher ranks, i.e. higher resource consumption for this metric"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "r",
                    "label": "Metric"
                  },
                  {
                    "columnId": "rank",
                    "label": "Rank"
                  }
                ]
              },
              "sortBy": [],
              "tileSettings": {
                "titleContent": {
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "hotCold"
                  },
                  "tooltipFormat": {
                    "tooltip": "Rank 1 by \"CPU time\" means that the query is the top consumer of CPU, compared to other queries in the same time interval. The metrics ranked in the 1-10 range, if any for this query, are shown."
                  }
                },
                "rightContent": {
                  "columnMatch": "metric",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "customWidth": "25",
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "ranks",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "top_query_ranks"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_wait_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| summarize query_wait_time_ms = case(\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(total_query_wait_time_ms)),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_wait_time_ms),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_wait_time_ms)),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_wait_time_ms)),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_wait_time_ms), // use maximum stdev for the interval\\r\\n                                     real(null)\\r\\n                                     )\\r\\n            by wait_category_desc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "title": "Query wait categories",
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "barchart",
              "chartSettings": {
                "yAxis": [
                  "query_wait_time_ms"
                ],
                "showMetrics": false,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Unknown",
                    "color": "gray"
                  },
                  {
                    "seriesName": "CPU",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "Worker Thread",
                    "color": "brown"
                  },
                  {
                    "seriesName": "Lock",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "Latch",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "Buffer Latch",
                    "color": "purple"
                  },
                  {
                    "seriesName": "Buffer IO",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "Tran Log IO",
                    "color": "green"
                  },
                  {
                    "seriesName": "Network IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Parallelism",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Memory",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "Other Disk IO",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "Replication",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Log Rate Governor",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "25",
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "sqldb_single_database_query_wait_stats",
                "comparison": "isEqualTo",
                "value": "1"
              },
              {
                "parameterName": "qdsAnyWaits",
                "comparison": "isNotEqualTo",
                "value": "0"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_wait_categories"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{query_sql_text_json}\",\"transformers\":null}",
              "size": 1,
              "title": "Query SQL text",
              "noDataMessage": "Unknown",
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "query_sql_text"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Query details",
              "expandable": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_hash\\\",\\r\\n1, \\\"sql_module_name\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_hash, sql_module_name) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_hash, sql_module_name\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_hash\\\", query_hash,\\r\\n                                    query_property_name == \\\"sql_module_name\\\", sql_module_name,\\r\\n                                    \\\"\\\"\\r\\n                                    )\\r\\n| project-away query_hash, sql_module_name\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_string"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_id\\\",\\r\\n1, \\\"context_settings_id\\\",\\r\\n1, \\\"sql_module_object_id\\\",\\r\\n1, \\\"query_count_compiles\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_id, context_settings_id, sql_module_object_id, query_count_compiles) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_id, context_settings_id, sql_module_object_id, query_count_compiles\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_id\\\", query_id,\\r\\n                                    query_property_name == \\\"context_settings_id\\\", context_settings_id,\\r\\n                                    query_property_name == \\\"sql_module_object_id\\\", sql_module_object_id,\\r\\n                                    query_property_name == \\\"query_count_compiles\\\", query_count_compiles,\\r\\n                                    long(null)\\r\\n                                    )\\r\\n| project-away query_id, context_settings_id, sql_module_object_id, query_count_compiles\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_number_id"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_last_compile_duration_us\\\",\\r\\n1, \\\"query_last_optimize_duration_us\\\",\\r\\n1, \\\"query_last_optimize_cpu_time_us\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_last_compile_duration_us, query_last_optimize_duration_us, query_last_optimize_cpu_time_us) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_last_compile_duration_us, query_last_optimize_duration_us, query_last_optimize_cpu_time_us\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_last_compile_duration_us\\\", query_last_compile_duration_us,\\r\\n                                    query_property_name == \\\"query_last_optimize_duration_us\\\", query_last_optimize_duration_us,\\r\\n                                    query_property_name == \\\"query_last_optimize_cpu_time_us\\\", query_last_optimize_cpu_time_us,\\r\\n                                    long(null)\\r\\n                                    )\\r\\n| project-away query_last_compile_duration_us, query_last_optimize_duration_us, query_last_optimize_cpu_time_us\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "query_property_value",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 22,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_duration"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_last_compile_memory_kb\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_last_compile_memory_kb) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_last_compile_memory_kb\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_last_compile_memory_kb\\\", query_last_compile_memory_kb,\\r\\n                                    long(null)\\r\\n                                    )\\r\\n| project-away query_last_compile_memory_kb\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "query_property_value",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 3,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_kb"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_property = datatable(key:int, query_property_name:string) [\\r\\n1, \\\"query_initial_compile_start_time\\\",\\r\\n1, \\\"query_last_compile_start_time\\\",\\r\\n1, \\\"query_last_execution_time\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == {query_id}\\r\\n| summarize arg_max(interval_end_time, query_initial_compile_start_time, query_last_compile_start_time, query_last_execution_time) // get query details from the last row in the time range\\r\\n| extend key = int(1)\\r\\n| join kind=inner query_property on key\\r\\n| project query_property_name, query_initial_compile_start_time, query_last_compile_start_time, query_last_execution_time\\r\\n| extend query_property_value = case(\\r\\n                                    query_property_name == \\\"query_initial_compile_start_time\\\", query_initial_compile_start_time,\\r\\n                                    query_property_name == \\\"query_last_compile_start_time\\\", query_last_compile_start_time,\\r\\n                                    query_property_name == \\\"query_last_execution_time\\\", query_last_execution_time,\\r\\n                                    datetime(null)\\r\\n                                    )\\r\\n| project-away query_initial_compile_start_time, query_last_compile_start_time, query_last_execution_time\\r\\n| sort by query_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "query_property_value",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "query_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "query_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "query_details_datetime"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "query_id",
                "comparison": "isNotEqualTo",
                "value": "0"
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "query_details_group"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "5e875829-c0a1-4d00-b853-d90b119a5883",
                  "version": "KqlParameterItem/1.0",
                  "name": "showPlansAs",
                  "label": "Show query plans as",
                  "type": 10,
                  "description": "Select \"Chart\" to show query plans as bars on a time chart. Select \"Grid\" to show a summary of query plan statistics in a grid.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"chart\",\"label\":\"Chart\"},\r\n    {\"value\":\"grid\",\"label\":\"Grid\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "chart"
                },
                {
                  "id": "e13aabd4-e4d7-46a7-a1d7-20292f9a521b",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridPlan",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "{\"plan_id\":0,\"interval_end_time\":\"1900-01-01\"}"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartPlan",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "{\"x\":\"1900-01-01\",\"series\":\"\"}",
                  "id": "8dafcf7a-df0e-4d9b-83ec-55579bad8df5"
                },
                {
                  "id": "b66d1dc9-af20-41b2-8a68-ad2aab7d2ee6",
                  "version": "KqlParameterItem/1.0",
                  "name": "planTabName",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "value": "details"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "query_plan_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_plan_id = dcount(plan_id),\\r\\n            any_plan_id = take_any(plan_id),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            page_server_io_reads = case(\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_page_server_io_reads * count_executions),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_page_server_io_reads),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_page_server_io_reads),\\r\\n                                       real(null)\\r\\n                                       ),\\r\\n            interval_end_time = max(interval_end_time)\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", plan_id, long(null)),\\r\\n               execution_type_desc,\\r\\n               is_forced_plan,\\r\\n               plan_forcing_type_desc\\r\\n| extend plan_id = iif(isnull(plan_id), any_plan_id, plan_id)\\r\\n| project query_plan_hash,\\r\\n          plan_id,\\r\\n          p_id_agg = iif(dcount_plan_id == 1, tostring(any_plan_id), strcat(any_plan_id, \\\" (+\\\", tostring(dcount_plan_id - 1), \\\")\\\")),\\r\\n          interval_end_time,\\r\\n          execution_type_desc,\\r\\n          count_executions,\\r\\n          plan_forcing = case(plan_forcing_type_desc == \\\"AUTO\\\", \\\"Auto\\\", plan_forcing_type_desc == \\\"MANUAL\\\" or is_forced_plan, \\\"Manual\\\", \\\"None\\\"),\\r\\n          duration_us,\\r\\n          cpu_time_us,\\r\\n          logical_io_reads,\\r\\n          logical_io_writes,\\r\\n          physical_io_reads,\\r\\n          num_physical_io_reads,\\r\\n          dop,\\r\\n          query_max_used_memory_kb = query_max_used_memory * 8,\\r\\n          rowcount,\\r\\n          log_bytes_used,\\r\\n          tempdb_space_used_kb = tempdb_space_used * 8,\\r\\n          page_server_io_reads\\r\\n| sort by case(\\r\\n              \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n              \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n              \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n              \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory_kb),\\r\\n              \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n              \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n              \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used_kb),\\r\\n              \\\"{qdsMetric}\\\"==\\\"page_server_io_reads\\\", toreal(page_server_io_reads),\\r\\n              real(null)\\r\\n              ) desc,\\r\\n          count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take 100 // assumption: looking at more than 100 plans is not interesting\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} metrics by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportFieldName": "",
              "exportParameterName": "selectedGridPlan",
              "exportDefaultValue": "{\"plan_id\":0,\"interval_end_time\":\"\"}",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "plan_id",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "interval_end_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "execution_type_desc",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Aborted",
                          "representation": "orange",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Exception",
                          "representation": "red",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ],
                      "customColumnWidthSetting": "18ch"
                    }
                  },
                  {
                    "columnMatch": "count_executions",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  },
                  {
                    "columnMatch": "plan_forcing",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Auto",
                          "representation": "lightBlue",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Manual",
                          "representation": "magenta",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "duration_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "15ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "cpu_time_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_writes",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "24ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "num_physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "22ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "dop",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "query_max_used_memory_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "rowcount",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "log_bytes_used",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "tempdb_space_used_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "page_server_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "22ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "count_successful_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_aborted_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_exception_executions",
                    "formatter": 5
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "query_plan_hash",
                    "label": "Plan hash"
                  },
                  {
                    "columnId": "p_id_agg",
                    "label": "Plan ID"
                  },
                  {
                    "columnId": "execution_type_desc",
                    "label": "Execution type"
                  },
                  {
                    "columnId": "count_executions",
                    "label": "Executions"
                  },
                  {
                    "columnId": "plan_forcing",
                    "label": "Forcing"
                  },
                  {
                    "columnId": "duration_us",
                    "label": "Duration"
                  },
                  {
                    "columnId": "cpu_time_us",
                    "label": "CPU time"
                  },
                  {
                    "columnId": "logical_io_reads",
                    "label": "Logical reads"
                  },
                  {
                    "columnId": "logical_io_writes",
                    "label": "Logical writes"
                  },
                  {
                    "columnId": "physical_io_reads",
                    "label": "Physical reads (pages)"
                  },
                  {
                    "columnId": "num_physical_io_reads",
                    "label": "Physical reads (IOs)"
                  },
                  {
                    "columnId": "dop",
                    "label": "DOP"
                  },
                  {
                    "columnId": "query_max_used_memory_kb",
                    "label": "Memory grant"
                  },
                  {
                    "columnId": "rowcount",
                    "label": "Rows"
                  },
                  {
                    "columnId": "log_bytes_used",
                    "label": "Log space"
                  },
                  {
                    "columnId": "tempdb_space_used_kb",
                    "label": "Tempdb space"
                  },
                  {
                    "columnId": "page_server_io_reads",
                    "label": "Page server reads"
                  }
                ]
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "grid"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plans_grid"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize any_plan_id = take_any(plan_id),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            page_server_io_reads = case(\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_page_server_io_reads * count_executions),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_page_server_io_reads),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_page_server_io_reads)),\\r\\n                                       \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_page_server_io_reads),\\r\\n                                       real(null)\\r\\n                                       )\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", plan_id, long(null)),\\r\\n               interval_end_time\\r\\n| extend plan_id = iif(isnull(plan_id), any_plan_id, plan_id),\\r\\n         metric = case(\\r\\n                      \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"page_server_io_reads\\\", toreal(page_server_io_reads),\\r\\n                      real(null)\\r\\n                      )\\r\\n| project plan_label = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Plan ID: \\\", tostring(plan_id)), strcat(\\\"Plan hash: \\\", query_plan_hash)),\\r\\n          interval_end_time,\\r\\n          metric\\r\\n| make-series metric = avg(metric) default = long(null) on interval_end_time from todatetime(\\\"{qdsStartTime}\\\") to todatetime(\\\"{qdsEndTime}\\\") step {timeRange:grain} by plan_label;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnnotations": true,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} {qdsMetricLabelMidsentenceCase} by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportParameterName": "selectedChartPlan",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "unstackedbar",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              },
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "plan_label",
                "createOtherGroup": null,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "chart"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "unitless"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plan_chart_unitless"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize any_plan_id = take_any(plan_id),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              )\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", plan_id, long(null)),\\r\\n               interval_end_time\\r\\n| extend plan_id = iif(isnull(plan_id), any_plan_id, plan_id),\\r\\n         metric = case(\\r\\n                      \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n                      real(null)\\r\\n                      )\\r\\n| project plan_label = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Plan ID: \\\", tostring(plan_id)), strcat(\\\"Plan hash: \\\", query_plan_hash)),\\r\\n          interval_end_time,\\r\\n          metric\\r\\n| make-series metric = avg(metric) default = long(null) on interval_end_time from todatetime(\\\"{qdsStartTime}\\\") to todatetime(\\\"{qdsEndTime}\\\") step {timeRange:grain} by plan_label;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnnotations": true,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} {qdsMetricLabelMidsentenceCase} by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportParameterName": "selectedChartPlan",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "unstackedbar",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              },
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "plan_label",
                "createOtherGroup": null,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 22,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "chart"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "time"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plan_chart_time"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{query_hash}\\\", query_hash)\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize any_plan_id = take_any(plan_id),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", plan_id, long(null)),\\r\\n               interval_end_time\\r\\n| extend plan_id = iif(isnull(plan_id), any_plan_id, plan_id),\\r\\n         metric = case(\\r\\n                      \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory * 8 * 1024),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used * 8 * 1024),\\r\\n                      real(null)\\r\\n                      )\\r\\n| project plan_label = iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", strcat(\\\"Plan ID: \\\", tostring(plan_id)), strcat(\\\"Plan hash: \\\", query_plan_hash)),\\r\\n          interval_end_time,\\r\\n          metric\\r\\n| make-series metric = avg(metric) default = long(null) on interval_end_time from todatetime(\\\"{qdsStartTime}\\\") to todatetime(\\\"{qdsEndTime}\\\") step {timeRange:grain} by plan_label;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnnotations": true,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} {qdsMetricLabelMidsentenceCase} by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportParameterName": "selectedChartPlan",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "unstackedbar",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              },
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "plan_label",
                "createOtherGroup": null,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 2,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "chart"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "bytes"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plan_chart_bytes"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "ffe8027f-b68d-4d91-8d73-3743e54a65c3",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartPlanId",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| top 1 by collection_time_utc desc\\r\\n| project plan_id\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "73cbfd4f-8c4b-4a6a-9538-318000a212af",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartPlanHash",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| top 1 by collection_time_utc desc\\r\\n| project query_plan_hash\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "3bbed235-3813-4be5-bfe3-0766b4383fe5",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartIntervalEndTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Time (x-coordinate) selected on a chart is generated by make-series and is unlikely to match any existing interval_end_time.\\r\\n// Look up the nearest interval_end_time here.\\r\\nunion\\r\\n(\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{selectedChartPlan:$.x}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| summarize interval_end_time = max(interval_end_time)\\r\\n),\\r\\n(\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{selectedChartPlan:$.x}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where query_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {query_id}, query_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| summarize interval_end_time = min(interval_end_time)\\r\\n)\\r\\n| summarize interval_end_time = min(interval_end_time)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "58eba7e0-da24-47e5-9fc3-01af84b0046c",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridPlanId",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"print plan_id = tolong(\\\"{selectedGridPlan:$.plan_id}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridPlanHash",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"print plan_hash = \\\"{selectedGridPlan:$.query_plan_hash}\\\"\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9,
                  "id": "9a067423-b19d-4dc7-a256-e07c2b9ea121"
                },
                {
                  "id": "aa9ce676-6214-44be-8a4a-af84f775c14e",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridIntervalEndTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"print interval_end_time = \\\"{selectedGridPlan:$.interval_end_time}\\\"\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "3977044c-1e4b-4277-86a0-0cf85f2ed2e5",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedPlanId",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "grid",
                        "resultValType": "param",
                        "resultVal": "selectedGridPlanId"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "chart",
                        "resultValType": "param",
                        "resultVal": "selectedChartPlanId"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "0"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedPlanHash",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "grid",
                        "resultValType": "param",
                        "resultVal": "selectedGridPlanHash"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "chart",
                        "resultValType": "param",
                        "resultVal": "selectedChartPlanHash"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "0"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "2581ca6b-6021-4f79-96fe-3d0d49cda90c"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedIntervalEndTime",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "grid",
                        "resultValType": "param",
                        "resultVal": "selectedGridIntervalEndTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "chart",
                        "resultValType": "param",
                        "resultVal": "selectedChartIntervalEndTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "\"1900-01-01\""
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "903fef93-1c44-4bd7-867e-14b50d01f80e"
                }
              ],
              "style": "pills",
              "queryType": 9
            },
            "name": "selected_plan_parameters"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "96c6627e-1c4f-49cb-86e8-928964ecfc19",
                  "cellValue": "planTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Plan details",
                  "subTarget": "details",
                  "style": "link"
                },
                {
                  "id": "e8e0a56b-d1d9-46d0-ab32-e5864d25574f",
                  "cellValue": "planTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Plan XML",
                  "subTarget": "xmlPlan",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggBy",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "selectedPlanId",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "selectedIntervalEndTime",
                "comparison": "isNotEqualTo",
                "value": "null"
              }
            ],
            "name": "plan_detail_tabs"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"engine_version\\\",\\r\\n1, \\\"query_plan_hash\\\",\\r\\n1, \\\"last_force_failure_reason_desc\\\",\\r\\n1, \\\"plan_forcing_type_desc\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, engine_version, query_plan_hash, last_force_failure_reason_desc, plan_forcing_type_desc)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, engine_version, query_plan_hash, last_force_failure_reason_desc, plan_forcing_type_desc\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"engine_version\\\", engine_version,\\r\\n                                    plan_property_name == \\\"query_plan_hash\\\", query_plan_hash,\\r\\n                                    plan_property_name == \\\"last_force_failure_reason_desc\\\", last_force_failure_reason_desc,\\r\\n                                    plan_property_name == \\\"plan_forcing_type_desc\\\", plan_forcing_type_desc,\\r\\n                                    \\\"\\\"\\r\\n                                    )\\r\\n| project-away engine_version, query_plan_hash, last_force_failure_reason_desc, plan_forcing_type_desc\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_string"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"is_parallel_plan\\\",\\r\\n1, \\\"is_forced_plan\\\",\\r\\n1, \\\"is_natively_compiled\\\",\\r\\n1, \\\"has_compile_replay_script\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, is_parallel_plan, is_forced_plan, is_natively_compiled, has_compile_replay_script)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, is_parallel_plan, is_forced_plan, is_natively_compiled, has_compile_replay_script\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"is_parallel_plan\\\", is_parallel_plan,\\r\\n                                    plan_property_name == \\\"is_forced_plan\\\", is_forced_plan,\\r\\n                                    plan_property_name == \\\"is_natively_compiled\\\", is_natively_compiled,\\r\\n                                    plan_property_name == \\\"has_compile_replay_script\\\", has_compile_replay_script,\\r\\n                                    bool(null)\\r\\n                                    )\\r\\n| project-away is_parallel_plan, is_forced_plan, is_natively_compiled, has_compile_replay_script\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "plan_property_value",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "Subtract",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_boolean"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"plan_id\\\",\\r\\n1, \\\"plan_group_id\\\",\\r\\n1, \\\"force_failure_count\\\",\\r\\n1, \\\"plan_count_compiles\\\",\\r\\n1, \\\"compatibility_level\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, plan_id, plan_group_id, force_failure_count, plan_count_compiles, compatibility_level)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, plan_id, plan_group_id, force_failure_count, plan_count_compiles, compatibility_level\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"plan_id\\\", plan_id,\\r\\n                                    plan_property_name == \\\"plan_group_id\\\", plan_group_id,\\r\\n                                    plan_property_name == \\\"force_failure_count\\\", force_failure_count,\\r\\n                                    plan_property_name == \\\"plan_count_compiles\\\", plan_count_compiles,\\r\\n                                    plan_property_name == \\\"compatibility_level\\\", tolong(compatibility_level),\\r\\n                                    long(null)\\r\\n                                    )\\r\\n| project-away plan_id, plan_group_id, force_failure_count, plan_count_compiles, compatibility_level\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_number"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"plan_initial_compile_start_time\\\",\\r\\n1, \\\"plan_last_compile_start_time\\\",\\r\\n1, \\\"plan_last_execution_time\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, plan_initial_compile_start_time, plan_last_compile_start_time, plan_last_execution_time)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, plan_initial_compile_start_time, plan_last_compile_start_time, plan_last_execution_time\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"plan_initial_compile_start_time\\\", plan_initial_compile_start_time,\\r\\n                                    plan_property_name == \\\"plan_last_compile_start_time\\\", plan_last_compile_start_time,\\r\\n                                    plan_property_name == \\\"plan_last_execution_time\\\", plan_last_execution_time,\\r\\n                                    datetime(null)\\r\\n                                    )\\r\\n| project-away plan_initial_compile_start_time, plan_last_compile_start_time, plan_last_execution_time\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "plan_property_value",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_datetime"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"plan_avg_compile_duration\\\",\\r\\n1, \\\"plan_last_compile_duration\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, plan_avg_compile_duration_us, plan_last_compile_duration_us)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, plan_avg_compile_duration_us, plan_last_compile_duration_us\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"plan_avg_compile_duration\\\", plan_avg_compile_duration_us,\\r\\n                                    plan_property_name == \\\"plan_last_compile_duration\\\", toreal(plan_last_compile_duration_us),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n| project-away plan_avg_compile_duration_us, plan_last_compile_duration_us\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "plan_property_value",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 22,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_duration"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "planTabName",
                "comparison": "isEqualTo",
                "value": "details"
              },
              {
                "parameterName": "selectedPlanId",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "plan_details_group"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type == \\\"{qdsCollectionReplicaType}\\\"\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where plan_id == iif(\\\"{qdsAggBy}\\\"==\\\"query_id\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{qdsAggBy}\\\"==\\\"query_hash\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, query_plan)\\r\\n| project query_plan\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 9,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "selectedPlanId",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "selectedIntervalEndTime",
                "comparison": "isNotEqualTo",
                "value": "null"
              },
              {
                "parameterName": "planTabName",
                "comparison": "isEqualTo",
                "value": "xmlPlan"
              }
            ],
            "name": "query_xml_plan"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Top queries"
        },
        {
          "parameterName": "sqldb_single_database_query_runtime_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "top_queries_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Each connectivity probe opens a new connection and executes a simple read query. A successful connectivity probe establishes that the network connection and simple query processing was successful, but does not guarantee server or database availability and health."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "connectivity_help"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "d22c6ae2-511d-4fc3-be51-11212028d0fe",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivitySampleType",
                  "label": "Data to show",
                  "type": 10,
                  "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "Latest"
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "name": "connectivity_sample_type_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "1b807fef-bbc9-4862-aeb3-22813875dd51",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivitySampleSubtype",
                  "label": "Sample type",
                  "type": 10,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{\"value\":\"all\",\"label\":\"All\"},{\"value\":\"failed\",\"label\":\"Failed\"}]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "all"
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "connectivitySampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "connectivity_sample_subtype_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server and database names\\r\\nlet connection_server_target = (\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, database_name) by connection_server_name, connection_database_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| lookup connection_server_target on connection_server_name, connection_database_name // A failed probe has empty logical_server_name and database_name. Look it up for the most recent successful probe with the same connection names.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         database_name = iif(isempty(database_name), database_name1, database_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend sample_subtype = iif(probe_return_value != 1, \\\"failed\\\", \\\"successful\\\")\\r\\n| where \\\"{connectivitySampleSubtype}\\\" == \\\"all\\\" or (\\\"{connectivitySampleSubtype}\\\" == \\\"failed\\\" and sample_subtype == \\\"{connectivitySampleSubtype}\\\")\\r\\n| make-series metric = count() default = long(null) on probe_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2 by sample_subtype\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 4,
              "aggregation": 3,
              "title": "Select a sample",
              "noDataMessage": "No connectivity samples are available",
              "timeBrushParameterName": "timeRange",
              "exportParameterName": "connectivityHistoricalSample",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "barchart",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "failed",
                    "label": "Failed",
                    "color": "red"
                  },
                  {
                    "seriesName": "successful",
                    "label": "Successful",
                    "color": "greenDark"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "connectivitySampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "connectivity_timeline"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server name to target server/machine name\\r\\nlet connection_server_target = (\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, database_name) by connection_server_name, connection_database_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| lookup connection_server_target on connection_server_name, connection_database_name // A failed probe has empty logical_server_name and database_name. Look it up for the most recent successful probe with the same connection names.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         database_name = iif(isempty(database_name), database_name1, database_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend sample_subtype = iif(probe_return_value != 1, \\\"failed\\\", \\\"successful\\\")\\r\\n| summarize count_successful_samples = countif(sample_subtype == \\\"successful\\\"),\\r\\n            count_failed_samples = countif(sample_subtype == \\\"failed\\\")\\r\\n| project strcat(\\\"There are `\\\", count_successful_samples, \\\"` successful and `\\\", count_failed_samples, \\\"` failed connectivity probe(s) in the selected time range. Each vertical bar stands for a group of probes. Bar height is the total number of probes in a group. Select a bar to view one probe from that group, and its preceding and following probes. Zoom in to see smaller groups, down to individual probes.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "No connectivity samples are available",
              "queryType": 9,
              "visualization": "card",
              "textSettings": {
                "style": "markdown"
              }
            },
            "conditionalVisibility": {
              "parameterName": "connectivitySampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "connectivity_sample_count"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "56e281c0-0f45-4b7a-9942-9328603b6e16",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivityLatestSampleTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server and database names\\r\\nlet connection_server_target = (\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, database_name) by connection_server_name, connection_database_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| lookup connection_server_target on connection_server_name, connection_database_name // A failed probe has empty logical_server_name and database_name. Look it up for the most recent successful probe with the same connection names.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         database_name = iif(isempty(database_name), database_name1, database_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize probe_time_utc = max(probe_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "c83db031-6de6-46e6-9cf2-a5863eee0a22",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivityHistoricalSampleTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Selected time from the history chart is a binned time generated by make-series and is unlikely to match an actual sample.\\r\\n// Look up an actual sample within the sample group selected on the history chart, differentiating between samples in different series.\\r\\n// Map connection server/database name to target logical server and database names\\r\\nlet connection_server_target = (\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, database_name) by connection_server_name, connection_database_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between (todatetime(\\\"{connectivityHistoricalSample:$.x}\\\") .. (todatetime(\\\"{connectivityHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| lookup connection_server_target on connection_server_name, connection_database_name // A failed probe has empty logical_server_name and database_name. Look it up for the most recent successful probe with the same connection names.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         database_name = iif(isempty(database_name), database_name1, database_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend sample_subtype = iif(probe_return_value != 1, \\\"failed\\\", \\\"successful\\\")\\r\\n| where sample_subtype == \\\"{connectivityHistoricalSample:$.series}\\\"\\r\\n| summarize probe_time_utc = min(probe_time_utc) // Selecting any sample within a sample group is valid. Use the earliest for determinism.\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "a46d5538-ceba-4047-bf72-0f6494a4ab51",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivitySampleTime",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "connectivitySampleType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Latest",
                        "resultValType": "param",
                        "resultVal": "connectivityLatestSampleTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "connectivitySampleType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Historical",
                        "resultValType": "param",
                        "resultVal": "connectivityHistoricalSampleTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "connectivityLatestSampleTime"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "formHorizontal",
              "queryType": 9
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "alwaysHidden",
              "comparison": "isNotEqualTo"
            },
            "name": "connectivity_sample_time_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server and database names\\r\\nlet connection_server_target = (\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, database_name) by connection_server_name, connection_database_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc == todatetime(\\\"{connectivitySampleTime}\\\")\\r\\n| lookup connection_server_target on connection_server_name, connection_database_name // A failed probe has empty logical_server_name and database_name. Look it up for the most recent successful probe with the same connection names.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         database_name = iif(isempty(database_name), database_name1, database_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time = probe_time_utc, probe_time_utc, offset = format_timespan(now() - probe_time_utc, \\\"d.hh:mm:ss\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 4,
              "noDataMessage": "No sample is selected",
              "queryType": 9,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "sample_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "28ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "probe_time_utc",
                    "formatter": 6,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      }
                    },
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "offset",
                    "formatter": 2,
                    "tooltipFormat": {
                      "tooltip": "Time difference between latest probe and displayed probe"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "sample_time",
                    "label": "Probe time"
                  },
                  {
                    "columnId": "probe_time_utc",
                    "label": "Probe time (UTC)"
                  },
                  {
                    "columnId": "offset",
                    "label": "Time offset"
                  }
                ]
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "connectivitySampleTime",
              "comparison": "isNotEqualTo"
            },
            "name": "selected_connectivity_sample"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server and database names\\r\\nlet connection_server_target = (\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, database_name) by connection_server_name, connection_database_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\n// Get the latest successful probe before the current probe, and the earliest successful probe after the current probe\\r\\n// For a failed probe, these will be the last successful probe before outage and first successful probe after outage\\r\\n// For a successful probe, these will be the immediately preceding and immediately following probes\\r\\nlet range_bounds = toscalar(\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc between (({timeRange:start}) .. ({timeRange:end}))\\r\\n| lookup connection_server_target on connection_server_name, connection_database_name // A failed probe has empty logical_server_name and database_name. Look it up for the most recent successful probe with the same connection names.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         database_name = iif(isempty(database_name), database_name1, database_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize left_bound_probe_time_utc = maxif(probe_time_utc, probe_time_utc < todatetime(\\\"{connectivitySampleTime}\\\") and probe_return_value == 1),\\r\\n            right_bound_probe_time_utc = minif(probe_time_utc, probe_time_utc > todatetime(\\\"{connectivitySampleTime}\\\") and probe_return_value == 1)\\r\\n| extend bound_probe_times = pack_array(left_bound_probe_time_utc, right_bound_probe_time_utc)\\r\\n| project-away left_bound_probe_time_utc, right_bound_probe_time_utc\\r\\n);\\r\\nsqldb_single_database_connectivity\\r\\n| where probe_time_utc in (todatetime(\\\"{connectivitySampleTime}\\\"), range_bounds[0], range_bounds[1]) // The number of returned rows may be less than 3 if left/right bound probes fall outside selected time range\\r\\n| lookup connection_server_target on connection_server_name, connection_database_name // A failed probe has empty logical_server_name and database_name. Look it up for the most recent successful probe with the same connection names.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         database_name = iif(isempty(database_name), database_name1, database_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| order by probe_time_utc asc\\r\\n| project probe_time_utc,\\r\\n          offset = format_timespan(probe_time_utc - todatetime(\\\"{connectivitySampleTime}\\\"), \\\"d.hh:mm:ss\\\"),\\r\\n          probe_return_value,\\r\\n          error_number,\\r\\n          error_message,\\r\\n          error_state,\\r\\n          connection_server_name,\\r\\n          connection_database_name,\\r\\n          connection_application_intent,\\r\\n          connection_timeout_seconds,\\r\\n          execution_timeout_seconds,\\r\\n          client_connection_id\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Connectivity probes",
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "probe_time_utc",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "28ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "offset",
                    "formatter": 2,
                    "formatOptions": {
                      "customColumnWidthSetting": "15ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "The difference between selected probe time and preceding or following probe time"
                    }
                  },
                  {
                    "columnMatch": "probe_return_value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "1",
                          "representation": "success",
                          "text": "{0} - Successful"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "0",
                          "representation": "failed",
                          "text": "{0} - Failed"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Unknown",
                          "text": "{0}{1}"
                        }
                      ],
                      "customColumnWidthSetting": "18ch"
                    }
                  },
                  {
                    "columnMatch": "connection_server_name",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "30ch"
                    }
                  },
                  {
                    "columnMatch": "connection_timeout_seconds",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "execution_timeout_seconds",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "probe_time_utc",
                    "label": "Probe time"
                  },
                  {
                    "columnId": "offset",
                    "label": "Time offset"
                  },
                  {
                    "columnId": "probe_return_value",
                    "label": "Result"
                  },
                  {
                    "columnId": "error_number",
                    "label": "Error number"
                  },
                  {
                    "columnId": "error_message",
                    "label": "Error message"
                  },
                  {
                    "columnId": "error_state",
                    "label": "Error state"
                  },
                  {
                    "columnId": "connection_server_name",
                    "label": "Connection server"
                  },
                  {
                    "columnId": "connection_database_name",
                    "label": "Database"
                  },
                  {
                    "columnId": "connection_application_intent",
                    "label": "Application intent"
                  },
                  {
                    "columnId": "connection_timeout_seconds",
                    "label": "Connection timeout"
                  },
                  {
                    "columnId": "execution_timeout_seconds",
                    "label": "Execution timeout"
                  },
                  {
                    "columnId": "client_connection_id",
                    "label": "Client connection ID"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "connectivitySampleTime",
              "comparison": "isNotEqualTo"
            },
            "name": "connectivity_probe"
          },
          {
            "type": 1,
            "content": {
              "json": "If a failed probe is displayed, then the last successful probe before that failed probe, and the first successful probe after that failed probe are displayed as well, if they are present in the selected time range.\r\n\r\nIf a successful probe is displayed, then the immediately preceding and immediately following successful probes, if any, are displayed as well."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "connectivity_probes_help"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Connectivity"
        },
        {
          "parameterName": "sqldb_single_database_connectivity",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "connectivity_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_sql_backup_history\\r\\n| where collection_time_utc between (({timeRange:start}) .. ({timeRange:end}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| sort by backup_type_desc asc, backup_start_time_utc asc\\r\\n| extend backup_duration_seconds = datetime_diff(\\\"second\\\", backup_finish_time_utc, backup_start_time_utc),\\r\\n         backup_type_midsentence_case = tolower(backup_type_desc),\\r\\n         backup_interval_seconds = iif(backup_type_desc == prev(backup_type_desc), datetime_diff(\\\"second\\\", backup_start_time_utc, prev(backup_start_time_utc)), long(null))\\r\\n| summarize count_backups = count(),\\r\\n            avg_backup_duration_seconds = avg(backup_duration_seconds),\\r\\n            min_backup_duration_seconds = minif(backup_duration_seconds, backup_duration_seconds > 0),\\r\\n            max_backup_duration_seconds = maxif(backup_duration_seconds, backup_duration_seconds > 0),\\r\\n            p90_backup_duration_seconds = percentile(backup_duration_seconds, 90),\\r\\n            avg_backup_interval_seconds = avg(backup_interval_seconds),\\r\\n            min_backup_interval_seconds = minif(backup_interval_seconds, backup_interval_seconds > 0),\\r\\n            max_backup_interval_seconds = maxif(backup_interval_seconds, backup_interval_seconds > 0),\\r\\n            p90_backup_interval_seconds = percentile(backup_interval_seconds, 90)\\r\\n            by backup_type_desc, backup_type_midsentence_case\\r\\n| extend avg_backup_duration_seconds = format_timespan(1s * iif(isnan(avg_backup_duration_seconds), real(null), avg_backup_duration_seconds), \\\"d.hh:mm:ss\\\"),\\r\\n         min_backup_duration_seconds = format_timespan(1s * min_backup_duration_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         max_backup_duration_seconds = format_timespan(1s * max_backup_duration_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         p90_backup_duration_seconds = format_timespan(1s * p90_backup_duration_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         avg_backup_interval_seconds = format_timespan(1s * iif(isnan(avg_backup_interval_seconds), real(null), avg_backup_interval_seconds), \\\"d.hh:mm:ss\\\"),\\r\\n         min_backup_interval_seconds = format_timespan(1s * min_backup_interval_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         max_backup_interval_seconds = format_timespan(1s * max_backup_interval_seconds, \\\"d.hh:mm:ss\\\"),\\r\\n         p90_backup_interval_seconds = format_timespan(1s * p90_backup_interval_seconds, \\\"d.hh:mm:ss\\\")\\r\\n| extend duration_stats = bag_pack(\\\"Statistic\\\", \\\"Backup duration\\\", \\\"Average\\\", avg_backup_duration_seconds, \\\"Minimum\\\", min_backup_duration_seconds, \\\"Maximum\\\", max_backup_duration_seconds, \\\"90th percentile\\\", p90_backup_duration_seconds),\\r\\n         interval_stats = bag_pack(\\\"Statistic\\\", \\\"Backup interval\\\", \\\"Average\\\", avg_backup_interval_seconds, \\\"Minimum\\\", min_backup_interval_seconds, \\\"Maximum\\\", max_backup_interval_seconds, \\\"90th percentile\\\", p90_backup_interval_seconds),\\r\\n         tile_ordinal = case(\\r\\n                            backup_type_desc == \\\"Full\\\", 1,\\r\\n                            backup_type_desc == \\\"Differential\\\", 2,\\r\\n                            backup_type_desc == \\\"Log\\\", 3,\\r\\n                            0\\r\\n                            )\\r\\n| project backup_type_desc, backup_type_midsentence_case, count_backups, avg_backup_interval_seconds, tile_ordinal, backup_stats = dynamic_to_json(pack_array(duration_stats, interval_stats));\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "title": "Backup summary",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "backup_stats",
                  "parameterName": "backup_stats",
                  "parameterType": 1
                },
                {
                  "fieldName": "backup_type_desc",
                  "parameterName": "backup_type_desc",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "backup_type_desc",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "colors",
                    "thresholdsGrid": [
                      {
                        "operator": "==",
                        "thresholdValue": "Full",
                        "representation": "blueDark",
                        "text": "{0}{1}"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "Differential",
                        "representation": "turquoise",
                        "text": "{0}{1}"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "Log",
                        "representation": "green",
                        "text": "{0}{1}"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "text": "{0}{1}"
                      }
                    ]
                  },
                  "tooltipFormat": {
                    "tooltip": "The number of [\"backup_type_midsentence_case\"] backups in selected time range and average backup interval, if available"
                  }
                },
                "leftContent": {
                  "columnMatch": "count_backups",
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "avg_backup_interval_seconds",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": "is Empty",
                        "representation": "Refresh",
                        "text": "N/A"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "Refresh",
                        "text": "every {0}{1}"
                      }
                    ]
                  },
                  "numberFormat": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": false,
                "sortCriteriaField": "tile_ordinal",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "customWidth": "50",
            "name": "backup_summary"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{backup_stats}\",\"transformers\":[null]}",
              "size": 3,
              "title": "{backup_type_desc} backup statistics",
              "showExportToExcel": true,
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Average",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      },
                      "emptyValCustomText": "N/A"
                    }
                  },
                  {
                    "columnMatch": "Minimum",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      },
                      "emptyValCustomText": "N/A"
                    }
                  },
                  {
                    "columnMatch": "Maximum",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      },
                      "emptyValCustomText": "N/A"
                    }
                  },
                  {
                    "columnMatch": "90th percentile",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      },
                      "emptyValCustomText": "N/A"
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "backup_stats",
              "comparison": "isNotEqualTo"
            },
            "name": "backup _properties"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Backup operations",
              "expandable": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_sql_backup_history\\r\\n| where collection_time_utc between (({timeRange:start}) .. ({timeRange:end}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name =~ @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where isempty(\\\"{backup_type_desc}\\\") or (isnotempty(\\\"{backup_type_desc}\\\") and backup_type_desc == \\\"{backup_type_desc}\\\")\\r\\n| sort by case(backup_type_desc == \\\"Full\\\", 1, backup_type_desc == \\\"Differential\\\", 2, backup_type_desc == \\\"Log\\\", 3, 0) asc, backup_start_time_utc desc\\r\\n| project backup_type_desc,\\r\\n          backup_start_time_utc,\\r\\n          backup_finish_time_utc,\\r\\n          backup_interval = iif(backup_type_desc == next(backup_type_desc), datetime_diff(\\\"second\\\", backup_start_time_utc, next(backup_start_time_utc)), long(null)),\\r\\n          backup_duration_seconds = datetime_diff(\\\"second\\\", backup_finish_time_utc, backup_start_time_utc),\\r\\n          is_within_short_term_retention,\\r\\n          backup_file_id\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 1,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Log",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Differential",
                                "representation": "turquoise",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Full",
                                "representation": "blueDark",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Backup type",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Log",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Differential",
                                "representation": "turquoise",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Full",
                                "representation": "blueDark",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "backup_type_desc",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "backup_start_time_utc",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "Shown using the local time of the browser"
                          }
                        },
                        {
                          "columnMatch": "backup_finish_time_utc",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "Shown using the local time of the browser"
                          }
                        },
                        {
                          "columnMatch": "backup_interval",
                          "formatter": 8,
                          "formatOptions": {
                            "palette": "orange"
                          },
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 2
                            },
                            "emptyValCustomText": "N/A"
                          },
                          "tooltipFormat": {
                            "tooltip": "Duration between the start of the immediately previous backup and start of this backup"
                          }
                        },
                        {
                          "columnMatch": "backup_duration_seconds",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "palette": "purple"
                          },
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 2
                            }
                          }
                        },
                        {
                          "columnMatch": "is_within_short_term_retention",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "Disable",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          },
                          "tooltipFormat": {
                            "tooltip": "Whether this backup is within the short-term retention period for the database at the time of data collection"
                          }
                        },
                        {
                          "columnMatch": "Group",
                          "formatter": 1
                        }
                      ],
                      "rowLimit": 500,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "backup_type_desc"
                        ],
                        "expandTopLevel": true
                      },
                      "labelSettings": [
                        {
                          "columnId": "backup_type_desc",
                          "label": "Backup type"
                        },
                        {
                          "columnId": "backup_start_time_utc",
                          "label": "Start time"
                        },
                        {
                          "columnId": "backup_finish_time_utc",
                          "label": "Finish time"
                        },
                        {
                          "columnId": "backup_interval",
                          "label": "Interval"
                        },
                        {
                          "columnId": "backup_duration_seconds",
                          "label": "Duration"
                        },
                        {
                          "columnId": "is_within_short_term_retention",
                          "label": "In retention"
                        },
                        {
                          "columnId": "backup_file_id",
                          "label": "Backup file ID"
                        }
                      ]
                    }
                  },
                  "name": "backup_details"
                }
              ]
            },
            "name": "backup_detail_group"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Backup"
        },
        {
          "parameterName": "sqldb_single_database_sql_backup_history",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "backup_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
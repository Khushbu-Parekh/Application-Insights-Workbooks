{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxClusterUri",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          },
          {
            "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxDatabase",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          }
        ],
        "style": "pills",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "neverShow",
        "comparison": "isNotEqualTo"
      },
      "name": "link_adx_parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Data store",
        "expandable": true,
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "a762a2ae-beec-4bf5-9f4a-28bea2d2f737",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResourceId",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "value": ""
                },
                {
                  "id": "83420d36-0646-40aa-9637-d06a3d2a6145",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResource",
                  "type": 1,
                  "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{watcherResourceId}?api-version=2023-03-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":null}",
                  "isHiddenWhenLocked": true,
                  "queryType": 12
                },
                {
                  "id": "a6cd9521-127a-43bd-9227-6bcd67756456",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherName",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.name\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxClusterUri",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.properties.datastore.adxClusterUri\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8,
                  "id": "f0889b5f-3fa4-40a0-838d-443b4c0472b6"
                },
                {
                  "id": "0797c608-2ecf-4711-ba9b-6d110f10acd3",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxDatabase",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$.properties.datastore.adxDatabaseResourceId\",\"columnid\":\"value\",\"columnType\":\"string\",\"substringRegexMatch\":\".*/(.*)\",\"substringReplace\":\"$1\"}]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "id": "1b7d18f3-88a9-40ed-9162-92710b29ba69",
                  "version": "KqlParameterItem/1.0",
                  "name": "dataStore",
                  "label": "Choose a data store",
                  "type": 10,
                  "description": "By default, the workbook loads data from the data store for the current database watcher. You may use an alternate data store by entering its Kusto query URI and database name.",
                  "isRequired": true,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"[{\\\"value\\\":\\\"watcher\\\",\\\"label\\\":\\\"{watcherName}\\\"},{\\\"value\\\":\\\"alternate\\\",\\\"label\\\":\\\"Alternate\\\"}]\",\"transformers\":null}",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "queryType": 8,
                  "value": "watcher"
                }
              ],
              "style": "above",
              "queryType": 12
            },
            "customWidth": "30",
            "name": "watcher_adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Kusto query URI: `{watcherAdxClusterUri}` </p>\r\nKusto database: `{watcherAdxDatabase}`"
            },
            "customWidth": "70",
            "conditionalVisibilities": [
              {
                "parameterName": "watcherName",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxDatabase",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "dataStore",
                "comparison": "isEqualTo",
                "value": "watcher"
              }
            ],
            "name": "watcher_data_store"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "bbce4b83-dae6-46e0-bf67-c99ee0ea21f0",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxClusterUri",
                  "label": "Kusto query URI",
                  "type": 1,
                  "description": "Enter a Kusto query URI for the alternate data store. Most commonly, Kusto query URI format is: https://{kusto-cluster-name}.{region}.kusto.windows.net/",
                  "isRequired": true,
                  "value": ""
                },
                {
                  "id": "99cdb447-94d3-40c7-b902-c98628fb736a",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxDatabase",
                  "label": "Kusto database",
                  "type": 1,
                  "description": "Enter a Kusto database name for the alternate data store",
                  "isRequired": true
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "70",
            "conditionalVisibility": {
              "parameterName": "dataStore",
              "comparison": "isEqualTo",
              "value": "alternate"
            },
            "name": "override_adx_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterUri",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxClusterUri",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    }
                  ]
                },
                {
                  "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxDatabase",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxDatabase",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    }
                  ]
                },
                {
                  "id": "c5aca9de-de62-466e-bea8-9a149e935c4f",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterPingResult",
                  "label": "Kusto query URI ping result",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show databases\\r\\n| where DatabaseName == @\\\"{adxDatabase}\\\"\\r\\n| project 1\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9,
                  "value": null
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Cannot connect to Kusto query URI `{adxClusterUri}`, database `{adxDatabase}`. The Kusto cluster may be stopped or unreachable, specified cluster URI may be invalid, or permissions may be insufficient.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "adxClusterPingResult",
                "comparison": "isNotEqualTo",
                "value": "1"
              },
              {
                "parameterName": "adxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "adxDatabase",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "missing_data_bad_permissions_text"
          }
        ],
        "exportParameters": true
      },
      "name": "data_store_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "38d18c5b-3cca-4bae-85b7-c74821db1d12",
            "version": "KqlParameterItem/1.0",
            "name": "count_sqldb_tables",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName startswith \\\"sqldb_\\\"\\r\\n| summarize cnt = tostring(count())\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_properties",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_properties\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "3883c57f-1f6f-4328-aece-f46b78258974",
            "value": null
          },
          {
            "id": "164fc8bc-15fa-44b2-8bc9-62d640bafe32",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_resource_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_resource_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "6bb1d339-6528-43fe-83d4-30c0fc035083",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_performance_counters_common",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_performance_counters_common\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "b62888c4-ef36-4588-8410-08403ec8dd40",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_storage_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_storage_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "e1002eb0-750b-4cb2-a034-e7660e2a9be2",
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_resource_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_resource_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "056a5833-745c-4022-bf4e-60eff021c69b"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_performance_counters_common",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_performance_counters_common\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "ca4957a8-76d5-4adb-aa79-f50bf3cf638e"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "1d87db0e-8cdd-493c-8188-5738a18d53df"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_storage_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_storage_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "ebabe840-e612-4eb0-9830-cc6f21b2a1a7"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_properties",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_properties\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "193d824d-0573-4d02-a55e-bf8a193038a5"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_query_runtime_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_query_runtime_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "85245fc3-e8ba-4183-a691-ade9178f7e2a",
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_query_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_query_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "61e2eb33-89e0-478e-ba46-ff4ff2885fe8",
            "value": null
          }
        ],
        "style": "above",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "name": "table_presence_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "290bc25c-7ae2-414b-8e4b-2a06325fe590",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 3600000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "26ec743a-48d3-4e5b-b5e4-7ce839f08001",
            "version": "KqlParameterItem/1.0",
            "name": "serverNameFilterValue",
            "label": "Logical server",
            "type": 1,
            "description": "Enter a value to filter by full or partial logical server name",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Logical server name filter value may not contain double quotes"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": ""
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "elasticPoolNameFilterValue",
            "type": 1,
            "description": "Enter a value to filter by full or partial elastic pool name",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Elastic pool name filter value may not contain double quotes"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "100b2ad3-6848-4155-91bc-1b8734be065f",
            "label": "Elastic pool",
            "value": ""
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "databaseNameFilterValue",
            "type": 1,
            "description": "Enter a value to filter by full or partial database name",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Database name filter value may not contain double quotes"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "78f02e62-147d-49df-b4cb-58a7bcdd524c",
            "label": "Database",
            "value": ""
          },
          {
            "id": "9353f345-7d22-419c-b9cf-a39647fff8fd",
            "version": "KqlParameterItem/1.0",
            "name": "matchPattern",
            "label": "Match pattern",
            "type": 2,
            "description": "Select a string match operator to filter by logical server, elastic pool, or database name",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    {\"value\":\"startswith\",\"label\":\"starts with\"},\r\n    {\"value\":\"contains\",\"label\":\"contains\"},\r\n    {\"value\":\"endswith\",\"label\":\"ends with\"},\r\n    {\"value\":\"!startswith\",\"label\":\"does not start with\"},\r\n    {\"value\":\"!contains\",\"label\":\"does not contain\"},\r\n    {\"value\":\"!endswith\",\"label\":\"does not end with\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "contains"
          },
          {
            "id": "7fc24d10-032f-4d35-950c-ca95e354c95a",
            "version": "KqlParameterItem/1.0",
            "name": "serverNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "serverNameFilterValue",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no logical_server_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "startswith",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name startswith @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "contains",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name contains @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "endswith",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name endswith @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!startswith",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name !startswith @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!contains",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name !contains @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!endswith",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name !endswith @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no logical_server_name filter"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "25b19c74-907f-4947-9228-9ff7c62d22e1",
            "version": "KqlParameterItem/1.0",
            "name": "elasticPoolNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "elasticPoolNameFilterValue",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no elastic_pool_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "startswith",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name startswith @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "contains",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name contains @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "endswith",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name endswith @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!startswith",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name !startswith @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!contains",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name !contains @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!endswith",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name !endswith @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no elastic_pool_name filter"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "95a28bc5-5308-489c-9609-c0e9f694c47b",
            "version": "KqlParameterItem/1.0",
            "name": "databaseNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "databaseNameFilterValue",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no database_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "startswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name startswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "contains",
                  "resultValType": "static",
                  "resultVal": "| where database_name contains @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "endswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name endswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!startswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name !startswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!contains",
                  "resultValType": "static",
                  "resultVal": "| where database_name !contains @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!endswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name !endswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no database_name filter"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "f245be88-fc0c-4d15-8f8a-9df59dc79433",
            "version": "KqlParameterItem/1.0",
            "name": "haReplica",
            "label": "HA replica",
            "type": 2,
            "description": "Set to Yes to show data from high availability replicas, if any",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[{\"value\":\"false\",\"label\":\"No\"},{\"value\":\"true\",\"label\":\"Yes\"}]",
            "value": "false"
          },
          {
            "id": "af2747c0-e919-4558-ac14-bbb8130320a1",
            "version": "KqlParameterItem/1.0",
            "name": "showDescriptions",
            "label": "Show descriptions",
            "type": 10,
            "description": "Shows descriptions next to charts",
            "isRequired": true,
            "isGlobal": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"true\",\"label\":\"Yes\"},{\"value\":\"false\",\"label\":\"No\"}]",
            "value": "false"
          },
          {
            "id": "0183848b-e820-4d26-8264-5eaf9e65e6b9",
            "version": "KqlParameterItem/1.0",
            "name": "grainFactor",
            "label": "Grain factor",
            "type": 2,
            "description": "Higher time grain provides more details on charts when granular data exists.",
            "isRequired": true,
            "value": "4",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3},{\"value\":4,\"label\":4},{\"value\":5,\"label\":5},{\"value\":6,\"label\":6}]"
          },
          {
            "id": "5308da78-e372-4f1a-a428-c0bedd9c2f3a",
            "version": "KqlParameterItem/1.0",
            "name": "tabName",
            "type": 1,
            "value": "Database heatmaps",
            "isHiddenWhenLocked": true
          },
          {
            "id": "51f0fad6-6b64-4b6b-a389-2ece23283ea1",
            "version": "KqlParameterItem/1.0",
            "name": "singleDatabaseCountQuery",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "sqldb_single_database_properties",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "1",
                  "resultValType": "static",
                  "resultVal": "sqldb_single_database_properties | where sample_time_utc > ago(72h) or sample_time_utc between ({timeRange:start} .. {timeRange:end}) | project sample_time_utc, unique_name = strcat(logical_server_name, database_name) | summarize total_targets = dcount(unique_name)"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "print 0"
                }
              }
            ]
          },
          {
            "id": "e7023a66-01b2-448d-98e6-57a088433fa8",
            "version": "KqlParameterItem/1.0",
            "name": "elasticPoolCountQuery",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "sqldb_elastic_pool_properties",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "1",
                  "resultValType": "static",
                  "resultVal": "sqldb_elastic_pool_properties | where sample_time_utc > ago(72h) or sample_time_utc between ({timeRange:start} .. {timeRange:end})| project sample_time_utc, unique_name = strcat(logical_server_name, elastic_pool_name) | summarize total_targets = dcount(unique_name)"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "print 0"
                }
              }
            ]
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Overview",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let time_range = datatable(key:int, time_range_start:datetime, time_range_end:datetime) [\\r\\n1, datetime(\\\"{timeRange:startISO}\\\"), datetime(\\\"{timeRange:endISO}\\\")\\r\\n];\\r\\nlet single_database_target_count = toscalar(\\r\\n{singleDatabaseCountQuery}\\r\\n);\\r\\nlet elastic_pool_target_count = toscalar(\\r\\n{elasticPoolCountQuery}\\r\\n);\\r\\ntime_range\\r\\n| project time_range_start, time_range_end, time_range_duration = datetime_diff('second', time_range_end, time_range_start), single_database_target_count, elastic_pool_target_count, last_refresh_time = now(), ingestion_stats_link = \\\"Community-Workbooks/Database watcher/Ingestion stats\\\", adx_link = strcat(trim_end(\\\"/\\\", \\\"{adxClusterUri}\\\"), \\\"/\\\", \\\"{adxDatabase}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "time_range_start",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Start of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_end",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "End of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_duration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "single_database_target_count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Total monitored databases in selected time range"
                    }
                  },
                  {
                    "columnMatch": "elastic_pool_target_count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Total monitored elastic pools in selected time range"
                    }
                  },
                  {
                    "columnMatch": "last_refresh_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Workbook refresh date and time"
                    }
                  },
                  {
                    "columnMatch": "ingestion_stats_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "linkLabel": "Ingestion statistics",
                      "linkIsContextBlade": true,
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "column",
                        "templateId": "ingestion_stats_link",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "Data ingestion statistics",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "adxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "adxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "targetType",
                            "source": "static",
                            "value": "sqldb"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "View ingestion statistics including ingestion latency for each table"
                    }
                  },
                  {
                    "columnMatch": "adx_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "Url",
                      "linkLabel": "Query ADX database"
                    },
                    "tooltipFormat": {
                      "tooltip": "Explore monitoring data using ad-hoc KQL queries"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "time_range_start",
                    "label": "Time range start"
                  },
                  {
                    "columnId": "time_range_end",
                    "label": "Time range end"
                  },
                  {
                    "columnId": "time_range_duration",
                    "label": "Time range duration"
                  },
                  {
                    "columnId": "single_database_target_count",
                    "label": "Databases"
                  },
                  {
                    "columnId": "elastic_pool_target_count",
                    "label": "Elastic pools"
                  },
                  {
                    "columnId": "last_refresh_time",
                    "label": "Last refresh"
                  },
                  {
                    "columnId": "ingestion_stats_link",
                    "label": "Data ingestion"
                  },
                  {
                    "columnId": "adx_link",
                    "label": "Data store"
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibility": {
              "parameterName": "sqldb_single_database_resource_utilization",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "header_time_range_single_database"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let time_range = datatable(key:int, time_range_start:datetime, time_range_end:datetime) [\\r\\n1, datetime(\\\"{timeRange:startISO}\\\"), datetime(\\\"{timeRange:endISO}\\\")\\r\\n];\\r\\nlet elastic_pool_target_count = toscalar(\\r\\n{elasticPoolCountQuery}\\r\\n);\\r\\ntime_range\\r\\n| project time_range_start, time_range_end, time_range_duration = datetime_diff('second', time_range_end, time_range_start), elastic_pool_target_count, last_refresh_time = now(), ingestion_stats_link = \\\"Community-Workbooks/Database watcher/ingestion stats\\\", adx_link = strcat(trim_end(\\\"/\\\", \\\"{adxClusterUri}\\\"), \\\"/\\\", \\\"{adxDatabase}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "time_range_start",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Start of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_end",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "End of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_duration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "last_refresh_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Workbook refresh date and time"
                    }
                  },
                  {
                    "columnMatch": "ingestion_stats_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "linkLabel": "Ingestion statistics",
                      "linkIsContextBlade": true,
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "column",
                        "templateId": "ingestion_stats_link",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "Data ingestion statistics",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "adxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "adxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "targetType",
                            "source": "static",
                            "value": "sqldb"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "View ingestion statistics including ingestion latency for each table"
                    }
                  },
                  {
                    "columnMatch": "adx_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "Url",
                      "linkLabel": "Query ADX database"
                    },
                    "tooltipFormat": {
                      "tooltip": "Explore monitoring data using ad-hoc KQL queries"
                    }
                  },
                  {
                    "columnMatch": "last_latency_seconds",
                    "formatter": 2,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "The time from collection to ingestion, at 90th percentile for selected time range"
                    }
                  },
                  {
                    "columnMatch": "latency_trend",
                    "formatter": 21,
                    "formatOptions": {
                      "min": 0,
                      "max": 20,
                      "palette": "turquoise"
                    },
                    "tooltipFormat": {
                      "tooltip": "Data latency trend in selected time range"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "time_range_start",
                    "label": "Time range start"
                  },
                  {
                    "columnId": "time_range_end",
                    "label": "Time range end"
                  },
                  {
                    "columnId": "time_range_duration",
                    "label": "Time range duration"
                  },
                  {
                    "columnId": "elastic_pool_target_count",
                    "label": "Elastic pools"
                  },
                  {
                    "columnId": "last_refresh_time",
                    "label": "Last refresh"
                  },
                  {
                    "columnId": "ingestion_stats_link",
                    "label": "Data ingestion"
                  },
                  {
                    "columnId": "adx_link",
                    "label": "Data store"
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "sqldb_elastic_pool_resource_utilization",
                "comparison": "isEqualTo",
                "value": "1"
              },
              {
                "parameterName": "sqldb_single_database_resource_utilization",
                "comparison": "isNotEqualTo",
                "value": "1"
              }
            ],
            "name": "header_time_range_elastic_pool"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "header_group"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "tabStyle": "bigger",
        "links": [
          {
            "id": "10e98cdf-277d-4010-ac79-cf8c5c92694d",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Database heatmaps",
            "subTarget": "Database heatmaps",
            "style": "link"
          },
          {
            "id": "56dcdc60-6565-4d32-817f-184cef1d9d05",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Elastic pool heatmaps",
            "subTarget": "Elastic pool heatmaps",
            "style": "link"
          },
          {
            "id": "9acdfd5b-d8b9-4708-b6b4-8605f0e1da6e",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Databases",
            "subTarget": "Databases",
            "style": "link"
          },
          {
            "id": "194f216f-7f34-4ffc-9160-41ce0d27e228",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Elastic pools",
            "subTarget": "Elastic pools",
            "style": "link"
          },
          {
            "id": "4711f218-a43c-4d49-8c28-904e69e01909",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Top queries",
            "subTarget": "Top queries",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "top_tabs"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "ea8899df-fb45-425b-905e-7aa7865b9d24",
            "version": "KqlParameterItem/1.0",
            "name": "databaseHeatmapGroupBy",
            "label": "Group by",
            "type": 10,
            "description": "Display hexagons in groups",
            "isRequired": true,
            "value": "server",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"server\",\"label\":\"Logical server\"},{\"value\":\"server_and_pool\",\"label\":\"Elastic pool\"}]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "database_heatmap_parameters"
    },
    {
      "type": 1,
      "content": {
        "json": "* On each heatmap, a hexagon represents a single database\r\n* Heatmaps show top resource consuming databases. Use name filters or the `Databases` grid to find other databases.\r\n* Databases can be grouped by logical server, or by elastic pool name\r\n* Click on the database name in a hexagon to open a detailed dashboard for that database\r\n* Hexagons colors are described below. Databases with insufficient data are colored gray.\r\n\r\n|Heatmap|Description|\r\n|:-|:-|\r\n|`CPU`, `Instance CPU`, `Data IO`, `Log write`, `Workers`|Each hexagon is colored depending on average utilization in the selected time range, by band: green (0%-49%), yellow (50%-69%), orange (70%-89%), and red (90%-100%)|\r\n|`Requests`|Each hexagon is colored depending on the average rate of requests for the database in the selected time range, with colder colors such as blue representing lower rates, and warmer colors such as red representing higher rates|\r\n|`Lock waits`|Each hexagon is colored depending on cumulative wait time of lock (`LCK_M_*`) waits for the database in the selected time range, using the green-to-red color palette. Green represents minimal waits, red represents higher waits compared to other databases on the same heatmap.|\r\n"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_heatmaps_help"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "1166beb9-0014-4358-9e65-e9098006cede",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "CPU",
            "subTarget": "CPU",
            "style": "link"
          },
          {
            "id": "f9fb9254-3c8a-4b39-af58-d3ce9f8e6bad",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Instance CPU",
            "subTarget": "Instance CPU",
            "style": "link"
          },
          {
            "id": "260aaea6-b74e-49e0-8d24-f3ec40a24941",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Data IO",
            "subTarget": "Data IO",
            "style": "link"
          },
          {
            "id": "28ab9616-c950-45de-8b96-11b2fb3c38d6",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Log write",
            "subTarget": "Log write",
            "style": "link"
          },
          {
            "id": "4e32991d-e3bf-46b9-984b-66834d53d905",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Workers",
            "subTarget": "Workers",
            "style": "link"
          },
          {
            "id": "7ac69d9e-fa5e-449d-ab27-1c600c2bab4d",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Requests",
            "subTarget": "Requests",
            "style": "link"
          },
          {
            "id": "a78d4945-2c3a-44d4-bf32-e34e12826a97",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Lock waits",
            "subTarget": "Lock waits",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "database_heatmap_tabs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_single_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, database_name, avg_cpu_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(avg_cpu_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per database in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name\\r\\n);\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name\\r\\n);\\r\\nlet agg_resource_utilization = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name\\r\\n| join kind=inner database_properties on logical_server_name, database_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name\\r\\n| join kind=inner database_properties on logical_server_name, database_name\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      ),\\r\\n          grouper = case(\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\n                        strcat(logical_server_name, \\\" | \\\", database_name)\\r\\n                        )\\r\\n);\\r\\n// Get the max value across databases in each grouper. This is used to limit to top N databases without tearing groups (logical servers, elastic pools).\\r\\nlet agg_resource_utilization_grouper = (\\r\\nagg_resource_utilization\\r\\n| summarize percentage = max(percentage) by grouper\\r\\n| sort by percentage desc\\r\\n| project grouper, percentage, grouper_number = row_number()\\r\\n);\\r\\nagg_resource_utilization\\r\\n| lookup agg_resource_utilization_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage, grouper_percentage = percentage1, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_single_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "CPU"
        }
      ],
      "name": "database_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_single_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, database_name, avg_instance_cpu_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(avg_instance_cpu_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per database in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name\\r\\n);\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name\\r\\n);\\r\\nlet agg_resource_utilization = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name\\r\\n| join kind=inner database_properties on logical_server_name, database_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      ),\\r\\n          grouper = case(\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\n                        strcat(logical_server_name, \\\" | \\\", database_name)\\r\\n                        )\\r\\n);\\r\\n// Get the max value across databases in each grouper. This is used to limit to top N databases without tearing groups (logical servers, elastic pools).\\r\\nlet agg_resource_utilization_grouper = (\\r\\nagg_resource_utilization\\r\\n| summarize percentage = max(percentage) by grouper\\r\\n| sort by percentage desc\\r\\n| project grouper, percentage, grouper_number = row_number()\\r\\n);\\r\\nagg_resource_utilization\\r\\n| lookup agg_resource_utilization_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage, grouper_percentage = percentage1, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_single_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Instance CPU"
        }
      ],
      "name": "database_instance_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_single_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, database_name, avg_data_io_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(avg_data_io_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per database in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name\\r\\n);\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name\\r\\n);\\r\\nlet agg_resource_utilization = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name\\r\\n| join kind=inner database_properties on logical_server_name, database_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      ),\\r\\n          grouper = case(\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\n                        strcat(logical_server_name, \\\" | \\\", database_name)\\r\\n                        )\\r\\n);\\r\\n// Get the max value across databases in each grouper. This is used to limit to top N databases without tearing groups (logical servers, elastic pools).\\r\\nlet agg_resource_utilization_grouper = (\\r\\nagg_resource_utilization\\r\\n| summarize percentage = max(percentage) by grouper\\r\\n| sort by percentage desc\\r\\n| project grouper, percentage, grouper_number = row_number()\\r\\n);\\r\\nagg_resource_utilization\\r\\n| lookup agg_resource_utilization_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage, grouper_percentage = percentage1, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_single_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Data IO"
        }
      ],
      "name": "database_data_io_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_single_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, database_name, avg_log_write_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(avg_log_write_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per database in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name\\r\\n);\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name\\r\\n);\\r\\nlet agg_resource_utilization = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name\\r\\n| join kind=inner database_properties on logical_server_name, database_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      ),\\r\\n          grouper = case(\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\n                        strcat(logical_server_name, \\\" | \\\", database_name)\\r\\n                        )\\r\\n);\\r\\n// Get the max value across databases in each grouper. This is used to limit to top N databases without tearing groups (logical servers, elastic pools).\\r\\nlet agg_resource_utilization_grouper = (\\r\\nagg_resource_utilization\\r\\n| summarize percentage = max(percentage) by grouper\\r\\n| sort by percentage desc\\r\\n| project grouper, percentage, grouper_number = row_number()\\r\\n);\\r\\nagg_resource_utilization\\r\\n| lookup agg_resource_utilization_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage, grouper_percentage = percentage1, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_single_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Log write"
        }
      ],
      "name": "database_log_write_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_single_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, database_name, max_worker_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(max_worker_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per database in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name\\r\\n);\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name\\r\\n);\\r\\nlet agg_resource_utilization = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name\\r\\n| join kind=inner database_properties on logical_server_name, database_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      ),\\r\\n          grouper = case(\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\n                        strcat(logical_server_name, \\\" | \\\", database_name)\\r\\n                        )\\r\\n);\\r\\n// Get the max value across databases in each grouper. This is used to limit to top N databases without tearing groups (logical servers, elastic pools).\\r\\nlet agg_resource_utilization_grouper = (\\r\\nagg_resource_utilization\\r\\n| summarize percentage = max(percentage) by grouper\\r\\n| sort by percentage desc\\r\\n| project grouper, percentage, grouper_number = row_number()\\r\\n);\\r\\nagg_resource_utilization\\r\\n| lookup agg_resource_utilization_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project logical_server_name, database_name, elastic_pool_name, percentage, grouper_percentage = percentage1, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_single_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Workers"
        }
      ],
      "name": "database_workers_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let requests = materialize (\\r\\nsqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total request count\\\")\\r\\n| project-away database_id, logical_database_id, physical_database_id, replica_type, instance_name\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsort by logical_server_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and logical_server_name == prev(logical_server_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_type, cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize requests_rate = avg(value), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per logical server, database in selected time range\\r\\nlet total_sample_count = (\\r\\nrequests\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name\\r\\n);\\r\\n// typical count of samples per logical server, database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet requests_timeline = \\r\\n(\\r\\nrequests\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| make-series metric_timeline = avg(requests_rate) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name\\r\\n);\\r\\nlet agg_requests = (\\r\\nrequests\\r\\n| lookup total_sample_count on logical_server_name, database_name\\r\\n| summarize requests_rate = sum(requests_rate * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name\\r\\n| join kind=leftouter requests_timeline on logical_server_name, database_name\\r\\n| join kind=leftouter database_properties on logical_server_name, database_name\\r\\n| project logical_server_name, database_name, elastic_pool_name, requests_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), requests_rate), metric_timeline,\\r\\n          grouper = case(\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\n                        strcat(logical_server_name, \\\" | \\\", database_name)\\r\\n                        )\\r\\n);\\r\\n// Get the max value across databases in each grouper. This is used to limit to top N databases without tearing groups (logical servers, elastic pools).\\r\\nlet agg_requests_grouper = (\\r\\nagg_requests\\r\\n| summarize requests_rate = max(requests_rate) by grouper\\r\\n| sort by requests_rate desc\\r\\n| project grouper, requests_rate, grouper_number = row_number()\\r\\n);\\r\\nagg_requests\\r\\n| lookup agg_requests_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project logical_server_name, database_name, elastic_pool_name, requests_rate, grouper_requests_rate = requests_rate1, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              }
            }
          },
          "centerContent": {
            "columnMatch": "requests_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "blue"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "requests_rate",
            "type": 4,
            "heatmapPalette": "coldHot",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_single_database_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Requests"
        }
      ],
      "name": "database_requests_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let waits = materialize (\\r\\nsqldb_single_database_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where wait_type startswith(\\\"LCK_M_\\\")\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize wait_time_ms = sum(wait_time_ms) by logical_server_name, database_name, sample_time_utc\\r\\n| sort by logical_server_name asc, sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms) and logical_server_name == prev(logical_server_name), wait_time_ms - prev(wait_time_ms), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = toreal(delta_wait_time_ms) / delta_sample_time_utc * 1000\\r\\n| summarize wait_ms_per_second = avg(value), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// Total count of samples per database in selected time range. Use base table because \\\"waits\\\" is restricted to lock waits only, for perf reasons.\\r\\nlet total_sample_count = (\\r\\nsqldb_single_database_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize total_count_samples = dcount(sample_time_utc) by logical_server_name, database_name\\r\\n);\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\ntotal_sample_count\\r\\n| join kind=leftouter waits on logical_server_name, database_name\\r\\n| make-series metric_timeline = avg(wait_ms_per_second) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name\\r\\n);\\r\\nlet agg_waits = (\\r\\ntotal_sample_count\\r\\n| join kind=leftouter waits on logical_server_name, database_name\\r\\n| summarize wait_ms_per_second = sum(wait_ms_per_second * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name\\r\\n| join kind=leftouter database_properties on logical_server_name, database_name\\r\\n| project logical_server_name,\\r\\n          database_name,\\r\\n          elastic_pool_name,\\r\\n          wait_ms_per_second = case(\\r\\n                                   isnull(count_samples) or count_samples == 0, real(0),\\r\\n                                   toreal(count_samples)/expected_sample_count < 0.5, real(null),\\r\\n                                   wait_ms_per_second\\r\\n                                   ),\\r\\n          metric_timeline,\\r\\n          grouper = case(\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n                        \\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\n                        strcat(logical_server_name, \\\" | \\\", database_name)\\r\\n                        )\\r\\n);\\r\\n// Get the max value across databases in each grouper. This is used to limit to top N databases without tearing groups (logical servers, elastic pools).\\r\\nlet agg_waits_grouper = (\\r\\nagg_waits\\r\\n| summarize wait_ms_per_second = max(wait_ms_per_second) by grouper\\r\\n| sort by wait_ms_per_second desc\\r\\n| project grouper, wait_ms_per_second, grouper_number = row_number()\\r\\n);\\r\\nagg_waits\\r\\n| lookup agg_waits_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project logical_server_name, database_name, elastic_pool_name, wait_ms_per_second, grouper_wait_ms_per_second = wait_ms_per_second1, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              }
            }
          },
          "centerContent": {
            "columnMatch": "wait_ms_per_second",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Cumulative lock wait time (in milliseconds per second) averaged over selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "blue"
            },
            "tooltipFormat": {
              "tooltip": "Cumulative lock waits over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "wait_ms_per_second",
            "type": 4,
            "heatmapPalette": "greenRed",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_single_database_wait_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Lock waits"
        }
      ],
      "name": "database_blocking_heatmap"
    },
    {
      "type": 1,
      "content": {
        "json": "* On each heatmap, a hexagon represents an elastic pool\r\n* Heatmaps show top resource consuming pools. Use name filters or the `Elastic pools` grid to find other pools.\r\n* Click on the pool name in a hexagon to open a detailed dashboard for that elastic pool\r\n* Elastic pools are grouped by logical server\r\n* Hexagons colors are described below. Eelastic pools with insufficient data are colored gray.\r\n\r\n|Heatmap|Description|\r\n|:-|:-|\r\n|`CPU`, `Instance CPU`, `Data IO`, `Log write`, `Workers`|Each hexagon is colored depending on average elastic pool resource utilization in the selected time range, by band: green (0%-49%), yellow (50%-69%), orange (70%-89%), and red (90%-100%)|\r\n|`Requests`|Each hexagon is colored depending on the average rate of requests for the elastic pool in the selected time range, with colder colors such as blue representing lower rates, and warmer colors such as red representing higher rates|\r\n|`Lock waits`|Each hexagon is colored depending on cumulative wait time of lock (`LCK_M_*`) waits for the elastic pool in the selected time range, using the green-to-red color palette. Green represents minimal waits, red represents higher waits compared to other elastic pool on the same heatmap.|\r\n"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "pool_heatmaps_help"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "659aa164-0f0f-4797-b5a9-309ca95d7e0e",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "CPU",
            "subTarget": "CPU",
            "style": "link"
          },
          {
            "id": "2bc70e01-095e-41fc-909c-365b9abe1035",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Instance CPU",
            "subTarget": "Instance CPU",
            "style": "link"
          },
          {
            "id": "2199ac10-7693-4b08-b036-82fde9f74b3e",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Data IO",
            "subTarget": "Data IO",
            "style": "link"
          },
          {
            "id": "156ca07f-885f-475e-9d22-b47064455138",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Log write",
            "subTarget": "Log write",
            "style": "link"
          },
          {
            "id": "9bef15a9-b7b5-4200-9a14-b75f996864c8",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Workers",
            "subTarget": "Workers",
            "style": "link"
          },
          {
            "id": "cf20dcc0-950d-4704-b07a-e7cabfa06326",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Requests",
            "subTarget": "Requests",
            "style": "link"
          },
          {
            "id": "b5d0e186-15d6-4d67-90c6-dff9a522f9ed",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Lock waits",
            "subTarget": "Lock waits",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "pool_heatmap_tabs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, avg_cpu_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(avg_cpu_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per pool in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name\\r\\n);\\r\\n// typical count of samples per pool in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name\\r\\n| project logical_server_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 50 by percentage desc\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL DB elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 1
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "CPU"
        }
      ],
      "name": "pool_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, avg_instance_cpu_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(avg_instance_cpu_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per pool in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name\\r\\n);\\r\\n// typical count of samples per pool in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name\\r\\n| project logical_server_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 50 by percentage desc\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL DB elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average instance CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average instance CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 1
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Instance CPU"
        }
      ],
      "name": "pool_instance_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, avg_data_io_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(avg_data_io_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per pool in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name\\r\\n);\\r\\n// typical count of samples per pool in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name\\r\\n| project logical_server_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 50 by percentage desc\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL DB elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average data IO percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average data IO utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 1
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Data IO"
        }
      ],
      "name": "pool_data_io_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, avg_log_write_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(avg_log_write_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per pool in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name\\r\\n);\\r\\n// typical count of samples per pool in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name\\r\\n| project logical_server_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 50 by percentage desc\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL DB elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average log write percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average log write utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 1
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Log write"
        }
      ],
      "name": "pool_log_write_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, max_worker_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(max_worker_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per pool in selected time range\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name\\r\\n);\\r\\n// typical count of samples per pool in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name\\r\\n| project logical_server_name, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 50 by percentage desc\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL DB elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average worker percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average worker utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 1
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Workers"
        }
      ],
      "name": "pool_workers_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let requests = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"Batch Requests/sec\\\")\\r\\n| project-away database_id, replica_type, instance_name, anchor_database_name, anchor_database_id, anchor_logical_database_id, anchor_physical_database_id\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsort by logical_server_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and logical_server_name == prev(logical_server_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_type, cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize requests_rate = avg(value), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per pool in selected time range\\r\\nlet total_sample_count = (\\r\\nrequests\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name\\r\\n);\\r\\n// typical count of samples per pool in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nrequests\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| make-series metric_timeline = avg(requests_rate) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name\\r\\n);\\r\\nrequests\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| summarize request_rate = sum(requests_rate * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name\\r\\n| project logical_server_name, elastic_pool_name, request_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(request_rate)), metric_timeline\\r\\n| top 50 by request_rate desc\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL DB elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "request_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 1
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "request_rate",
            "type": 4,
            "heatmapPalette": "coldHot",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Requests"
        }
      ],
      "name": "pool_requests_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let wait_stats = materialize (\\r\\nsqldb_elastic_pool_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where wait_type startswith(\\\"LCK_M_\\\")\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, wait_time_ms\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize wait_time_ms = sum(wait_time_ms) by logical_server_name, elastic_pool_name, sample_time_utc\\r\\n| sort by logical_server_name asc, sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms) and logical_server_name == prev(logical_server_name), wait_time_ms - prev(wait_time_ms), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = toreal(delta_wait_time_ms) / delta_sample_time_utc * 1000\\r\\n| summarize wait_ms_per_second = avg(value), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per pool in selected time range\\r\\nlet total_sample_count = (\\r\\nsqldb_elastic_pool_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize total_count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name\\r\\n);\\r\\n// typical count of samples per pool in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = \\r\\nwait_stats\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| make-series metric_timeline = avg(wait_ms_per_second) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name\\r\\n;\\r\\nwait_stats\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name\\r\\n| summarize wait_ms_per_second = sum(wait_ms_per_second * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name\\r\\n| project logical_server_name,\\r\\n          elastic_pool_name,\\r\\n          wait_ms_per_second = case(\\r\\n                                   isnull(count_samples) or count_samples == 0, real(0),\\r\\n                                   toreal(count_samples)/expected_sample_count < 0.5, real(null),\\r\\n                                   wait_ms_per_second\\r\\n                                   ),\\r\\n          metric_timeline\\r\\n| top 50 by wait_ms_per_second desc\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL DB elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              }
            }
          },
          "centerContent": {
            "columnMatch": "wait_ms_per_second",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Cumulative lock wait time (in milliseconds per second) averaged over selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "blue"
            },
            "tooltipFormat": {
              "tooltip": "Cumulative lock waits over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 1
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "wait_ms_per_second",
            "type": 4,
            "heatmapPalette": "greenRed",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_wait_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Lock waits"
        }
      ],
      "name": "pool_blocking_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let last_storage_sample = (\\r\\nsqldb_single_database_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, data_size_used_mb, data_max_size_mb, log_size_used_mb, log_max_size_mb, tempdb_data_size_used_mb, tempdb_data_max_size_mb, tempdb_log_size_used_mb, tempdb_log_max_size_mb, used_local_storage_size_mb, max_local_storage_size_mb) by logical_server_name, database_name\\r\\n| extend is_low_space = iif(\\r\\n                            iif(isnotnull(data_size_used_mb) and isnotnull(data_max_size_mb), toreal(toreal(data_size_used_mb) / data_max_size_mb), real(0)) >= 0.9\\r\\n                            or\\r\\n                            iif(isnotnull(log_size_used_mb) and isnotnull(log_max_size_mb), toreal(toreal(log_size_used_mb) / log_max_size_mb), real(0)) >= 0.7\\r\\n                            or\\r\\n                            iif(isnotnull(tempdb_data_size_used_mb) and isnotnull(tempdb_data_max_size_mb), toreal(toreal(tempdb_data_size_used_mb) / tempdb_data_max_size_mb), real(0)) >= 0.8\\r\\n                            or\\r\\n                            iif(isnotnull(tempdb_log_size_used_mb) and isnotnull(tempdb_log_max_size_mb), toreal(toreal(tempdb_log_size_used_mb) / tempdb_log_max_size_mb), real(0)) >= 0.7\\r\\n                            or\\r\\n                            iif(isnotnull(used_local_storage_size_mb) and isnotnull(max_local_storage_size_mb), toreal(toreal(used_local_storage_size_mb) / max_local_storage_size_mb), real(0)) >= 0.9\\r\\n                            , true, false)\\r\\n);\\r\\nsqldb_single_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, notable_db_scoped_configs, compatibility_level, is_auto_create_stats_on, is_auto_shrink_on, is_auto_update_stats_on, force_last_good_plan_actual_state, query_store_actual_state_desc, state_desc, log_reuse_wait_desc, database_name, updateability, logical_cpu_count, elastic_pool_name, database_engine_start_time_utc, is_accelerated_database_recovery_on, is_encrypted, service_level_objective, replica_type) by logical_server_name, database_name\\r\\n| extend db_scoped_configs = todynamic(notable_db_scoped_configs)\\r\\n| mv-expand db_scoped_configs\\r\\n| mv-expand db_scoped_config_name = db_scoped_configs.name to typeof(string), db_scoped_config_value = db_scoped_configs.value to typeof(string), db_scoped_config_value_for_secondary = db_scoped_configs.value_for_secondary to typeof(string)\\r\\n| where db_scoped_config_name == \\\"MAXDOP\\\" or db_scoped_config_name == \\\"\\\"\\r\\n| join kind=leftouter last_storage_sample on logical_server_name, database_name\\r\\n| extend count_warnings = iif(db_scoped_config_name == \\\"MAXDOP\\\" and logical_cpu_count > 8 and (toint(db_scoped_config_value) > 8 or toint(db_scoped_config_value) == 0 or toint(db_scoped_config_value_for_secondary) > 8 or toint(db_scoped_config_value_for_secondary) == 0), 1, 0)\\r\\n                          +\\r\\n                          iif(compatibility_level <= 120, 1, 0)\\r\\n                          +\\r\\n                          iif(is_auto_create_stats_on == false, 1, 0)\\r\\n                          +\\r\\n                          iif(is_auto_shrink_on == true, 1, 0)\\r\\n                          +\\r\\n                          iif(is_auto_update_stats_on == false, 1, 0)\\r\\n                          +\\r\\n                          iif(force_last_good_plan_actual_state != \\\"ON\\\" and updateability == \\\"READ_WRITE\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(query_store_actual_state_desc != \\\"READ_WRITE\\\" and updateability == \\\"READ_WRITE\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(state_desc != \\\"ONLINE\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(log_reuse_wait_desc !in~ (\\\"NOTHING\\\",\\\"OLDEST_PAGE\\\",\\\"LOG_SCAN\\\",\\\"DATABASE_SNAPSHOT_CREATION\\\",\\\"CHECKPOINT\\\"), 1, 0)\\r\\n                          +\\r\\n                          iif(is_accelerated_database_recovery_on == false, 1, 0)\\r\\n                          +\\r\\n                          iif(is_encrypted == false, 1, 0)\\r\\n| project logical_server_name, count_warnings, database_name, uptime = datetime_diff(\\\"minute\\\", now(), database_engine_start_time_utc), service_level_objective = iif(service_level_objective =~ \\\"ElasticPool\\\", \\\"Elastic pool\\\", service_level_objective), replica_type, elastic_pool_name,  is_low_space, formatted_uptime = format_timespan(1s * datetime_diff(\\\"second\\\", now(), database_engine_start_time_utc), \\\"d.hh:mm:ss\\\")\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "count_warnings",
              "formatter": 18,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": ">",
                    "thresholdValue": "0",
                    "representation": "2",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "0",
                    "representation": "Sev4",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "1",
                    "representation": "Sev3",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "3",
                    "representation": "Sev2",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "6",
                    "representation": "Sev1",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": ">=",
                    "thresholdValue": "7",
                    "representation": "Sev0",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "more",
                    "text": "[\"database_name\"]"
                  }
                ],
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                  "typeSource": "workbook",
                  "gallerySource": "default",
                  "locationSource": "workbook",
                  "workbookName": "Azure SQL database",
                  "passSpecificParams": true,
                  "templateParameters": [
                    {
                      "name": "serverName",
                      "source": "column",
                      "value": "logical_server_name"
                    },
                    {
                      "name": "databaseName",
                      "source": "column",
                      "value": "database_name"
                    },
                    {
                      "name": "timeRange",
                      "source": "parameter",
                      "value": "timeRange"
                    },
                    {
                      "name": "linkAdxClusterUri",
                      "source": "parameter",
                      "value": "adxClusterUri"
                    },
                    {
                      "name": "linkAdxDatabase",
                      "source": "parameter",
                      "value": "adxDatabase"
                    },
                    {
                      "name": "tabName",
                      "source": "static",
                      "value": "Overview"
                    },
                    {
                      "name": "haReplica",
                      "source": "parameter",
                      "value": "haReplica"
                    },
                    {
                      "name": "showDescriptions",
                      "source": "parameter",
                      "value": "showDescriptions"
                    }
                  ]
                },
                "customColumnWidthSetting": "30ch"
              },
              "tooltipFormat": {
                "tooltip": "There are [\"count_warnings\"] configuration or state warnings for [\"database_name\"]. Click on the database name to see details."
              }
            },
            {
              "columnMatch": "database_name",
              "formatter": 5
            },
            {
              "columnMatch": "replica_type",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Primary",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "HA secondary",
                    "representation": "turquoise",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Geo-replication forwarder",
                    "representation": "magenta",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Named replica",
                    "representation": "greenDark",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "elastic_pool_name",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "linkLabel": "",
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                  "typeSource": "workbook",
                  "gallerySource": "default",
                  "locationSource": "workbook",
                  "workbookName": "Azure SQL DB elastic pool",
                  "passSpecificParams": true,
                  "templateParameters": [
                    {
                      "name": "serverName",
                      "source": "column",
                      "value": "logical_server_name"
                    },
                    {
                      "name": "elasticPoolName",
                      "source": "column",
                      "value": "elastic_pool_name"
                    },
                    {
                      "name": "timeRange",
                      "source": "parameter",
                      "value": "timeRange"
                    },
                    {
                      "name": "linkAdxClusterUri",
                      "source": "parameter",
                      "value": "adxClusterUri"
                    },
                    {
                      "name": "linkAdxDatabase",
                      "source": "parameter",
                      "value": "adxDatabase"
                    },
                    {
                      "name": "tabName",
                      "source": "static",
                      "value": "Overview"
                    },
                    {
                      "name": "haReplica",
                      "source": "parameter",
                      "value": "haReplica"
                    },
                    {
                      "name": "showDescriptions",
                      "source": "parameter",
                      "value": "showDescriptions"
                    }
                  ]
                }
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "(None)"
              }
            },
            {
              "columnMatch": "uptime",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "<=",
                    "thresholdValue": "1440",
                    "representation": "green",
                    "text": "[\"formatted_uptime\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "[\"formatted_uptime\"]"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Database uptime, as days.hours:minutes:seconds. Highlighted in green for recently created or restarted databases."
              }
            },
            {
              "columnMatch": "is_low_space",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "3",
                    "text": "Yes"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "success",
                    "text": "No"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Reports whether the database is close to running out of data, log, tempdb, or local storage space. Click on the database name to see details."
              }
            },
            {
              "columnMatch": "formatted_uptime",
              "formatter": 5
            }
          ],
          "filter": true,
          "labelSettings": [
            {
              "columnId": "logical_server_name",
              "label": "Server"
            },
            {
              "columnId": "count_warnings",
              "label": "Database"
            },
            {
              "columnId": "uptime",
              "label": "Uptime"
            },
            {
              "columnId": "service_level_objective",
              "label": "Compute size"
            },
            {
              "columnId": "replica_type",
              "label": "Replica type"
            },
            {
              "columnId": "elastic_pool_name",
              "label": "Elastic pool"
            },
            {
              "columnId": "is_low_space",
              "label": "Low storage"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_single_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqldb_single_database_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "databases"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let last_performance_counters_sample = (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name == \\\"CPU usage %\\\"\\r\\n| summarize arg_max(sample_time_utc, object_name, counter_name, cntr_value) by logical_server_name, elastic_pool_name, database_id\\r\\n| summarize count_databases = dcount(database_id) by logical_server_name, elastic_pool_name\\r\\n);\\r\\nlet last_storage_sample = (\\r\\nsqldb_elastic_pool_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_data_size_used_mb, elastic_pool_data_max_size_mb, tempdb_data_size_used_mb, tempdb_data_max_size_mb, tempdb_log_size_used_mb, tempdb_log_max_size_mb, used_local_storage_size_mb, max_local_storage_size_mb) by logical_server_name, elastic_pool_name\\r\\n| extend is_low_space = iif(\\r\\n                            iif(isnotnull(elastic_pool_data_size_used_mb) and isnotnull(elastic_pool_data_max_size_mb), toreal(toreal(elastic_pool_data_size_used_mb) / elastic_pool_data_max_size_mb), toreal(0)) >= 0.9\\r\\n                            or\\r\\n                            iif(isnotnull(tempdb_data_size_used_mb) and isnotnull(tempdb_data_max_size_mb), toreal(toreal(tempdb_data_size_used_mb) / tempdb_data_max_size_mb), toreal(0)) >= 0.8\\r\\n                            or\\r\\n                            iif(isnotnull(tempdb_log_size_used_mb) and isnotnull(tempdb_log_max_size_mb), toreal(toreal(tempdb_log_size_used_mb) / tempdb_log_max_size_mb), toreal(0)) >= 0.7\\r\\n                            or\\r\\n                            iif(isnotnull(used_local_storage_size_mb) and isnotnull(max_local_storage_size_mb), toreal(toreal(used_local_storage_size_mb) / max_local_storage_size_mb), toreal(0)) >= 0.9\\r\\n                            , true, false)\\r\\n);\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, logical_cpu_count, database_engine_start_time_utc, replica_type) by logical_server_name, elastic_pool_name\\r\\n| join kind=leftouter last_storage_sample on logical_server_name, elastic_pool_name\\r\\n| join kind=leftouter last_performance_counters_sample on logical_server_name, elastic_pool_name\\r\\n| project logical_server_name, elastic_pool_name, uptime = datetime_diff(\\\"minute\\\", now(), database_engine_start_time_utc), replica_type, count_databases, is_low_space, formatted_uptime = format_timespan(1s * datetime_diff(\\\"second\\\", now(), database_engine_start_time_utc), \\\"d.hh:mm:ss\\\")\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "elastic_pool_name",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                  "typeSource": "workbook",
                  "gallerySource": "default",
                  "locationSource": "workbook",
                  "workbookName": "Azure SQL DB elastic pool",
                  "passSpecificParams": true,
                  "templateParameters": [
                    {
                      "name": "serverName",
                      "source": "column",
                      "value": "logical_server_name"
                    },
                    {
                      "name": "elasticPoolName",
                      "source": "column",
                      "value": "elastic_pool_name"
                    },
                    {
                      "name": "timeRange",
                      "source": "parameter",
                      "value": "timeRange"
                    },
                    {
                      "name": "linkAdxClusterUri",
                      "source": "parameter",
                      "value": "adxClusterUri"
                    },
                    {
                      "name": "linkAdxDatabase",
                      "source": "parameter",
                      "value": "adxDatabase"
                    },
                    {
                      "name": "tabName",
                      "source": "static",
                      "value": "Overview"
                    },
                    {
                      "name": "haReplica",
                      "source": "parameter",
                      "value": "haReplica"
                    },
                    {
                      "name": "showDescriptions",
                      "source": "parameter",
                      "value": "showDescriptions"
                    }
                  ]
                }
              }
            },
            {
              "columnMatch": "replica_type",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Primary",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "HA secondary",
                    "representation": "turquoise",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Geo-replication forwarder",
                    "representation": "magenta",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Named replica",
                    "representation": "greenDark",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "uptime",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "<=",
                    "thresholdValue": "1440",
                    "representation": "green",
                    "text": "[\"formatted_uptime\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "[\"formatted_uptime\"]"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Elastic pool uptime, as days.hours:minutes:seconds. Highlighted in green for recently created or restarted elastic pools."
              }
            },
            {
              "columnMatch": "count_databases",
              "formatter": 0,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "is_low_space",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "3",
                    "text": "Yes"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "success",
                    "text": "No"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Reports whether the elastic pool is close to running out of data, tempdb, or local storage space. Click on the elastic pool name to see details."
              }
            },
            {
              "columnMatch": "formatted_uptime",
              "formatter": 5
            }
          ],
          "filter": true,
          "labelSettings": [
            {
              "columnId": "logical_server_name",
              "label": "Server"
            },
            {
              "columnId": "elastic_pool_name",
              "label": "Elastic pool"
            },
            {
              "columnId": "uptime",
              "label": "Uptime"
            },
            {
              "columnId": "replica_type",
              "label": "Replica type"
            },
            {
              "columnId": "count_databases",
              "label": "Databases"
            },
            {
              "columnId": "is_low_space",
              "label": "Low storage"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pools"
        },
        {
          "parameterName": "sqldb_elastic_pool_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "elastic_pools"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "448a29bd-9c86-4cc9-b114-e89eb4532388",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsStartTime",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"union\\r\\n(\\r\\n// The most recent interval that is earlier than the end of time range.\\r\\n// This may be earlier than the start of time range by at most 2h.\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time between (({timeRange:start} - 2h) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize interval_start_time = max(interval_start_time)\\r\\n),\\r\\n(\\r\\n// earliest interval start within time range\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time >= {timeRange:start} and interval_start_time <= {timeRange:end}\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize interval_start_time = min(interval_start_time)\\r\\n)\\r\\n// return the earliest of these times as start of QDS range\\r\\n// if there isn't a complete QDS interval within time range, this will show the most recent available interval outside of the range\\r\\n| summarize qds_start_time = min(interval_start_time)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9
                },
                {
                  "id": "ea6d3fd1-3d78-43af-99a7-f138bdece7b6",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsEndTime",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"union\\r\\n(\\r\\n// The most recent interval that is earlier than the end of time range.\\r\\n// This may be earlier than the start of time range by at most 2h.\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time between (({timeRange:start} - 2h) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize interval_end_time = max(interval_end_time)\\r\\n),\\r\\n(\\r\\n// latest interval end within time range\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time >= {timeRange:start} and interval_start_time <= {timeRange:end}\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize interval_end_time = max(interval_end_time)\\r\\n)\\r\\n// return the latest of these times as end of QDS range\\r\\n// if there isn't a complete QDS interval within time range, this will show the latest available interval\\r\\n| summarize qds_end_time = datetime_add(\\\"second\\\", 1, max(interval_end_time)) // make-series treats the end of interval as not inclusive, fudge by 1 second\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9
                }
              ],
              "style": "above",
              "queryType": 9
            },
            "name": "top_query_qds_time_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "<span style=\"font-size:1.2em\">A top query is defined as a query consuming the most resources in a time interval. Resource consumption is reflected by metrics such as _execution count_, _CPU time_, _duration_, _logical reads_, etc. For each top query, choosing an aggregation type lets you see its _total_, _average_, _minimum_, or _maximum_ resource consumption within the selected time interval.</span>\r\n\r\n<span style=\"font-size:1.2em\">Query Store aggregates and stores data using fixed time intervals. Query statistics are collected and displayed for complete intervals only. Because of this, top query data may be delayed. For example, if Query Store interval length is one hour (which is the default configuration), then it will take at least one hour for the most recent query data to become available.</span>\r\n\r\nTop query data is obtained from [Query Store](https://go.microsoft.com/fwlink/?linkid=2213253), using [sys.query_store_query](https://go.microsoft.com/fwlink/?linkid=2213428), [sys.query_store_query_text](https://go.microsoft.com/fwlink/?linkid=2213154), [sys.query_store_plan](https://go.microsoft.com/fwlink/?linkid=2213251), [sys.query_store_runtime_stats](https://go.microsoft.com/fwlink/?linkid=2213252), [sys.query_store_wait_stats](https://go.microsoft.com/fwlink/?linkid=2213155), and other views."
            },
            "conditionalVisibilities": [
              {
                "parameterName": "showDescriptions",
                "comparison": "isEqualTo",
                "value": "true"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_help"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e7bd7068-660b-41bd-894d-b6008ac6e4ca",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsAggregation",
                  "label": "Aggregation",
                  "type": 2,
                  "description": "Select the type of aggregation to use for query runtime statistics",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"total\",\"label\":\"Total\"},\r\n    {\"value\":\"avg\",\"label\":\"Average\"},\r\n    {\"value\":\"max\",\"label\":\"Maximum\"},\r\n    {\"value\":\"min\",\"label\":\"Minimum\"},\r\n    {\"value\":\"stdev\",\"label\":\"Standard deviation\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "total"
                },
                {
                  "id": "d78e016e-7f9c-4ddb-be50-9cc3317387b6",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsMetric",
                  "label": "Metric",
                  "type": 2,
                  "description": "Find top queries sorting by selected metric in descending order",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"count_executions\",\"label\":\"Execution count\"},\r\n    {\"value\":\"duration\",\"label\":\"Duration\"},\r\n    {\"value\":\"cpu_time\",\"label\":\"CPU time\"},\r\n    {\"value\":\"logical_io_reads\",\"label\":\"Logical reads\"},\r\n    {\"value\":\"logical_io_writes\",\"label\":\"Logical writes\"},\r\n    {\"value\":\"physical_io_reads\",\"label\":\"Physical reads (pages)\"},\r\n    {\"value\":\"num_physical_io_reads\",\"label\":\"Physical reads (IOs)\"},\r\n    {\"value\":\"dop\",\"label\":\"DOP\"},\r\n    {\"value\":\"query_max_used_memory\",\"label\":\"Memory grant\"},\r\n    {\"value\":\"rowcount\",\"label\":\"Row count\"},\r\n    {\"value\":\"log_bytes_used\",\"label\":\"Transaction log space used\"},\r\n    {\"value\":\"tempdb_space_used\",\"label\":\"Tempdb space used\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "cpu_time"
                },
                {
                  "id": "45b94f24-7a79-4941-9036-2578462ffc96",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsTopQueryCount",
                  "label": "Top query limit",
                  "type": 2,
                  "description": "The number of top queries to display",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":5,\"label\":\"5\"},\r\n    {\"value\":10,\"label\":\"10\"},\r\n    {\"value\":25,\"label\":\"25\"},\r\n    {\"value\":50,\"label\":\"50\"},\r\n    {\"value\":100,\"label\":\"100\"},\r\n    {\"value\":200,\"label\":\"200\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "10"
                },
                {
                  "id": "a3523dda-4080-4f76-9e12-f6b835a09f56",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsExecutionType",
                  "label": "Execution types",
                  "type": 2,
                  "description": "Select one or more query execution types",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "0,1,2,3,4",
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"0\",\"label\":\"Regular\"},\r\n    {\"value\":\"3\",\"label\":\"Aborted\"},\r\n    {\"value\":\"4\",\"label\":\"Exception\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "value": [
                    "value::all"
                  ]
                },
                {
                  "id": "e5d2125d-9a08-4eac-b8a9-d069885a44c2",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsSelectedDatabases",
                  "label": "Databases",
                  "type": 2,
                  "description": "Select one or more databases",
                  "multiSelect": true,
                  "quote": "\"",
                  "delimiter": ",",
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize dcount_logical_server_name = dcount(logical_server_name),\\r\\n            any_logical_server_name = take_any(logical_server_name)\\r\\n  by database_name\\r\\n| project database_name, logical_server_name_agg = strcat(database_name, \\\" on \\\", iif(dcount_logical_server_name == 1, any_logical_server_name, strcat(any_logical_server_name, \\\" (+\\\", tostring(dcount_logical_server_name - 1), \\\")\\\")))\\r\\n| top 200 by tolower(database_name) asc;\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "[]",
                    "showDefault": false
                  },
                  "queryType": 9
                },
                {
                  "id": "bc7a7dae-4205-422c-9c5c-97b86ad051be",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsDatabaseNameFilter",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsSelectedDatabases",
                        "operator": "is Empty",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "// no database_name filter"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsSelectedDatabases",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "| where database_name in ({qdsSelectedDatabases})"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "// no database_name filter"
                      }
                    }
                  ]
                },
                {
                  "id": "07f39986-d4e0-4205-b586-dc4924600e4d",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsQueryHash",
                  "label": "Query hash",
                  "type": 1,
                  "description": "Enter a query hash to show top queries with that hash. This is an optional parameter.",
                  "typeSettings": {
                    "paramValidationRules": [
                      {
                        "regExp": "\\\"",
                        "match": false,
                        "message": "Query hash filter value may not contain double quotes"
                      }
                    ]
                  },
                  "value": ""
                },
                {
                  "id": "7917da4e-962c-4ce8-8296-e6f6f22e3992",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsQueryText",
                  "label": "Query text",
                  "type": 1,
                  "description": "Enter a string to find queries with SQL text containing this string. This is an optional parameter.",
                  "typeSettings": {
                    "multiLineText": true,
                    "editorLanguage": "sql",
                    "multiLineHeight": 3
                  },
                  "value": ""
                },
                {
                  "id": "5fdd560a-69f7-4aca-9dec-7d7b239f4bd3",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsMetricLabelMidsentenceCase",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "count_executions",
                        "resultValType": "static",
                        "resultVal": "execution count"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "duration",
                        "resultValType": "static",
                        "resultVal": "duration"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "cpu_time",
                        "resultValType": "static",
                        "resultVal": "CPU time"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "logical_io_reads",
                        "resultValType": "static",
                        "resultVal": "logical reads"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "logical_io_writes",
                        "resultValType": "static",
                        "resultVal": "logical writes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "physical_io_reads",
                        "resultValType": "static",
                        "resultVal": "physical reads (pages)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "num_physical_io_reads",
                        "resultValType": "static",
                        "resultVal": "physical reads (IOs)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "dop",
                        "resultValType": "static",
                        "resultVal": "DOP"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "query_max_used_memory",
                        "resultValType": "static",
                        "resultVal": "memory grant"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "rowcount",
                        "resultValType": "static",
                        "resultVal": "row count"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "log_bytes_used",
                        "resultValType": "static",
                        "resultVal": "transaction log space used"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "tempdb_space_used",
                        "resultValType": "static",
                        "resultVal": "tempdb space used"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "page_server_io_reads",
                        "resultValType": "static",
                        "resultVal": "page server reads (pages)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "param"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "13721e52-abef-4034-95e1-f7b0a13d12b3",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsMetricUnit",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "duration",
                        "resultValType": "static",
                        "resultVal": "time"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "cpu_time",
                        "resultValType": "static",
                        "resultVal": "time"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "query_max_used_memory",
                        "resultValType": "static",
                        "resultVal": "bytes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "log_bytes_used",
                        "resultValType": "static",
                        "resultVal": "bytes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "qdsMetric",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "tempdb_space_used",
                        "resultValType": "static",
                        "resultVal": "bytes"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "unitless"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "cecbb02b-a14e-4650-9d82-d9487d339b38",
                  "version": "KqlParameterItem/1.0",
                  "name": "global_query_id",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "value": "{\"logical_server_name\":\"\",\"database_name\":\"\",\"query_id\":0}"
                }
              ],
              "style": "pills",
              "queryType": 9
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "top_query_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "f0630d45-57bb-4eff-8761-fb757cd37f50",
                  "version": "KqlParameterItem/1.0",
                  "name": "showQueriesAs",
                  "label": "Show queries as",
                  "type": 10,
                  "description": "Show queries as tiles or as a grid",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"tiles\",\"label\":\"Tiles\"},\r\n    {\"value\":\"grid\",\"label\":\"Grid\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "tiles"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "20",
            "conditionalVisibilities": [
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "show_query_as_parameters"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Query Store intervals",
              "expandable": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where query_hash == iif(isnotempty(\\\"{qdsQueryHash}\\\"), \\\"{qdsQueryHash}\\\", query_hash)\\r\\n| extend interval_duration_seconds = datetime_diff(\\\"second\\\", interval_end_time, interval_start_time)\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize interval_start_time = min(interval_start_time),\\r\\n          interval_end_time = max(interval_end_time),\\r\\n          avg_interval_duration = avg(interval_duration_seconds),\\r\\n          interval_count = dcount(interval_end_time)\\r\\n          by logical_server_name, database_id, database_name\\r\\n)\\r\\n| project logical_server_name, database_name, interval_start_time, interval_end_time, avg_interval_duration = iif(isnan(avg_interval_duration), real(null), avg_interval_duration), interval_count\\r\\n| sort by tolower(logical_server_name) asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 1,
                    "noDataMessage": "There is no data for specified parameters.",
                    "queryType": 9,
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "interval_start_time",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "The start of the first Query Store interval"
                          }
                        },
                        {
                          "columnMatch": "interval_end_time",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          },
                          "tooltipFormat": {
                            "tooltip": "The end of the last Query Store interval"
                          }
                        },
                        {
                          "columnMatch": "avg_interval_duration",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "20ch"
                          },
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "Average duration of Query Store intervals. Reflects changes in interval length configuration, if any."
                          }
                        },
                        {
                          "columnMatch": "interval_count",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "The number of intervals between start and end time"
                          }
                        }
                      ],
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "database_name",
                          "label": "Database"
                        },
                        {
                          "columnId": "interval_start_time",
                          "label": "Start time"
                        },
                        {
                          "columnId": "interval_end_time",
                          "label": "End time"
                        },
                        {
                          "columnId": "avg_interval_duration",
                          "label": "Interval duration"
                        },
                        {
                          "columnId": "interval_count",
                          "label": "Intervals"
                        }
                      ]
                    },
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "boundary",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "colors",
                          "thresholdsGrid": [
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": null,
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      "leftContent": {
                        "columnMatch": "value",
                        "formatter": 6,
                        "dateFormat": {
                          "showUtcTime": true,
                          "formatName": "shortDateTimePattern"
                        },
                        "tooltipFormat": {
                          "tooltip": "Values are shown in the local time of the database engine instance"
                        }
                      },
                      "showBorder": true,
                      "size": "auto"
                    }
                  },
                  "name": "qds_interval_range"
                }
              ]
            },
            "customWidth": "80",
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_intervals_group"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_databases = dcount(strcat(logical_server_name, \\\"|\\\", database_name)),\\r\\n            dcount_query_id = dcount(strcat(logical_server_name, \\\"|\\\", database_name, \\\"|\\\", query_id)),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", avg(count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_hash\\r\\n| extend multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries in \\\", tostring(dcount_databases), \\\" databases for this query hash. Displayed query text is for one of these \\\", tostring(dcount_query_id), \\\" queries.\\\"), \\\"\\\"),\\r\\n         ranked_metric = case(\\r\\n                             \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n                             real(null)\\r\\n                             )\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank\\r\\n| sort by ranked_metric desc\\r\\n| extend rank = row_rank(ranked_metric)\\r\\n| project query_hash,\\r\\n          rank,\\r\\n          ranked_metric,\\r\\n          count_executions,\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning,\\r\\n          tile_label = strcat(\\\"Query hash: \\\", tostring(query_hash)),\\r\\n          ranks\\r\\n// Restrict by query_hash after ranking to preserve query rank value in results\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| sort by rank asc, count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Top queries ranked by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1
                },
                "subtitleContent": {
                  "columnMatch": "database_name"
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "tile_label",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "unitless"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_tiles_unitless"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_databases = dcount(strcat(logical_server_name, \\\"|\\\", database_name)),\\r\\n            dcount_query_id = dcount(strcat(logical_server_name, \\\"|\\\", database_name, \\\"|\\\", query_id)),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", avg(count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_hash\\r\\n| extend multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries in \\\", tostring(dcount_databases), \\\" databases for this query hash. Displayed query text is for one of these \\\", tostring(dcount_query_id), \\\" queries.\\\"), \\\"\\\"),\\r\\n         ranked_metric = case(\\r\\n                             \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n                             real(null)\\r\\n                             )\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank\\r\\n| sort by ranked_metric desc\\r\\n| extend rank = row_rank(ranked_metric)\\r\\n| project query_hash,\\r\\n          rank,\\r\\n          ranked_metric,\\r\\n          count_executions,\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning,\\r\\n          tile_label = strcat(\\\"Query hash: \\\", tostring(query_hash)),\\r\\n          ranks\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| sort by rank asc, count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Top queries ranked by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1
                },
                "subtitleContent": {
                  "columnMatch": "database_name"
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 22,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "tile_label",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "time"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_tiles_time"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_databases = dcount(strcat(logical_server_name, \\\"|\\\", database_name)),\\r\\n            dcount_query_id = dcount(strcat(logical_server_name, \\\"|\\\", database_name, \\\"|\\\", query_id)),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", avg(count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_hash\\r\\n| extend multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries in \\\", tostring(dcount_databases), \\\" databases for this query hash. Displayed query text is for one of these \\\", tostring(dcount_query_id), \\\" queries.\\\"), \\\"\\\"),\\r\\n         ranked_metric = case(\\r\\n                             \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory * 8 * 1024),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n                             \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used * 8 * 1024),\\r\\n                             real(null)\\r\\n                             )\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank\\r\\n| sort by ranked_metric desc\\r\\n| extend rank = row_rank(ranked_metric)\\r\\n| project query_hash,\\r\\n          rank,\\r\\n          ranked_metric,\\r\\n          count_executions,\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning,\\r\\n          tile_label = strcat(\\\"Query hash: \\\", tostring(query_hash)),\\r\\n          ranks\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| sort by rank asc, count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Top queries ranked by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                }
              ],
              "queryType": 9,
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1
                },
                "subtitleContent": {
                  "columnMatch": "database_name"
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 2,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  },
                  "tooltipFormat": {
                    "tooltip": "Query runtime statistic"
                  }
                },
                "secondaryContent": {
                  "columnMatch": "tile_label",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "bytes"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_tiles_bytes"
          },
          {
            "type": 1,
            "content": {
              "json": "<span style=\"font-size:1.2em\">Each tile represents all queries with the same query hash. The large number on the tile is **query rank** by `{qdsAggregation} {qdsMetricLabelMidsentenceCase}`. Two queries have the same rank if their resource usage during the interval is the same.</span>\r\n\r\n<span style=\"font-size:1.2em\">The tile also shows `{qdsAggregation} {qdsMetricLabelMidsentenceCase}` value, aggregated over selected time range. The length of the bar below this value is proportional to resource usage by this query, compared to other top queries displayed.</span>\r\n\r\n<span style=\"font-size:1.2em\">The `Query hash` value is displayed at the bottom of each tile. You can copy it and paste it in the `Query hash` parameter box above to focus on a specific top query.</span>"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "showDescriptions",
                "comparison": "isEqualTo",
                "value": "true"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "tiles"
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_tiles_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| summarize dcount_databases = dcount(strcat(logical_server_name, \\\"|\\\", database_name)),\\r\\n            any_database_name = take_any(database_name),\\r\\n            dcount_query_id = dcount(strcat(logical_server_name, \\\"|\\\", database_name, \\\"|\\\", query_id)),\\r\\n            dcount_sql_module_name = dcount(sql_module_name),\\r\\n            any_sql_module_name = take_any(sql_module_name),\\r\\n            dcount_context_settings_id = dcount(context_settings_id),\\r\\n            any_context_settings_id = take_any(context_settings_id),\\r\\n            dcount_plan_id = dcount(strcat(logical_server_name, \\\"|\\\", database_name, \\\"|\\\", plan_id)),\\r\\n            query_sql_text = take_any(query_sql_text),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sum(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            count_successful_executions = case(\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avgif(count_executions, execution_type_desc == \\\"Regular\\\"), 2),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", minif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sumif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              real(null)\\r\\n                                              ),\\r\\n            count_aborted_executions = case(\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avgif(count_executions, execution_type_desc == \\\"Aborted\\\"), 2),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", minif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sumif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           real(null)\\r\\n                                           ),\\r\\n            count_exception_executions = case(\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"avg\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", round(avgif(count_executions, execution_type_desc == \\\"Exception\\\"), 2),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"min\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", minif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"max\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"stdev\\\" and \\\"{qdsMetric}\\\"==\\\"count_executions\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\" in (\\\"total\\\",\\\"avg\\\",\\\"min\\\",\\\"max\\\",\\\"stdev\\\"), sumif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             real(null)\\r\\n                                             ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_hash\\r\\n| extend multi_query_text_warning = iif(dcount_query_id > 1, strcat(\\\"There are \\\", tostring(dcount_query_id), \\\" distinct queries in \\\", tostring(dcount_databases), \\\" databases for this query hash. Displayed query text is for one of these \\\", tostring(dcount_query_id), \\\" queries.\\\"), \\\"\\\")\\r\\n| project query_hash,\\r\\n          database_name_agg = iif(dcount_databases == 1, any_database_name, strcat(any_database_name, \\\" (+\\\", tostring(dcount_databases - 1), \\\")\\\")),\\r\\n          count_executions,\\r\\n          count_successful_executions,\\r\\n          count_aborted_executions,\\r\\n          count_exception_executions,\\r\\n          duration_us,\\r\\n          cpu_time_us,\\r\\n          logical_io_reads,\\r\\n          logical_io_writes,\\r\\n          physical_io_reads,\\r\\n          num_physical_io_reads,\\r\\n          dop,\\r\\n          query_max_used_memory_kb = query_max_used_memory * 8,\\r\\n          rowcount,\\r\\n          log_bytes_used,\\r\\n          tempdb_space_used_kb = tempdb_space_used * 8,\\r\\n          sql_module_name_agg = iif(dcount_sql_module_name == 1, any_sql_module_name, strcat(any_sql_module_name, \\\" (+\\\", tostring(dcount_sql_module_name - 1), \\\")\\\")),\\r\\n          context_settings_id_agg = iif(dcount_context_settings_id == 1, tostring(any_context_settings_id), strcat(any_context_settings_id, \\\" (+\\\", tostring(dcount_context_settings_id - 1), \\\")\\\")),\\r\\n          query_sql_text,\\r\\n          query_sql_text_json = dynamic_to_json(pack(\\\"query_sql_text\\\", query_sql_text)),\\r\\n          multi_query_text_warning\\r\\n| sort by count_executions desc | extend count_executions_rank = row_rank(count_executions)\\r\\n| sort by duration_us desc | extend duration_rank = row_rank(duration_us)\\r\\n| sort by cpu_time_us desc | extend cpu_time_rank = row_rank(cpu_time_us)\\r\\n| sort by logical_io_reads desc | extend logical_io_reads_rank = row_rank(logical_io_reads)\\r\\n| sort by logical_io_writes desc | extend logical_io_writes_rank = row_rank(logical_io_writes)\\r\\n| sort by physical_io_reads desc | extend physical_io_reads_rank = row_rank(physical_io_reads)\\r\\n| sort by num_physical_io_reads desc | extend num_physical_io_reads_rank = row_rank(num_physical_io_reads)\\r\\n| sort by dop desc | extend dop_rank = row_rank(dop)\\r\\n| sort by query_max_used_memory_kb desc | extend query_max_used_memory_rank = row_rank(query_max_used_memory_kb)\\r\\n| sort by rowcount desc | extend rowcount_rank = row_rank(rowcount)\\r\\n| sort by log_bytes_used desc | extend log_bytes_used_rank = row_rank(log_bytes_used)\\r\\n| sort by tempdb_space_used_kb desc | extend tempdb_space_used_rank = row_rank(tempdb_space_used_kb)\\r\\n| extend ranks = dynamic_to_json(pack_array(\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Executions\\\", \\\"Rank\\\", count_executions_rank, \\\"Value\\\", count_executions),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Duration\\\", \\\"Rank\\\", duration_rank, \\\"Value\\\", duration_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"CPU time\\\", \\\"Rank\\\", cpu_time_rank, \\\"Value\\\", cpu_time_us),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical reads\\\", \\\"Rank\\\", logical_io_reads_rank, \\\"Value\\\", logical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Logical writes\\\", \\\"Rank\\\", logical_io_writes_rank, \\\"Value\\\", logical_io_writes),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (pages)\\\", \\\"Rank\\\", physical_io_reads_rank, \\\"Value\\\", physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Physical reads (IOs)\\\", \\\"Rank\\\", num_physical_io_reads_rank, \\\"Value\\\", num_physical_io_reads),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"DOP\\\", \\\"Rank\\\", dop_rank, \\\"Value\\\", dop),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Memory grant\\\", \\\"Rank\\\", query_max_used_memory_rank, \\\"Value\\\", query_max_used_memory_kb),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Row count\\\", \\\"Rank\\\", rowcount_rank, \\\"Value\\\", rowcount),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Transaction log space used\\\", \\\"Rank\\\", log_bytes_used_rank, \\\"Value\\\", log_bytes_used),\\r\\n                                           bag_pack(\\\"Metric\\\", \\\"Tempdb space used\\\", \\\"Rank\\\", tempdb_space_used_rank, \\\"Value\\\", tempdb_space_used_kb)\\r\\n                                           ))\\r\\n| project-away count_executions_rank, duration_rank, cpu_time_rank, logical_io_reads_rank, logical_io_writes_rank, physical_io_reads_rank, num_physical_io_reads_rank, dop_rank, query_max_used_memory_rank, rowcount_rank, log_bytes_used_rank, tempdb_space_used_rank\\r\\n| sort by case(\\r\\n              \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n              \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n              \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n              \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory_kb),\\r\\n              \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n              \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n              \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used_kb),\\r\\n              real(null)\\r\\n              ) desc,\\r\\n          count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n// Restrict by query_id/query_hash after ranking to preserve query rank value in results\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| take {qdsTopQueryCount}\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnalytics": true,
              "title": "Top queries by {qdsAggregation} {qdsMetricLabelMidsentenceCase}",
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "query_sql_text_json",
                  "parameterName": "query_sql_text_json",
                  "defaultValue": "\"<Select a query>\""
                },
                {
                  "fieldName": "q_id",
                  "parameterName": "query_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                },
                {
                  "fieldName": "query_hash",
                  "parameterName": "query_hash",
                  "parameterType": 1,
                  "defaultValue": "\"\""
                },
                {
                  "fieldName": "multi_query_text_warning",
                  "parameterName": "multi_query_text_warning",
                  "parameterType": 1
                },
                {
                  "fieldName": "ranks",
                  "parameterName": "ranks",
                  "parameterType": 1
                },
                {
                  "fieldName": "database_id",
                  "parameterName": "database_id",
                  "parameterType": 1,
                  "defaultValue": "0"
                }
              ],
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  },
                  {
                    "columnMatch": "count_successful_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_aborted_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "count_exception_executions",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "duration_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "cpu_time_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_writes",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "24ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "num_physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "24ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "dop",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "14ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "query_max_used_memory_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "rowcount",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "log_bytes_used",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "tempdb_space_used_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "query_sql_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "query_sql_text_json",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "multi_query_text_warning",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ranks",
                    "formatter": 5
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "query_hash",
                    "label": "Query hash"
                  },
                  {
                    "columnId": "database_name_agg",
                    "label": "Database"
                  },
                  {
                    "columnId": "count_executions",
                    "label": "Executions"
                  },
                  {
                    "columnId": "duration_us",
                    "label": "Duration"
                  },
                  {
                    "columnId": "cpu_time_us",
                    "label": "CPU time"
                  },
                  {
                    "columnId": "logical_io_reads",
                    "label": "Logical reads"
                  },
                  {
                    "columnId": "logical_io_writes",
                    "label": "Logical writes"
                  },
                  {
                    "columnId": "physical_io_reads",
                    "label": "Physical reads (pages)"
                  },
                  {
                    "columnId": "num_physical_io_reads",
                    "label": "Physical reads (IOs)"
                  },
                  {
                    "columnId": "dop",
                    "label": "DOP"
                  },
                  {
                    "columnId": "query_max_used_memory_kb",
                    "label": "Memory grant"
                  },
                  {
                    "columnId": "rowcount",
                    "label": "Rows"
                  },
                  {
                    "columnId": "log_bytes_used",
                    "label": "Log space"
                  },
                  {
                    "columnId": "tempdb_space_used_kb",
                    "label": "Tempdb space"
                  },
                  {
                    "columnId": "sql_module_name_agg",
                    "label": "SQL module"
                  },
                  {
                    "columnId": "context_settings_id_agg",
                    "label": "Context settings ID"
                  }
                ]
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isEqualTo",
                "value": "grid"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_top_queries_grid"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "ef3541b2-fdd5-4705-8689-b9ce167c1767",
                  "version": "KqlParameterItem/1.0",
                  "name": "qdsAnyWaits",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_wait_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| count\\r\\n| project Count = tostring(Count)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                }
              ],
              "style": "pills",
              "queryType": 9
            },
            "conditionalVisibility": {
              "parameterName": "sqldb_single_database_query_wait_stats",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "qds_waits_existence_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "{multi_query_text_warning}",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "multi_query_text_warning",
                "comparison": "isNotEqualTo",
                "value": ""
              },
              {
                "parameterName": "multi_query_text_warning",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              }
            ],
            "name": "multi_query_text_warning"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(ranks:dynamic)[dynamic({ranks})]\\r\\n| mv-expand bagexpansion=array ranks\\r\\n| mv-expand metric = ranks.Metric to typeof(string), rank = ranks.Rank to typeof(int), value = ranks.Value to typeof(real)\\r\\n| where value > 0 // Do not include high ranks if usage is zero\\r\\n| where not (metric==\\\"DOP\\\" and value==1 or metric==\\\"Executions\\\" and value==1 or metric==\\\"Rows\\\" and value==1) // Do not consider trivial usage\\r\\n| project r=rank, metric, rank\\r\\n| sort by rank asc, metric asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "title": "Query ranks",
              "noDataMessage": "Selected query is not ranked high by any metric",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "r",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "<=",
                          "thresholdValue": "1",
                          "representation": "Sev0",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "<=",
                          "thresholdValue": "3",
                          "representation": "Sev1",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "<=",
                          "thresholdValue": "10",
                          "representation": "Sev2",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "<=",
                          "thresholdValue": "20",
                          "representation": "Sev3",
                          "text": "[\"metric\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Sev4",
                          "text": "[\"metric\"]"
                        }
                      ],
                      "customColumnWidthSetting": "27ch"
                    }
                  },
                  {
                    "columnMatch": "metric",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "rank",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Lower numbers mean higher ranks, i.e. higher resource consumption for this metric"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "r",
                    "label": "Metric"
                  },
                  {
                    "columnId": "rank",
                    "label": "Rank"
                  }
                ]
              },
              "sortBy": [],
              "tileSettings": {
                "titleContent": {
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "hotCold"
                  },
                  "tooltipFormat": {
                    "tooltip": "Rank 1 by \"CPU time\" means that the query is the top consumer of CPU, compared to other queries in the same time interval. The metrics ranked in the 1-10 range, if any for this query, are shown."
                  }
                },
                "rightContent": {
                  "columnMatch": "metric",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "customWidth": "25",
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "ranks",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "top_query_ranks"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_wait_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| summarize query_wait_time_ms = case(\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(total_query_wait_time_ms)),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_wait_time_ms),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_wait_time_ms)),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_wait_time_ms)),\\r\\n                                     \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_wait_time_ms), // use maximum stdev for the interval\\r\\n                                     real(null)\\r\\n                                     )\\r\\n            by wait_category_desc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "title": "Query wait categories",
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "barchart",
              "chartSettings": {
                "yAxis": [
                  "query_wait_time_ms"
                ],
                "showMetrics": false,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Unknown",
                    "color": "gray"
                  },
                  {
                    "seriesName": "CPU",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "Worker Thread",
                    "color": "brown"
                  },
                  {
                    "seriesName": "Lock",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "Latch",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "Buffer Latch",
                    "color": "purple"
                  },
                  {
                    "seriesName": "Buffer IO",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "Tran Log IO",
                    "color": "green"
                  },
                  {
                    "seriesName": "Network IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Parallelism",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Memory",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "Other Disk IO",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "Replication",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Log Rate Governor",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "25",
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "sqldb_single_database_query_wait_stats",
                "comparison": "isEqualTo",
                "value": "1"
              },
              {
                "parameterName": "qdsAnyWaits",
                "comparison": "isNotEqualTo",
                "value": "0"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_wait_categories"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{query_sql_text_json}\",\"transformers\":null}",
              "size": 1,
              "title": "Query SQL text",
              "noDataMessage": "Unknown",
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "query_sql_text"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Selected top query in individual databases",
              "expandable": true,
              "expanded": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| summarize dcount_sql_module_name = dcount(sql_module_name),\\r\\n            any_sql_module_name = take_any(sql_module_name),\\r\\n            dcount_context_settings_id = dcount(context_settings_id),\\r\\n            any_context_settings_id = take_any(context_settings_id),\\r\\n            dcount_plan_id = dcount(plan_id),\\r\\n            any_plan_id = take_any(plan_id),\\r\\n            dcount_query_plan_hash = dcount(query_plan_hash),\\r\\n            any_query_plan_hash = take_any(query_plan_hash),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            count_successful_executions = case(\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avgif(count_executions, execution_type_desc == \\\"Regular\\\"), 2),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"min\\\", minif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"max\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Regular\\\"),\\r\\n                                              real(null)\\r\\n                                              ),\\r\\n            count_aborted_executions = case(\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avgif(count_executions, execution_type_desc == \\\"Aborted\\\"), 2),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"min\\\", minif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"max\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Aborted\\\"),\\r\\n                                           real(null)\\r\\n                                           ),\\r\\n            count_exception_executions = case(\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avgif(count_executions, execution_type_desc == \\\"Exception\\\"), 2),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"min\\\", minif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"max\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             \\\"{qdsAggregation}\\\"==\\\"stdev\\\", maxif(toreal(count_executions), execution_type_desc == \\\"Exception\\\"),\\r\\n                                             real(null)\\r\\n                                             ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by logical_server_name, database_name, query_id\\r\\n| project logical_server_name,\\r\\n          database_name,\\r\\n          query_id,\\r\\n          query_plan_hash_agg = iif(dcount_query_plan_hash == 1, any_query_plan_hash, strcat(any_query_plan_hash, \\\" (+\\\", tostring(dcount_query_plan_hash - 1), \\\")\\\")),\\r\\n          plan_id_agg = iif(dcount_plan_id == 1, tostring(any_plan_id), strcat(any_plan_id, \\\" (+\\\", tostring(dcount_plan_id - 1), \\\")\\\")),\\r\\n          count_executions,\\r\\n          count_successful_executions,\\r\\n          count_aborted_executions,\\r\\n          count_exception_executions,\\r\\n          duration_us,\\r\\n          cpu_time_us,\\r\\n          logical_io_reads,\\r\\n          logical_io_writes,\\r\\n          physical_io_reads,\\r\\n          num_physical_io_reads,\\r\\n          dop,\\r\\n          query_max_used_memory_kb = query_max_used_memory * 8,\\r\\n          rowcount,\\r\\n          log_bytes_used,\\r\\n          tempdb_space_used_kb = tempdb_space_used * 8,\\r\\n          sql_module_name_agg = iif(dcount_sql_module_name == 1, any_sql_module_name, strcat(any_sql_module_name, \\\" (+\\\", tostring(dcount_sql_module_name - 1), \\\")\\\")),\\r\\n          context_settings_id_agg = iif(dcount_context_settings_id == 1, tostring(any_context_settings_id), strcat(any_context_settings_id, \\\" (+\\\", tostring(dcount_context_settings_id - 1), \\\")\\\")),\\r\\n          global_query_id = dynamic_to_json(bag_pack(\\\"logical_server_name\\\", logical_server_name, \\\"database_name\\\", database_name, \\\"query_id\\\", query_id))\\r\\n| sort by case(\\r\\n              \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n              \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n              \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n              \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory_kb),\\r\\n              \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n              \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n              \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used_kb),\\r\\n              real(null)\\r\\n              ) desc,\\r\\n          count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 1,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "exportFieldName": "global_query_id",
                    "exportParameterName": "global_query_id",
                    "exportDefaultValue": "{\"machine_name\":\"\",\"server_name\":\"\",\"database_name\":\"\",\"query_id\":0}",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "database_name",
                          "formatter": 7,
                          "formatOptions": {
                            "linkTarget": "WorkbookTemplate",
                            "workbookContext": {
                              "componentIdSource": "workbook",
                              "resourceIdsSource": "workbook",
                              "templateIdSource": "static",
                              "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                              "typeSource": "workbook",
                              "gallerySource": "default",
                              "locationSource": "workbook",
                              "workbookName": "Azure SQL database",
                              "passSpecificParams": true,
                              "templateParameters": [
                                {
                                  "name": "serverName",
                                  "source": "column",
                                  "value": "logical_server_name"
                                },
                                {
                                  "name": "databaseName",
                                  "source": "column",
                                  "value": "database_name"
                                },
                                {
                                  "name": "timeRange",
                                  "source": "parameter",
                                  "value": "timeRange"
                                },
                                {
                                  "name": "linkAdxClusterUri",
                                  "source": "parameter",
                                  "value": "adxClusterUri"
                                },
                                {
                                  "name": "linkAdxDatabase",
                                  "source": "parameter",
                                  "value": "adxDatabase"
                                },
                                {
                                  "name": "tabName",
                                  "source": "static",
                                  "value": "Top queries"
                                },
                                {
                                  "name": "showDescriptions",
                                  "source": "parameter",
                                  "value": "showDescriptions"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "count_executions",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": [
                                {
                                  "columnName": "count_successful_executions",
                                  "color": "green"
                                },
                                {
                                  "columnName": "count_aborted_executions",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "count_exception_executions",
                                  "color": "red"
                                }
                              ]
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                          }
                        },
                        {
                          "columnMatch": "count_successful_executions",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "count_aborted_executions",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "count_exception_executions",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "duration_us",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 22,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "cpu_time_us",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 22,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "logical_io_reads",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "logical_io_writes",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "physical_io_reads",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "num_physical_io_reads",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "dop",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "query_max_used_memory_kb",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 3,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "rowcount",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "log_bytes_used",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 3,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "tempdb_space_used_kb",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 3,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        },
                        {
                          "columnMatch": "global_query_id",
                          "formatter": 5
                        }
                      ],
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "logical_server_name",
                          "label": "Logical server"
                        },
                        {
                          "columnId": "database_name",
                          "label": "Database"
                        },
                        {
                          "columnId": "query_id",
                          "label": "Query ID"
                        },
                        {
                          "columnId": "query_plan_hash_agg",
                          "label": "Plan hash"
                        },
                        {
                          "columnId": "plan_id_agg",
                          "label": "Plan ID"
                        },
                        {
                          "columnId": "count_executions",
                          "label": "Executions"
                        },
                        {
                          "columnId": "duration_us",
                          "label": "Duration"
                        },
                        {
                          "columnId": "cpu_time_us",
                          "label": "CPU time"
                        },
                        {
                          "columnId": "logical_io_reads",
                          "label": "Logical reads"
                        },
                        {
                          "columnId": "logical_io_writes",
                          "label": "Logical writes"
                        },
                        {
                          "columnId": "physical_io_reads",
                          "label": "Physical reads (pages)"
                        },
                        {
                          "columnId": "num_physical_io_reads",
                          "label": "Physical reads (IOs)"
                        },
                        {
                          "columnId": "dop",
                          "label": "DOP"
                        },
                        {
                          "columnId": "query_max_used_memory_kb",
                          "label": "Memory grant"
                        },
                        {
                          "columnId": "rowcount",
                          "label": "Rows"
                        },
                        {
                          "columnId": "log_bytes_used",
                          "label": "Log space"
                        },
                        {
                          "columnId": "tempdb_space_used_kb",
                          "label": "Tempdb space"
                        },
                        {
                          "columnId": "sql_module_name_agg",
                          "label": "SQL module"
                        },
                        {
                          "columnId": "context_settings_id_agg",
                          "label": "Context settings ID"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "name": "query_details"
                }
              ],
              "exportParameters": true
            },
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "0"
              }
            ],
            "name": "per_database_details_group"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "5e875829-c0a1-4d00-b853-d90b119a5883",
                  "version": "KqlParameterItem/1.0",
                  "name": "showPlansAs",
                  "label": "Show query plans as",
                  "type": 10,
                  "description": "Select \"Chart\" to show query plans as bars on a time chart. Select \"Grid\" to show a summary of query plan statistics in a grid.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"chart\",\"label\":\"Chart\"},\r\n    {\"value\":\"grid\",\"label\":\"Grid\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "chart"
                },
                {
                  "id": "e13aabd4-e4d7-46a7-a1d7-20292f9a521b",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridPlan",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "{\"plan_id\":0,\"interval_end_time\":\"1900-01-01\"}"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartPlan",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "{\"x\":\"1900-01-01\",\"series\":\"\"}",
                  "id": "8dafcf7a-df0e-4d9b-83ec-55579bad8df5"
                },
                {
                  "id": "b66d1dc9-af20-41b2-8a68-ad2aab7d2ee6",
                  "version": "KqlParameterItem/1.0",
                  "name": "planTabName",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "value": "details"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "query_plan_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| summarize dcount_databases = dcount(strcat(logical_server_name, \\\"|\\\", database_name)),\\r\\n            any_database_name = take_any(database_name),\\r\\n            dcount_plan_id = dcount(strcat(logical_server_name, \\\"|\\\", database_name, \\\"|\\\", plan_id)),\\r\\n            any_plan_id = take_any(plan_id),\\r\\n            count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            interval_end_time = max(interval_end_time)\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", plan_id, long(null)),\\r\\n               execution_type_desc,\\r\\n               is_forced_plan,\\r\\n               plan_forcing_type_desc\\r\\n| extend plan_id = iif(isnull(plan_id), any_plan_id, plan_id)\\r\\n| project query_plan_hash,\\r\\n          database_name_agg = iif(dcount_databases == 1, any_database_name, strcat(any_database_name, \\\" (+\\\", tostring(dcount_databases - 1), \\\")\\\")),\\r\\n          plan_id,\\r\\n          interval_end_time,\\r\\n          execution_type_desc,\\r\\n          count_executions,\\r\\n          plan_forcing = case(plan_forcing_type_desc == \\\"AUTO\\\", \\\"Auto\\\", plan_forcing_type_desc == \\\"MANUAL\\\" or is_forced_plan, \\\"Manual\\\", \\\"None\\\"),\\r\\n          duration_us,\\r\\n          cpu_time_us,\\r\\n          logical_io_reads,\\r\\n          logical_io_writes,\\r\\n          physical_io_reads,\\r\\n          num_physical_io_reads,\\r\\n          dop,\\r\\n          query_max_used_memory_kb = query_max_used_memory * 8,\\r\\n          rowcount,\\r\\n          log_bytes_used,\\r\\n          tempdb_space_used_kb = tempdb_space_used * 8\\r\\n| sort by case(\\r\\n              \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n              \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n              \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n              \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n              \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory_kb),\\r\\n              \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n              \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n              \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used_kb),\\r\\n              real(null)\\r\\n              ) desc,\\r\\n          count_executions desc // secondary sort for determinism when primary sort is tied\\r\\n| take 100 // assumption: looking at more than 100 plans is not interesting\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} metrics by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportFieldName": "",
              "exportParameterName": "selectedGridPlan",
              "exportDefaultValue": "{\"plan_id\":0,\"interval_end_time\":\"\"}",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "plan_id",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "interval_end_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "execution_type_desc",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Aborted",
                          "representation": "orange",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Exception",
                          "representation": "red",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ],
                      "customColumnWidthSetting": "18ch"
                    }
                  },
                  {
                    "columnMatch": "count_executions",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  },
                  {
                    "columnMatch": "plan_forcing",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Auto",
                          "representation": "lightBlue",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Manual",
                          "representation": "magenta",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "duration_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "15ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "cpu_time_us",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 22,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "logical_io_writes",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "24ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "num_physical_io_reads",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "22ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "dop",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "query_max_used_memory_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "rowcount",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "log_bytes_used",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "tempdb_space_used_kb",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "18ch"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "query_plan_hash",
                    "label": "Plan hash"
                  },
                  {
                    "columnId": "database_name_agg",
                    "label": "Database"
                  },
                  {
                    "columnId": "execution_type_desc",
                    "label": "Execution type"
                  },
                  {
                    "columnId": "count_executions",
                    "label": "Executions"
                  },
                  {
                    "columnId": "plan_forcing",
                    "label": "Forcing"
                  },
                  {
                    "columnId": "duration_us",
                    "label": "Duration"
                  },
                  {
                    "columnId": "cpu_time_us",
                    "label": "CPU time"
                  },
                  {
                    "columnId": "logical_io_reads",
                    "label": "Logical reads"
                  },
                  {
                    "columnId": "logical_io_writes",
                    "label": "Logical writes"
                  },
                  {
                    "columnId": "physical_io_reads",
                    "label": "Physical reads (pages)"
                  },
                  {
                    "columnId": "num_physical_io_reads",
                    "label": "Physical reads (IOs)"
                  },
                  {
                    "columnId": "dop",
                    "label": "DOP"
                  },
                  {
                    "columnId": "query_max_used_memory_kb",
                    "label": "Memory grant"
                  },
                  {
                    "columnId": "rowcount",
                    "label": "Rows"
                  },
                  {
                    "columnId": "log_bytes_used",
                    "label": "Log space"
                  },
                  {
                    "columnId": "tempdb_space_used_kb",
                    "label": "Tempdb space"
                  }
                ]
              },
              "sortBy": []
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "grid"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "showQueriesAs",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plans_grid"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| summarize count_executions = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", round(avg(count_executions), 2),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(count_executions)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(toreal(count_executions)),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_reads = case(\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_reads * count_executions),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_reads),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_reads)),\\r\\n                                   \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_reads),\\r\\n                                   real(null)\\r\\n                                   ),\\r\\n            logical_io_writes = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_logical_io_writes * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_logical_io_writes),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_logical_io_writes)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_logical_io_writes),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            physical_io_reads = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_physical_io_reads * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_physical_io_reads),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_physical_io_reads)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_physical_io_reads),\\r\\n                                    real(null)\\r\\n                                    ),\\r\\n            num_physical_io_reads = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_num_physical_io_reads * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_num_physical_io_reads),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_num_physical_io_reads)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_num_physical_io_reads),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            dop = case(\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"total\\\", sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_dop),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_dop)),\\r\\n                      \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_dop),\\r\\n                      real(null)\\r\\n                      ),\\r\\n            rowcount = case(\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_rowcount * count_executions),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_rowcount),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_rowcount)),\\r\\n                           \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_rowcount),\\r\\n                           real(null)\\r\\n                           )\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", plan_id, long(null)),\\r\\n               interval_end_time\\r\\n| extend metric = case(\\r\\n                      \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n                      real(null)\\r\\n                      )\\r\\n| project plan_label = iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", strcat(\\\"Plan ID: \\\", tostring(plan_id)), strcat(\\\"Plan hash: \\\", query_plan_hash)),\\r\\n          interval_end_time,\\r\\n          metric\\r\\n| make-series metric = avg(metric) default = long(null) on interval_end_time from todatetime(\\\"{qdsStartTime}\\\") to todatetime(\\\"{qdsEndTime}\\\") step {timeRange:grain} by plan_label;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnnotations": true,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} {qdsMetricLabelMidsentenceCase} by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportParameterName": "selectedChartPlan",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "unstackedbar",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              },
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "plan_label",
                "createOtherGroup": null,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "chart"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "unitless"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plan_chart_unitless"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| summarize duration_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_duration_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_duration_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_duration_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us), // use maximum stdev for the interval\\r\\n                              real(null)\\r\\n                              ),\\r\\n            cpu_time_us = case(\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_cpu_time_us * count_executions),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_cpu_time_us),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_cpu_time_us)),\\r\\n                              \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_cpu_time_us),\\r\\n                              real(null)\\r\\n                              )\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", plan_id, long(null)),\\r\\n               interval_end_time\\r\\n| extend metric = case(\\r\\n                      \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n                      real(null)\\r\\n                      )\\r\\n| project plan_label = iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", strcat(\\\"Plan ID: \\\", tostring(plan_id)), strcat(\\\"Plan hash: \\\", query_plan_hash)),\\r\\n          interval_end_time,\\r\\n          metric\\r\\n| make-series metric = avg(metric) default = long(null) on interval_end_time from todatetime(\\\"{qdsStartTime}\\\") to todatetime(\\\"{qdsEndTime}\\\") step {timeRange:grain} by plan_label;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnnotations": true,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} {qdsMetricLabelMidsentenceCase} by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportParameterName": "selectedChartPlan",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "unstackedbar",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              },
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "plan_label",
                "createOtherGroup": null,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 22,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "chart"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "time"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plan_chart_time"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| summarize query_max_used_memory = case(\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_query_max_used_memory * count_executions),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_query_max_used_memory),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_query_max_used_memory)),\\r\\n                                        \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_query_max_used_memory),\\r\\n                                        real(null)\\r\\n                                        ),\\r\\n            log_bytes_used = case(\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_log_bytes_used * count_executions),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_log_bytes_used),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_log_bytes_used)),\\r\\n                                 \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_log_bytes_used),\\r\\n                                 real(null)\\r\\n                                 ),\\r\\n            tempdb_space_used = case(\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"total\\\", sum(avg_tempdb_space_used * count_executions),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"avg\\\", avg(avg_tempdb_space_used),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"min\\\", min(toreal(min_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"max\\\", max(toreal(max_tempdb_space_used)),\\r\\n                                    \\\"{qdsAggregation}\\\"==\\\"stdev\\\", max(stdev_tempdb_space_used),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n            by query_plan_hash,\\r\\n               plan_id = iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", plan_id, long(null)),\\r\\n               interval_end_time\\r\\n| extend metric = case(\\r\\n                      \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory * 8 * 1024),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n                      \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used * 8 * 1024),\\r\\n                      real(null)\\r\\n                      )\\r\\n| project plan_label = iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", strcat(\\\"Plan ID: \\\", tostring(plan_id)), strcat(\\\"Plan hash: \\\", query_plan_hash)),\\r\\n          interval_end_time,\\r\\n          metric\\r\\n| make-series metric = avg(metric) default = long(null) on interval_end_time from todatetime(\\\"{qdsStartTime}\\\") to todatetime(\\\"{qdsEndTime}\\\") step {timeRange:grain} by plan_label;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnnotations": true,
              "showAnalytics": true,
              "title": "{qdsAggregation:label} {qdsMetricLabelMidsentenceCase} by query plan",
              "noDataMessage": "There is no data for specified parameters.",
              "exportParameterName": "selectedChartPlan",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "unstackedbar",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "count_executions",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "count_successful_executions",
                            "color": "green"
                          },
                          {
                            "columnName": "count_aborted_executions",
                            "color": "orange"
                          },
                          {
                            "columnName": "count_exception_executions",
                            "color": "red"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Successful (green), aborted (orange), and exception (red) executions"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "leftContent": {
                  "columnMatch": "rank",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "tooltipFormat": {
                    "tooltip": "Query rank"
                  }
                },
                "rightContent": {
                  "columnMatch": "ranked_metric",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "coldHot"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": true,
                "sortCriteriaField": "rank",
                "sortOrderField": 1,
                "size": "auto"
              },
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "plan_label",
                "createOtherGroup": null,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 2,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "showPlansAs",
                "comparison": "isEqualTo",
                "value": "chart"
              },
              {
                "parameterName": "qdsMetricUnit",
                "comparison": "isEqualTo",
                "value": "bytes"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsStartTime",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsEndTime",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "qds_query_plan_chart_bytes"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "5537e73a-2aa9-4f11-9f3b-a1894f13be60",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartPlanId",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| where plan_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| where query_plan_hash == iif(\\\"{global_query_id:$.query_id}\\\" == \\\"0\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| top 1 by collection_time_utc desc\\r\\n| project plan_id\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "b551bad3-2098-47d2-ab67-852c93ea574b",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartPlanHash",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_plan_hash == replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\")\\r\\n| top 1 by collection_time_utc desc\\r\\n| project query_plan_hash\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "3bbed235-3813-4be5-bfe3-0766b4383fe5",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedChartIntervalEndTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Time (x-coordinate) selected on a chart is generated by make-series and is unlikely to match any existing interval_end_time.\\r\\n// Look up the nearest interval_end_time here.\\r\\nunion\\r\\n(\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{selectedChartPlan:$.x}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| where plan_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| where query_plan_hash == iif(\\\"{global_query_id:$.query_id}\\\" == \\\"0\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| summarize interval_end_time = max(interval_end_time)\\r\\n),\\r\\n(\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{selectedChartPlan:$.x}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| where plan_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", tolong(replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan ID: \\\", \\\"\\\")), plan_id)\\r\\n| where query_plan_hash == iif(\\\"{global_query_id:$.query_id}\\\" == \\\"0\\\", replace_string(\\\"{selectedChartPlan:$.series}\\\", \\\"Plan hash: \\\", \\\"\\\"), query_plan_hash)\\r\\n| summarize interval_end_time = min(interval_end_time)\\r\\n)\\r\\n| summarize interval_end_time = min(interval_end_time)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "046d7500-d82b-43d9-b857-62e350285137",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridPlanId",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"print plan_id = tolong(\\\"{selectedGridPlan:$.plan_id}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "1d92a89b-f1b1-4642-b09c-fd015f67cf9c",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridPlanHash",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"print plan_hash = \\\"{selectedGridPlan:$.query_plan_hash}\\\"\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "aa9ce676-6214-44be-8a4a-af84f775c14e",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedGridIntervalEndTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"print interval_end_time = \\\"{selectedGridPlan:$.interval_end_time}\\\"\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "e669c402-166b-4e3e-bd6c-2fc79441467a",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedPlanId",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "grid",
                        "resultValType": "param",
                        "resultVal": "selectedGridPlanId"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "chart",
                        "resultValType": "param",
                        "resultVal": "selectedChartPlanId"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "0"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedPlanHash",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "grid",
                        "resultValType": "param",
                        "resultVal": "selectedGridPlanHash"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "chart",
                        "resultValType": "param",
                        "resultVal": "selectedChartPlanHash"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "0"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "120eaca9-83d5-447d-af06-098e53d04674"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedIntervalEndTime",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "grid",
                        "resultValType": "param",
                        "resultVal": "selectedGridIntervalEndTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "showPlansAs",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "chart",
                        "resultValType": "param",
                        "resultVal": "selectedChartIntervalEndTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "\"1900-01-01\""
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "903fef93-1c44-4bd7-867e-14b50d01f80e"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "selected_plan_parameters"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "96c6627e-1c4f-49cb-86e8-928964ecfc19",
                  "cellValue": "planTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Plan details",
                  "subTarget": "details",
                  "style": "link"
                },
                {
                  "id": "e8e0a56b-d1d9-46d0-ab32-e5864d25574f",
                  "cellValue": "planTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Plan XML",
                  "subTarget": "xmlPlan",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "selectedIntervalEndTime",
                "comparison": "isNotEqualTo",
                "value": "null"
              },
              {
                "parameterName": "selectedPlanId",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "plan_detail_tabs"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"engine_version\\\",\\r\\n1, \\\"query_plan_hash\\\",\\r\\n1, \\\"last_force_failure_reason_desc\\\",\\r\\n1, \\\"plan_forcing_type_desc\\\",\\r\\n1, \\\"database_name\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| where plan_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{global_query_id:$.query_id}\\\" == \\\"0\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, engine_version, query_plan_hash, last_force_failure_reason_desc, plan_forcing_type_desc, database_name)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, engine_version, query_plan_hash, last_force_failure_reason_desc, plan_forcing_type_desc, database_name\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"engine_version\\\", engine_version,\\r\\n                                    plan_property_name == \\\"query_plan_hash\\\", query_plan_hash,\\r\\n                                    plan_property_name == \\\"last_force_failure_reason_desc\\\", last_force_failure_reason_desc,\\r\\n                                    plan_property_name == \\\"plan_forcing_type_desc\\\", plan_forcing_type_desc,\\r\\n                                    plan_property_name == \\\"database_name\\\", database_name,\\r\\n                                    \\\"\\\"\\r\\n                                    )\\r\\n| project-away engine_version, query_plan_hash, last_force_failure_reason_desc, plan_forcing_type_desc, database_name\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_string"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"is_parallel_plan\\\",\\r\\n1, \\\"is_forced_plan\\\",\\r\\n1, \\\"is_natively_compiled\\\",\\r\\n1, \\\"has_compile_replay_script\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| where plan_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{global_query_id:$.query_id}\\\" == \\\"0\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, is_parallel_plan, is_forced_plan, is_natively_compiled, has_compile_replay_script)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, is_parallel_plan, is_forced_plan, is_natively_compiled, has_compile_replay_script\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"is_parallel_plan\\\", is_parallel_plan,\\r\\n                                    plan_property_name == \\\"is_forced_plan\\\", is_forced_plan,\\r\\n                                    plan_property_name == \\\"is_natively_compiled\\\", is_natively_compiled,\\r\\n                                    plan_property_name == \\\"has_compile_replay_script\\\", has_compile_replay_script,\\r\\n                                    bool(null)\\r\\n                                    )\\r\\n| project-away is_parallel_plan, is_forced_plan, is_natively_compiled, has_compile_replay_script\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "plan_property_value",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "Subtract",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_boolean"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"plan_id\\\",\\r\\n1, \\\"plan_group_id\\\",\\r\\n1, \\\"force_failure_count\\\",\\r\\n1, \\\"plan_count_compiles\\\",\\r\\n1, \\\"compatibility_level\\\",\\r\\n1, \\\"database_id\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| where plan_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{global_query_id:$.query_id}\\\" == \\\"0\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, plan_id, plan_group_id, force_failure_count, plan_count_compiles, compatibility_level, database_id)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, plan_id, plan_group_id, force_failure_count, plan_count_compiles, compatibility_level, database_id\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"plan_id\\\", plan_id,\\r\\n                                    plan_property_name == \\\"plan_group_id\\\", plan_group_id,\\r\\n                                    plan_property_name == \\\"force_failure_count\\\", force_failure_count,\\r\\n                                    plan_property_name == \\\"plan_count_compiles\\\", plan_count_compiles,\\r\\n                                    plan_property_name == \\\"compatibility_level\\\", tolong(compatibility_level),\\r\\n                                    plan_property_name == \\\"database_id\\\", tolong(database_id),\\r\\n                                    long(null)\\r\\n                                    )\\r\\n| project-away plan_id, plan_group_id, force_failure_count, plan_count_compiles, compatibility_level, database_id\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_number"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"plan_initial_compile_start_time\\\",\\r\\n1, \\\"plan_last_compile_start_time\\\",\\r\\n1, \\\"plan_last_execution_time\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| where plan_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{global_query_id:$.query_id}\\\" == \\\"0\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, plan_initial_compile_start_time, plan_last_compile_start_time, plan_last_execution_time)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, plan_initial_compile_start_time, plan_last_compile_start_time, plan_last_execution_time\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"plan_initial_compile_start_time\\\", plan_initial_compile_start_time,\\r\\n                                    plan_property_name == \\\"plan_last_compile_start_time\\\", plan_last_compile_start_time,\\r\\n                                    plan_property_name == \\\"plan_last_execution_time\\\", plan_last_execution_time,\\r\\n                                    datetime(null)\\r\\n                                    )\\r\\n| project-away plan_initial_compile_start_time, plan_last_compile_start_time, plan_last_execution_time\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "plan_property_value",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_datetime"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let plan_property = datatable(key:int, plan_property_name:string) [\\r\\n1, \\\"plan_avg_compile_duration\\\",\\r\\n1, \\\"plan_last_compile_duration\\\"\\r\\n];\\r\\nsqldb_single_database_query_runtime_stats\\r\\n| where interval_end_time == todatetime(\\\"{selectedIntervalEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| where plan_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{global_query_id:$.query_id}\\\" == \\\"0\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, plan_avg_compile_duration_us, plan_last_compile_duration_us)\\r\\n| extend key = int(1)\\r\\n| join kind=inner plan_property on key\\r\\n| project plan_property_name, plan_avg_compile_duration_us, plan_last_compile_duration_us\\r\\n| extend plan_property_value = case(\\r\\n                                    plan_property_name == \\\"plan_avg_compile_duration\\\", plan_avg_compile_duration_us,\\r\\n                                    plan_property_name == \\\"plan_last_compile_duration\\\", toreal(plan_last_compile_duration_us),\\r\\n                                    real(null)\\r\\n                                    )\\r\\n| project-away plan_avg_compile_duration_us, plan_last_compile_duration_us\\r\\n| sort by plan_property_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no data for specified parameters.",
                    "showExportToExcel": true,
                    "queryType": 9,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "plan_property_value",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 22,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "plan_property_name",
                          "label": "Property"
                        },
                        {
                          "columnId": "plan_property_value",
                          "label": "Value"
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "name": "plan_details_duration"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "planTabName",
                "comparison": "isEqualTo",
                "value": "details"
              },
              {
                "parameterName": "selectedPlanId",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "plan_details_group"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n// always filter by query hash; additionally, if a query_id in a specific database is selected, restrict to plans for that query\\r\\n| where query_hash == \\\"{query_hash}\\\"\\r\\n| where logical_server_name == iif(\\\"{global_query_id:$.logical_server_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.logical_server_name}\\\", logical_server_name)\\r\\n| where database_name == iif(\\\"{global_query_id:$.database_name}\\\" != \\\"null\\\", \\\"{global_query_id:$.database_name}\\\", database_name)\\r\\n| where query_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {global_query_id:$.query_id}, query_id)\\r\\n| where plan_id == iif(\\\"{global_query_id:$.query_id}\\\" != \\\"0\\\", {selectedPlanId}, plan_id)\\r\\n| where query_plan_hash == iif(\\\"{global_query_id:$.query_id}\\\" == \\\"0\\\", \\\"{selectedPlanHash}\\\", query_plan_hash)\\r\\n| summarize arg_max(interval_end_time, query_plan)\\r\\n| project query_plan\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 9,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "query_hash",
                "comparison": "isNotEqualTo",
                "value": "\"\""
              },
              {
                "parameterName": "qdsMetric",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsAggregation",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "qdsTopQueryCount",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "selectedIntervalEndTime",
                "comparison": "isNotEqualTo",
                "value": "null"
              },
              {
                "parameterName": "planTabName",
                "comparison": "isEqualTo",
                "value": "xmlPlan"
              },
              {
                "parameterName": "selectedPlanId",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "query_xml_plan"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Top queries"
        },
        {
          "parameterName": "sqldb_single_database_query_runtime_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "matchPattern",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "top_queries_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxClusterUri",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          },
          {
            "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxDatabase",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          }
        ],
        "style": "pills",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "neverShow",
        "comparison": "isNotEqualTo"
      },
      "name": "link_adx_parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Data store",
        "expandable": true,
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "a762a2ae-beec-4bf5-9f4a-28bea2d2f737",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResourceId",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "value": ""
                },
                {
                  "id": "83420d36-0646-40aa-9637-d06a3d2a6145",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResource",
                  "type": 1,
                  "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{watcherResourceId}?api-version=2023-03-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":null}",
                  "isHiddenWhenLocked": true,
                  "queryType": 12
                },
                {
                  "id": "a6cd9521-127a-43bd-9227-6bcd67756456",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherName",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.name\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxClusterUri",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.properties.datastore.adxClusterUri\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8,
                  "id": "f0889b5f-3fa4-40a0-838d-443b4c0472b6"
                },
                {
                  "id": "0797c608-2ecf-4711-ba9b-6d110f10acd3",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxDatabase",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$.properties.datastore.adxDatabaseResourceId\",\"columnid\":\"value\",\"columnType\":\"string\",\"substringRegexMatch\":\".*/(.*)\",\"substringReplace\":\"$1\"}]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "id": "1b7d18f3-88a9-40ed-9162-92710b29ba69",
                  "version": "KqlParameterItem/1.0",
                  "name": "dataStore",
                  "label": "Choose a data store",
                  "type": 10,
                  "description": "By default, the workbook loads data from the data store for the current database watcher. You may use an alternate data store by entering its Kusto query URI and database name.",
                  "isRequired": true,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"[{\\\"value\\\":\\\"watcher\\\",\\\"label\\\":\\\"{watcherName}\\\"},{\\\"value\\\":\\\"alternate\\\",\\\"label\\\":\\\"Alternate\\\"}]\",\"transformers\":null}",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "queryType": 8,
                  "value": "watcher"
                }
              ],
              "style": "above",
              "queryType": 12
            },
            "customWidth": "30",
            "name": "watcher_adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Kusto query URI: `{watcherAdxClusterUri}` </p>\r\nKusto database: `{watcherAdxDatabase}`"
            },
            "customWidth": "70",
            "conditionalVisibilities": [
              {
                "parameterName": "watcherName",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxDatabase",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "dataStore",
                "comparison": "isEqualTo",
                "value": "watcher"
              }
            ],
            "name": "watcher_data_store"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "bbce4b83-dae6-46e0-bf67-c99ee0ea21f0",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxClusterUri",
                  "label": "Kusto query URI",
                  "type": 1,
                  "description": "Enter a Kusto query URI for the alternate data store. Most commonly, Kusto query URI format is: https://{kusto-cluster-name}.{region}.kusto.windows.net/",
                  "isRequired": true,
                  "value": ""
                },
                {
                  "id": "99cdb447-94d3-40c7-b902-c98628fb736a",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxDatabase",
                  "label": "Kusto database",
                  "type": 1,
                  "description": "Enter a Kusto database name for the alternate data store",
                  "isRequired": true
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "70",
            "conditionalVisibility": {
              "parameterName": "dataStore",
              "comparison": "isEqualTo",
              "value": "alternate"
            },
            "name": "override_adx_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterUri",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxClusterUri",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    }
                  ]
                },
                {
                  "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxDatabase",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxDatabase",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    }
                  ]
                },
                {
                  "id": "c5aca9de-de62-466e-bea8-9a149e935c4f",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterPingResult",
                  "label": "Kusto query URI ping result",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show databases\\r\\n| where DatabaseName == @\\\"{adxDatabase}\\\"\\r\\n| project 1\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9,
                  "value": null
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Cannot connect to Kusto query URI `{adxClusterUri}`, database `{adxDatabase}`. The Kusto cluster may be stopped or unreachable, specified cluster URI may be invalid, or permissions may be insufficient.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "adxClusterPingResult",
                "comparison": "isNotEqualTo",
                "value": "1"
              },
              {
                "parameterName": "adxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "adxDatabase",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "missing_data_bad_permissions_text"
          }
        ],
        "exportParameters": true
      },
      "name": "data_store_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "4efc99f1-4cd2-417f-94ca-60fec15d41c5",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_active_sessions",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_active_sessions\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "a8baece8-02e2-4bb6-bb1c-1be94863de6f",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_memory_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_memory_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "f027ff10-2be9-46a1-b9b7-9f97d452b9e2",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_performance_counters_common",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_performance_counters_common\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "507ba9c1-409b-41a9-820e-6d751909ea83",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_properties",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_properties\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "68caf2eb-6dad-4e75-b5b4-82d6126cbafb",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_resource_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_resource_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "64dd65f6-d23b-40e6-a05b-bb3b758dcc6a",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_storage_io",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_storage_io\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "d1d1dc40-780a-441f-b50d-333f440abb10",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_storage_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_storage_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "0d0bfe52-8bba-4f30-aa12-6ec03515f3fc",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_single_database_properties",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_single_database_properties\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "b87c41b7-10ac-4f40-bb36-074fa2ff7db4"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_connectivity",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_connectivity\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "8c6e4a40-324f-4ce3-a4a1-dbd062185963"
          }
        ],
        "style": "above",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "name": "table_presence_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "eecd0908-04fd-4739-bef2-bcab66117f39",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 3600000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "e61b3c5d-3911-4a7b-8c92-133c352a4b86",
            "version": "KqlParameterItem/1.0",
            "name": "serverName",
            "label": "Logical server",
            "type": 2,
            "isRequired": true,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where isnotempty(logical_server_name)\\r\\n| distinct logical_server_name\\r\\n| order by logical_server_name asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "af2070be-277a-4367-bf50-0023e84eb8c9",
            "version": "KqlParameterItem/1.0",
            "name": "elasticPoolName",
            "label": "Elastic pool",
            "type": 2,
            "isRequired": true,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name in~ (\\\"{serverName}\\\")\\r\\n| distinct elastic_pool_name\\r\\n| order by elastic_pool_name asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": "spartan-stdpool-cba2f0f9-b2f9-48c5-aba4-08b953d2563d"
          },
          {
            "id": "78f02e62-147d-49df-b4cb-58a7bcdd524c",
            "version": "KqlParameterItem/1.0",
            "name": "databaseNameFilterValue",
            "label": "Database",
            "type": 1,
            "description": "Enter a value to filter by full or partial database name",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Database name filter value may not contain double quotes"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": ""
          },
          {
            "id": "9353f345-7d22-419c-b9cf-a39647fff8fd",
            "version": "KqlParameterItem/1.0",
            "name": "matchPattern",
            "label": "Match pattern",
            "type": 2,
            "description": "Select a string match operator to filter by database name",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    {\"value\":\"startswith\",\"label\":\"starts with\"},\r\n    {\"value\":\"contains\",\"label\":\"contains\"},\r\n    {\"value\":\"endswith\",\"label\":\"ends with\"},\r\n    {\"value\":\"!startswith\",\"label\":\"does not start with\"},\r\n    {\"value\":\"!contains\",\"label\":\"does not contain\"},\r\n    {\"value\":\"!endswith\",\"label\":\"does not end with\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "contains"
          },
          {
            "id": "95a28bc5-5308-489c-9609-c0e9f694c47b",
            "version": "KqlParameterItem/1.0",
            "name": "databaseNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "databaseNameFilterValue",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "== database_name"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "startswith",
                  "resultValType": "static",
                  "resultVal": "startswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "contains",
                  "resultValType": "static",
                  "resultVal": "contains @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "endswith",
                  "resultValType": "static",
                  "resultVal": "endswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!startswith",
                  "resultValType": "static",
                  "resultVal": "!startswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!contains",
                  "resultValType": "static",
                  "resultVal": "!contains @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!endswith",
                  "resultValType": "static",
                  "resultVal": "!endswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "== database_name"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "e39d65b4-fa00-41f6-a007-6ec9a16ec1db",
            "version": "KqlParameterItem/1.0",
            "name": "haReplica",
            "label": "HA replica",
            "type": 10,
            "description": "Set to Yes to show data from the high availability replica, if any",
            "isRequired": true,
            "value": "false",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"false\",\"label\":\"No\"},{\"value\":\"true\",\"label\":\"Yes\"}]"
          },
          {
            "id": "859e1723-fba2-4371-88a2-3cce7b3cada6",
            "version": "KqlParameterItem/1.0",
            "name": "showDescriptions",
            "label": "Show descriptions",
            "type": 10,
            "description": "Shows descriptions next to charts",
            "isRequired": true,
            "isGlobal": true,
            "value": "false",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"true\",\"label\":\"Yes\"},{\"value\":\"false\",\"label\":\"No\"}]"
          },
          {
            "id": "d540415a-9c4e-45fc-b7b8-1c37d0f06501",
            "version": "KqlParameterItem/1.0",
            "name": "grainFactor",
            "label": "Grain factor",
            "type": 2,
            "description": "Higher time grain provides more details on charts when granular data exists.",
            "isRequired": true,
            "value": "4",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3},{\"value\":4,\"label\":4},{\"value\":5,\"label\":5},{\"value\":6,\"label\":6}]"
          },
          {
            "id": "32f86b95-6a99-4fc2-9124-5a6e46963d82",
            "version": "KqlParameterItem/1.0",
            "name": "tabName",
            "type": 1,
            "value": "Overview",
            "isHiddenWhenLocked": true
          },
          {
            "id": "f33ed5dc-247b-4a6a-9410-f8257a5973d7",
            "version": "KqlParameterItem/1.0",
            "name": "connectivityTabName",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqldb_elastic_pool_connectivity\\\"\\r\\n| project tab_name = \\\"Connectivity\\\"\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          }
        ],
        "style": "pills",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "filter_parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Overview",
        "expandable": true,
        "expanded": true,
        "loadType": "always",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let time_range = datatable(key:int, time_range_start:datetime, time_range_end:datetime) [\\r\\n1, datetime(\\\"{timeRange:startISO}\\\"), datetime(\\\"{timeRange:endISO}\\\")\\r\\n];\\r\\ntime_range\\r\\n| project time_range_start, time_range_end, time_range_duration = datetime_diff('second', time_range_end, time_range_start), last_refresh_time = now(), fleet_link = \\\"Community-Workbooks/Database watcher/Azure SQL Database/estate\\\", adx_link = strcat(trim_end(\\\"/\\\", \\\"{adxClusterUri}\\\"), \\\"/\\\", \\\"{adxDatabase}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "time_range_start",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Start of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_end",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "End of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_duration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "last_refresh_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Workbook refresh date and time"
                    }
                  },
                  {
                    "columnMatch": "fleet_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "linkLabel": "All databases and elastic pools",
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "column",
                        "templateId": "fleet_link",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "Azure SQL databases and elastic pools",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "linkAdxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "linkAdxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "showDescriptions",
                            "source": "parameter",
                            "value": "showDescriptions"
                          },
                          {
                            "name": "haReplica",
                            "source": "parameter",
                            "value": "haReplica"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "View all monitored Azure SQL databases and elastic pools"
                    }
                  },
                  {
                    "columnMatch": "adx_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "Url",
                      "linkLabel": "Query ADX database"
                    },
                    "tooltipFormat": {
                      "tooltip": "Explore monitoring data using ad-hoc KQL queries"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "time_range_start",
                    "label": "Time range start"
                  },
                  {
                    "columnId": "time_range_end",
                    "label": "Time range end"
                  },
                  {
                    "columnId": "time_range_duration",
                    "label": "Time range duration"
                  },
                  {
                    "columnId": "last_refresh_time",
                    "label": "Last refresh"
                  },
                  {
                    "columnId": "fleet_link",
                    "label": "Estate"
                  },
                  {
                    "columnId": "adx_link",
                    "label": "Data store"
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "name": "header_time_range"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let data_max_size_mb = toscalar(\\r\\nsqldb_elastic_pool_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, elastic_pool_data_max_size_mb\\r\\n| top 1 by sample_time_utc desc\\r\\n| project-away sample_time_utc\\r\\n);\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| top 1 by sample_time_utc desc\\r\\n| project logical_server_name, elastic_pool_name, uptime = format_timespan(1s * datetime_diff(\\\"second\\\", now(), database_engine_start_time_utc), \\\"d.hh:mm:ss\\\"), service_tier = case(service_tier =~ \\\"GeneralPurpose\\\", \\\"General Purpose\\\", service_tier =~ \\\"BusinessCritical\\\", \\\"Business Critical\\\", service_tier), logical_cpu_count, database_engine_memory_mb, data_max_size_mb, replica_type,\\r\\nrt_tooltip = strcat(\\r\\n                   case(\\r\\n                       replica_type == \\\"Primary\\\", \\\"The primary replica always exists for any database. Primary replicas support read and write workloads. All other replica types support read workloads only.\\\",\\r\\n                       replica_type == \\\"Geo-replication forwarder\\\", \\\"A geo-replication secondary replica, also known as a geo-replication forwarder, is created when you configure geo-replication or failover groups. Data from a primary replica is replicated to one or more geo-replication forwarders.\\\",\\r\\n                       replica_type == \\\"Named secondary\\\", \\\"A named secondary replica may have a database name that is different from its associated primary replica, and may be placed on a different logical server. Data from a primary replica is replicated to one or more named secondary replicas.\\\",\\r\\n                       replica_type == \\\"HA secondary\\\", \\\"For primary, geo-replication forwarder, and named secondary replicas data may be replicated to an HA secondary replica to provide high availability (HA). HA secondary replicas do not have their own names, but inherit the name of the replica for which they provide high availability.\\\",\\r\\n                       \\\"\\\"\\r\\n                       ),\\r\\n                    unicode_codepoints_to_string(10,10),\\r\\n                    \\\"For elastic pools, the replica type shown is for the anchor database. In most cases, other databases in the same elastic pool have the same replica type.\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "logical_cpu_count",
                    "formatter": 2,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": []
                      },
                      "customColumnWidthSetting": "16ch"
                    }
                  },
                  {
                    "columnMatch": "database_engine_memory_mb",
                    "formatter": 2,
                    "formatOptions": {
                      "customColumnWidthSetting": "14ch"
                    },
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "data_max_size_mb",
                    "formatter": 2,
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      },
                      "emptyValCustomText": "(N/A)"
                    }
                  },
                  {
                    "columnMatch": "replica_type",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Primary",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "HA secondary",
                          "representation": "turquoise",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Geo-replication forwarder",
                          "representation": "magenta",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Named replica",
                          "representation": "greenDark",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"rt_tooltip\"]"
                    }
                  },
                  {
                    "columnMatch": "rt_tooltip",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "logical_server_name",
                    "label": "Logical server"
                  },
                  {
                    "columnId": "elastic_pool_name",
                    "label": "Elastic pool"
                  },
                  {
                    "columnId": "uptime",
                    "label": "Uptime"
                  },
                  {
                    "columnId": "service_tier",
                    "label": "Service tier"
                  },
                  {
                    "columnId": "logical_cpu_count",
                    "label": "Logical CPUs"
                  },
                  {
                    "columnId": "database_engine_memory_mb",
                    "label": "Memory"
                  },
                  {
                    "columnId": "data_max_size_mb",
                    "label": "Max data storage"
                  },
                  {
                    "columnId": "replica_type",
                    "label": "Replica type"
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "name": "header_pool_properties"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_elastic_pool_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "header_group"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "tabStyle": "bigger",
        "links": [
          {
            "id": "e108c42f-d83e-470e-baf3-579e5018fb7b",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Performance",
            "subTarget": "Overview",
            "style": "secondary"
          },
          {
            "id": "341b21d7-3e64-49aa-8665-cbf41f016c7e",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Activity",
            "subTarget": "Activity",
            "style": "secondary"
          },
          {
            "id": "9f26ac72-497e-4b7b-bd31-9e1216f83fb8",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Storage",
            "subTarget": "Storage",
            "style": "secondary"
          },
          {
            "id": "83744ba5-a4b2-49a6-b672-f24d651bcbe0",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "{connectivityTabName}",
            "subTarget": "Connectivity",
            "style": "link"
          },
          {
            "id": "867a5b8f-179d-48e3-a90d-116cf31bee85",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Databases",
            "subTarget": "Database heatmaps",
            "style": "link"
          },
          {
            "id": "5f25321e-8c04-44b8-9867-bcbe0f949016",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Properties",
            "subTarget": "Properties",
            "style": "secondary"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "top_tabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Resources and requests",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "18c7490d-6c49-4e1a-9ec4-e3e65dd77a8c",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedResourceMetrics",
                  "label": "Metrics to display",
                  "type": 2,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"CPU\",\"label\":\"CPU\"},\r\n    {\"value\":\"Instance CPU\",\"label\":\"Instance CPU\"},\r\n    {\"value\":\"Data IO\",\"label\":\"Data IO\"},\r\n    {\"value\":\"Log write\",\"label\":\"Log write\"},\r\n    {\"value\":\"Workers\",\"label\":\"Workers\"},\r\n    {\"value\":\"eDTU\",\"label\":\"eDTU\"},\r\n    {\"value\":\"Sessions\",\"label\":\"Sessions\"}\r\n]\r\n",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "value": [
                    "CPU",
                    "Instance CPU",
                    "Data IO",
                    "Log write",
                    "Workers"
                  ]
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "resource_metric_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"CPU\\\",\\r\\n1, \\\"Data IO\\\",\\r\\n1, \\\"Log write\\\",\\r\\n1, \\\"Workers\\\",\\r\\n1, \\\"Instance CPU\\\",\\r\\n1, \\\"Sessions\\\",\\r\\n1, \\\"eDTU\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| where \\\"{selectedResourceMetrics}\\\" == \\\"'*'\\\" or metric_name in ({selectedResourceMetrics})\\r\\n| project metric_name, sample_time_utc, avg_cpu_percent, avg_data_io_percent, avg_log_write_percent, max_worker_percent, avg_instance_cpu_percent, max_session_percent, avg_edtu_percent\\r\\n| extend metric = case(\\r\\n                    metric_name == \\\"CPU\\\", avg_cpu_percent,\\r\\n                    metric_name == \\\"Data IO\\\", avg_data_io_percent,\\r\\n                    metric_name == \\\"Log write\\\", avg_log_write_percent,\\r\\n                    metric_name == \\\"Workers\\\", max_worker_percent,\\r\\n                    metric_name == \\\"Instance CPU\\\", avg_instance_cpu_percent,\\r\\n                    metric_name == \\\"Sessions\\\", max_session_percent,\\r\\n                    metric_name == \\\"eDTU\\\", avg_edtu_percent,\\r\\n                    decimal(null))\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Resource utilization",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "exportToExcelOptions": "all",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "CPU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "Workers",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Instance CPU",
                    "color": "red"
                  },
                  {
                    "seriesName": "Sessions",
                    "color": "brown"
                  },
                  {
                    "seriesName": "Log write",
                    "color": "green"
                  },
                  {
                    "seriesName": "Data IO",
                    "color": "blue"
                  },
                  {
                    "seriesName": "eDTU",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "textSettings": {
                "style": "markdown"
              }
            },
            "name": "resource_utilization"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`CPU`|CPU utilization relative to the CPU maximum limit per elastic pool, as measured by the database engine. As the limit is approached, query latency may increase. Includes only CPU utilization by user workloads. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198628).|\r\n|`Data IO`|IO utilization relative to the maximum IOPS limit per elastic pool. Reflects physical data file reads, not transaction log writes. As the limit is approached, query latency may increase. If this impacts applications, consider workload tuning to reduce the volume of data reads, or scale up to a compute size with a higher `Data IO` elastic pool limit. Common workload tuning includes [creating indexes](https://go.microsoft.com/fwlink/?linkid=2198640) and implementing [data compression](https://go.microsoft.com/fwlink/?linkid=2198735) (row, page, [columnstore](https://go.microsoft.com/fwlink/?linkid=2198859)). [Learn more](https://go.microsoft.com/fwlink/?linkid=2198851).|\r\n|`Log write`|Transaction log write throughput, relative to the log throughput limit per elastic pool. When this metric approaches 100%, data ingestion and data modification become slower. If this impacts applications, consider workload tuning to reduce the volume of log writes, or scale up to a compute size with a higher `Log write` limit. Workload tuning includes implementing [data compression](https://go.microsoft.com/fwlink/?linkid=2198735) (row, page, [columnstore](https://go.microsoft.com/fwlink/?linkid=2198859)), and/or using `tempdb` for transient data by using temporary tables or permanent tables created in `tempdb`. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198639).|\r\n|`Workers`|Worker thread utilization relative to maximum worker thread limit per elastic pool. If values over 50% occur consistently, consider workload tuning to reduce worker consumption (for example, reduce [MAXDOP](https://go.microsoft.com/fwlink/?linkid=2198634)), or proactively scale up to a compute size with a higher `Workers` limit. When worker threads are exhausted, new queries and connections will fail. Metric value is obtained by periodic sampling. Actual worker utilization *may spike to higher values* between samples. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198862).|\r\n|`Instance CPU`|CPU utilization relative to the maximum limit for the database engine instance, as measured by the operating system. As the limit is approached, query latency may increase. Includes all CPU utilization by the database engine, including user and system workloads. Measured at one minute granularity. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198861).|\r\n|`Sessions`|Session (connection) utilization relative to the maximum limit per elastic pool. High utilization is rare, and most commonly occurs due to not using connection pooling. It may also indicate a connection leak in the application.|\r\n|`eDTU`|This metric is derived from the `CPU`, `Data IO`, and `Log write` metrics for the elastic pool, as the largest of these values at each point in time. `eDTU = MAX(CPU, Data IO, Log write)`. Available only for elastic pools using the [DTU model](https://go.microsoft.com/fwlink/?linkid=2198637), not the newer [vCore model](https://go.microsoft.com/fwlink/?linkid=2198646).|\r\n\r\n[Learn more](https://go.microsoft.com/fwlink/?linkid=2198742) about resource management in Azure SQL Database."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "resource_stats_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"Batch Requests/sec\\\")\\r\\n| project sample_time_utc, object_name, counter_name, cntr_value\\r\\n| sort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away object_name, cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Request rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Batch Requests/sec",
                    "label": "Requests",
                    "color": "greenDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "requests"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Requests`|A request is one or more SQL statements (queries) that a client sends to the database engine to execute. Requests rate is a commonly used measure of workload throughput. This chart shows request rate for the database engine instance, reflecting cumulative workload across all databases in this elastic pool.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "resources_and_requests_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Waits",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "7ae3f51d-d369-4ab7-aa86-76f80ccdc98b",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Cumulative waits",
                  "subTarget": "wait_stats_resource_cumulative",
                  "style": "link"
                },
                {
                  "id": "7b11612a-5427-4472-b1ed-e56aab7e01af",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Average waits",
                  "subTarget": "wait_stats_resource_average",
                  "style": "link"
                },
                {
                  "id": "cea87ec4-e50a-4eba-a8e8-c4ca7fc3c123",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Average signal waits",
                  "subTarget": "wait_stats_signal_average",
                  "style": "link"
                },
                {
                  "id": "0f53f0f1-53b2-43bf-9c97-b26ea4d74609",
                  "cellValue": "waitChartName",
                  "linkTarget": "parameter",
                  "linkLabel": "Waiting tasks",
                  "subTarget": "wait_stats_waiting_tasks",
                  "style": "link"
                }
              ]
            },
            "name": "waits_tabs"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, wait_type, wait_time_ms\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms), wait_time_ms - prev(wait_time_ms), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = toreal(delta_wait_time_ms) / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_resource_cumulative"
            },
            "name": "wait_stats_resource_cumulative"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, wait_type, wait_time_ms, waiting_tasks_count\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms), wait_time_ms - prev(wait_time_ms), long(null)),\\r\\n         delta_waiting_tasks_count = iif(waiting_tasks_count >= prev(waiting_tasks_count) and wait_type == prev(wait_type), waiting_tasks_count - prev(waiting_tasks_count), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend delta_avg_wait_time_ms = iif(delta_waiting_tasks_count != 0, toreal(delta_wait_time_ms) / delta_waiting_tasks_count, real(null))\\r\\n| make-series metric = avg(delta_avg_wait_time_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_resource_average"
            },
            "name": "wait_stats_resource_average"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, wait_type, signal_wait_time_ms, waiting_tasks_count\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_signal_wait_time_ms = iif(signal_wait_time_ms >= prev(signal_wait_time_ms), signal_wait_time_ms - prev(signal_wait_time_ms), long(null)),\\r\\n         delta_waiting_tasks_count = iif(waiting_tasks_count >= prev(waiting_tasks_count), waiting_tasks_count - prev(waiting_tasks_count), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend delta_avg_signal_wait_time_ms = iif(delta_waiting_tasks_count != 0, toreal(delta_signal_wait_time_ms) / delta_waiting_tasks_count, real(null))\\r\\n| make-series metric = avg(delta_avg_signal_wait_time_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_signal_average"
            },
            "name": "wait_stats_signal_average"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, wait_type, waiting_tasks_count\\r\\n| partition hint.strategy=shuffle by wait_type\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_waiting_tasks_count = iif(waiting_tasks_count >= prev(waiting_tasks_count), waiting_tasks_count - prev(waiting_tasks_count), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = toreal(delta_waiting_tasks_count) / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by wait_type\\r\\n)\\r\\n| project wait_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "areachart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "wait_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "ASYNC_IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "ASYNC_NETWORK_IO",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "BACKUPBUFFER",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPIO",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "BACKUPTHREAD",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "CXCONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXPACKET",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXROWSET_SYNC",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_CONSUMER",
                    "color": "orange"
                  },
                  {
                    "seriesName": "CXSYNC_PORT",
                    "color": "orange"
                  },
                  {
                    "seriesName": "EXCHANGE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "HADR_GROUP_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_SYNC_COMMIT",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_LOG_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_MISMATCHED_SLO",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEEDING",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SEND_RECV_QUEUE_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_LOG_RATE_SLO_DOWNGRADE",
                    "color": "red"
                  },
                  {
                    "seriesName": "HADR_THROTTLE_REFRESH_MAX_SIZE",
                    "color": "red"
                  },
                  {
                    "seriesName": "INSTANCE_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "IO_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "LATCH_DT",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_EX",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_KP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_NL",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_SH",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LATCH_UP",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "LCK_M_BU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_BU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IS_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_IX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_NL_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RIn_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RS_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_RX_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_M_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SCH_S_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIU_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_SIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_U_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_UIX_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_ABORT_BLOCKERS",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LCK_M_X_LOW_PRIORITY",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "LOGMGR_FLUSH",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_PMM_LOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_QUEUE",
                    "color": "green"
                  },
                  {
                    "seriesName": "LOGMGR_RESERVE_APPEND",
                    "color": "green"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_DT",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_EX",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_KP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_NL",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_SH",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGEIOLATCH_UP",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "PAGELATCH_DT",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_EX",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_KP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_NL",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_SH",
                    "color": "purple"
                  },
                  {
                    "seriesName": "PAGELATCH_UP",
                    "color": "purple"
                  },
                  {
                    "seriesName": "POOL_LOG_RATE_GOVERNOR",
                    "color": "red"
                  },
                  {
                    "seriesName": "RESOURCE_SEMAPHORE",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "SOS_SCHEDULER_YIELD",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "THREADPOOL",
                    "color": "brown"
                  },
                  {
                    "seriesName": "THROTTLE_LOG_RATE_LOG_STORAGE",
                    "color": "red"
                  },
                  {
                    "seriesName": "WAIT_ON_SYNC_STATISTICS_REFRESH",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "WRITE_COMPLETION",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "WRITELOG",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "waitChartName",
              "comparison": "isEqualTo",
              "value": "wait_stats_waiting_tasks"
            },
            "name": "wait_stats_waiting_tasks"
          },
          {
            "type": 1,
            "content": {
              "json": "|Chart|Description|\r\n|:-|:-|\r\n|Cumulative waits|The Y axis shows the cumulative time all tasks spent waiting per second, for top wait types.|\r\n|Average waits|The Y axis shows the average time a task has spent waiting, for wait types. Calculated as *cumulative resource wait time* / *number of waiting tasks*.|\r\n|Average signal waits|The Y axis shows the average time a task spent waiting for CPU to become available after the resource wait was over. High values may indicate CPU pressure.|\r\n|Waiting tasks|The Y axis shows the number of waiting tasks, for top wait types.|\r\n\r\nData is collected from [sys.dm_os_wait_stats](https://go.microsoft.com/fwlink/?linkid=2198648)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "waits_help"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_elastic_pool_wait_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "waits_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Workload statistics",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Batch Resp Statistics\\\" and instance_name == \\\"Elapsed Time:Requests\\\"\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| partition hint.strategy = shuffle by counter_name\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| summarize count_requests = sum(delta_cntr_value) by counter_name\\r\\n)\\r\\n| project low_elapsed_time_ms = case(\\r\\n                                    counter_name == \\\"Batches >=000000ms & <000001ms\\\", \\\"≥0 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000001ms & <000002ms\\\", \\\"≥1 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000002ms & <000005ms\\\", \\\"≥2 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000005ms & <000010ms\\\", \\\"≥5 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000010ms & <000020ms\\\", \\\"≥10 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000020ms & <000050ms\\\", \\\"≥20 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000050ms & <000100ms\\\", \\\"≥50 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000100ms & <000200ms\\\", \\\"≥100 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000200ms & <000500ms\\\", \\\"≥200 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=000500ms & <001000ms\\\", \\\"≥500 ms\\\",\\r\\n                                    counter_name == \\\"Batches >=001000ms & <002000ms\\\", \\\"≥1 s\\\",\\r\\n                                    counter_name == \\\"Batches >=002000ms & <005000ms\\\", \\\"≥2 s\\\",\\r\\n                                    counter_name == \\\"Batches >=005000ms & <010000ms\\\", \\\"≥5 s\\\",\\r\\n                                    counter_name == \\\"Batches >=010000ms & <020000ms\\\", \\\"≥10 s\\\",\\r\\n                                    counter_name == \\\"Batches >=020000ms & <050000ms\\\", \\\"≥20 s\\\",\\r\\n                                    counter_name == \\\"Batches >=050000ms & <100000ms\\\", \\\"≥50 s\\\",\\r\\n                                    counter_name == \\\"Batches >=100000ms\\\", \\\"≥100 s\\\",\\r\\n                                    \\\"\\\"\\r\\n                                    ),\\r\\n        count_requests, counter_name\\r\\n| sort by counter_name asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "showAnalytics": true,
              "title": "Requests by duration",
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "categoricalbar",
              "chartSettings": {
                "group": "low_elapsed_time_ms",
                "createOtherGroup": 0,
                "showLegend": true
              }
            },
            "name": "batch_response_stats"
          },
          {
            "type": 1,
            "content": {
              "json": "This chart shows a distribution of request durations by elapsed time. Each bar on the histogram corresponds to the number of requests with durations in certain time bucket. For example, the bar labeled `≥1 ms` shows the number of requests with elapsed time ranging from 1 millisecond (inclusive) to 2 milliseconds.\r\n\r\nFor the same workload, a shift in the number of requests to the right over time indicates an increase in query response time. "
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "batch_response_stats_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (\\r\\n        (object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"SQL Compilations/sec\\\",\\\"SQL Re-Compilations/sec\\\"))\\r\\n        or\\r\\n        (object_name == \\\"General Statistics\\\" and counter_name in (\\\"Temp Tables Creation Rate\\\"))\\r\\n        or\\r\\n        (object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Query optimizations/sec\\\"))\\r\\n        )\\r\\n| project sample_time_utc, object_name, cntr_value, counter_name\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric, long(null), false), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Compilation, optimization, temp tables",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "SQL Compilations/sec",
                    "label": "SQL compilations",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "SQL Re-Compilations/sec",
                    "label": "SQL recompilations",
                    "color": "red"
                  },
                  {
                    "seriesName": "Temp Tables Creation Rate",
                    "label": "Temp tables creation",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Query optimizations/sec",
                    "label": "Query optimizations",
                    "color": "redBright"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "rate_statistics_1"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`SQL compilations`|A query is compiled when it is not found in plan cache. If a query is parameterized (explicitly or automatically), it may be matched to an existing query in plan cache. Such queries may still be compiled, but they avoid CPU-intentive optimization.|\r\n|`Query optimizations`|As part of query compilation, a query may be optimized to create an execution plan. Optimization is a CPU-intentive process. Make sure queries are parameterized to avoid unnecessary optimization. Specify data type, length, precision, and scale in parameter definition. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198744).|\r\n|`SQL recompilations`|A query is re-compiled because its previously cached plan is no longer valid or optimal. This may happen because of schema and data changes. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198738).|\r\n|`Temp tables creation`|The number of temporary tables and table variables created per second. Temp table caching alleviates possible contention due to high rate of temp table creation.|\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (\\r\\n        (object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"SQL Attention rate\\\"))\\r\\n        or\\r\\n        (object_name == \\\"General Statistics\\\" and counter_name in (\\\"Logins/sec\\\",\\\"Logouts/sec\\\"))\\r\\n        or\\r\\n        (object_name == \\\"SQL Errors\\\" and counter_name == \\\"Errors/sec\\\" and instance_name == \\\"User Errors\\\")\\r\\n        or\\r\\n        (object_name == \\\"Access Methods\\\" and counter_name == \\\"Table Lock Escalations/sec\\\")\\r\\n        or\\r\\n        (object_name == \\\"Locks\\\" and counter_name == \\\"Number of Deadlocks/sec\\\" and instance_name == \\\"_Total\\\")\\r\\n        )\\r\\n| project sample_time_utc, object_name, cntr_value, \\r\\n          counter_name = case(\\r\\n                             counter_name == \\\"Errors/sec\\\" and instance_name == \\\"User Errors\\\", \\\"User Errors/sec\\\",\\r\\n                             counter_name == \\\"Number of Deadlocks/sec\\\", \\\"Deadlocks/sec\\\",\\r\\n                             counter_name\\r\\n                             )\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Deadlocks, lock escalation, logins, logouts, timeouts",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Logouts/sec",
                    "label": "Logouts",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "Logins/sec",
                    "label": "Logins",
                    "color": "green"
                  },
                  {
                    "seriesName": "SQL Attention rate",
                    "label": "Attentions",
                    "color": "orange"
                  },
                  {
                    "seriesName": "User Errors/sec",
                    "label": "User errors",
                    "color": "gray"
                  },
                  {
                    "seriesName": "Table Lock Escalations/sec",
                    "label": "Table lock escalations",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Deadlocks/sec",
                    "label": "Deadlocks",
                    "color": "purpleDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "rate_statistics_2"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Deadlocks`|A deadlock occurs when two or more requests block each other, requiring the database engine to terminate one of them. In some workloads, deadlocks occur routinely. A spike in the number of deadlocks may require investigation. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198741).|\r\n|`Logins`|A high number of logins and logouts per second may indicate that connection pooling is not used. Learn more: [connection pooling in ADO.NET (SqlClient)](https://go.microsoft.com/fwlink/?linkid=2198736), and [connection pooling in JDBC Driver for SQL Server](https://go.microsoft.com/fwlink/?linkid=2198857).|\r\n|`Logouts`|A spike in logouts per second may indicate a restart of client application|\r\n|`User errors`|In many applications, user errors occur routinely. A spike in the number of user errors may require investigation.|\r\n|`Attentions`|An attention event occurs when a query times out or is canceled. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198868).|\r\n|`Table lock escalations`|Lock escalation to the object (table) level reduces memory use, but may cause lock blocking. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198651).|\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (object_name == \\\"General Statistics\\\" and counter_name in (\\\"Active Temp Tables\\\",\\\"Logical Connections\\\",\\\"Processes blocked\\\",\\\"User Connections\\\"))\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Connections, blocked processes, temp tables",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "User Connections",
                    "label": "User connections",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "Active Temp Tables",
                    "label": "Active temp tables",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Logical Connections",
                    "label": "Logical connections",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Processes blocked",
                    "label": "Processes blocked",
                    "color": "redBright"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 1
                    }
                  }
                }
              }
            },
            "name": "count_statistics"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Active temp tables`|The number of temporary tables or table variables in use|\r\n|`Logical connections`|If multiple active result sets (MARS) is used, each physical connection may be used by multiple logical sessions. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198630).|\r\n|`Processes blocked`|The number of sessions that were blocked at data collection time. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198855).|\r\n|`User connections`|The number of physical connections, excluding system connections|\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_3"
          },
          {
            "type": 1,
            "content": {
              "json": "Data is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "sql_stats_help_4"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo",
          "value": ""
        }
      ],
      "name": "workload_statistics_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Memory",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_memory_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, memory_clerk_type, memory_clerk_name, memory_size_mb\\r\\n| make-series metric = avg(memory_size_mb) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by memory_clerk_type\\r\\n| project memory_clerk_type, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Memory clerks",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "group": "memory_clerk_type",
                "createOtherGroup": 7,
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "name": "memory_clerks"
          },
          {
            "type": 1,
            "content": {
              "json": "All significant memory allocations by components of the database engine are tracked under specific  memory clerks. It is common for some memory clerks, such as `MEMORYCLERK_SQLBUFFERPOOL` and `CACHESTORE_COLUMNSTOREOBJECTPOOL`, to allocate large amounts of memory to cache data pages. Persistently high memory utilization by other memory clerks may require investigation. Data is collected from [sys.dm.os_memory_clerks](https://go.microsoft.com/fwlink/?linkid=2198866)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_clerks"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Memory Manager\\\"\\r\\n| where counter_name in (\\\"Target Server Memory (KB)\\\",\\\"Total Server Memory (KB)\\\",\\\"Granted Workspace Memory (KB)\\\",\\\"Lock Memory (KB)\\\")\\r\\n| project sample_time_utc, counter_name = replace_string(counter_name, \\\" (KB)\\\", \\\"\\\"), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Memory manager",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Target Server Memory",
                    "label": "Target server memory"
                  },
                  {
                    "seriesName": "Total Server Memory",
                    "label": "Total server memory"
                  },
                  {
                    "seriesName": "Lock Memory",
                    "label": "Lock memory"
                  },
                  {
                    "seriesName": "Granted Workspace Memory",
                    "label": "Granted workspace memory"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 3,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "memory_manager"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Memory Manager\\\"\\r\\n| where counter_name in (\\\"Memory Grants Outstanding\\\",\\\"Memory Grants Pending\\\")\\r\\n| extend counter_name = case(counter_name == \\\"Memory Grants Outstanding\\\", \\\"Outstanding grants\\\", counter_name == \\\"Memory Grants Pending\\\", \\\"Pending grants\\\", \\\"\\\")\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Memory grants",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "memory_grants"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Target server memory`|The database engine does not allocate memory beyond its current target memory. Target memory is determined by initial engine configuration, and may be adjusted if external memory pressure occurs.|\r\n|`Total server memory`|Total memory allocated by the database engine. Commonly, total server memory closely matches target server memory because the database engine allocates all available memory for various caches. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198638).|\r\n|`Lock memory`|Memory allocated for locks. High lock memory may be due to large transactions and/or disabled lock escalation. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198651).|\r\n|`Granted workspace memory`|Memory allocated for query processing, also known as query memory grants. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198869).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_memory_manager"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Outstanding grants`|A non-zero value indicates that some currently running queries have allocated query workspace memory.|\r\n|`Pending grants`|A non-zero value indicates that some queries cannot start or continue execution because they are waiting for a memory grant. Such waits are tracked under `RESOURCE_SEMAPHORE` wait type. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198636).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_memory_grants"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Resource Pool Stats\\\" and counter_name == \\\"Out of memory count\\\"\\r\\n| extend instance_name = case(instance_name == \\\"SloSharedPool1\\\" or instance_name startswith \\\"UserPool.\\\", \\\"User pool OOM\\\", instance_name == \\\"SloHkPool\\\", \\\"XTP pool OOM\\\", \\\"\\\")\\r\\n| project sample_time_utc, instance_name, cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by instance_name\\r\\n| project instance_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 2,
              "showAnalytics": true,
              "title": "Resource pool out of memory (OOM) events",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "XTP pool",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "User pool",
                    "color": "redBright"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "resource_pools_oom"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (\\r\\n        (object_name == \\\"Buffer Manager\\\" and counter_name == \\\"Buffer cache hit ratio\\\")\\r\\n        or\\r\\n        (object_name == \\\"Plan Cache\\\" and counter_name == \\\"Cache Hit Ratio\\\" and instance_name == \\\"_Total\\\")\\r\\n        )\\r\\n| project sample_time_utc, counter_name = iif(object_name == \\\"Plan Cache\\\" and counter_name == \\\"Cache Hit Ratio\\\", \\\"Plan cache hit ratio\\\", counter_name), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Cache hit ratios",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Buffer cache hit ratio",
                    "color": "green"
                  },
                  {
                    "seriesName": "Plan cache hit ratio",
                    "color": "magenta"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "cache_hit_ratios"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`User pool OOM`|The number of out-of-memory events that have occurred in the resource pool allocated for user workloads. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198856).|\r\n|`XTP pool OOM`|The number of out-of-memory events that have occurred in the resource pool allocated for memory-optimized tables and other [In-Memory OLTP](https://go.microsoft.com/fwlink/?linkid=2198858) (aka XTP) objects.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_pool_oom"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Buffer cache hit ratio`|Percentage of data pages that were found in the buffer pool (an in-memory data cache), avoiding slower reads from storage. When sufficient memory is provisioned for the workload, the value at steady state is close to 100%. Occasional dips are possible as IO-intensive queries execute. [Learn more](https://go.microsoft.com/fwlink/?linkid=2197944).|\r\n|`Plan cache hit ratio`|Query execution plans are optimized and stored in an in-memory cache for reuse. This metric is the percentage of plans that were found in plan cache during query execution. When queries are properly parameterized (by specifying data type, length, precision, and scale in parameter definition), query plan reuse is facilitated and this metric tends to be close to 100%. When this metric is much lower than 100%, it may indicate that essentialy the same queries are optimized and stored repeatedly, increasing CPU and memory usage. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198738).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_cache_hit_ratios"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Buffer Manager\\\"\\r\\n| where counter_name in (\\\"Background writer pages/sec\\\",\\\"Checkpoint pages/sec\\\",\\\"Lazy writes/sec\\\",\\\"Page reads/sec\\\",\\\"Page writes/sec\\\",\\\"Readahead pages/sec\\\")\\r\\n| extend counter_name = replace_string(counter_name, \\\"/sec\\\", \\\"\\\")\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| partition hint.strategy = shuffle by counter_name\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n)\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Buffer manager",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "buffer_manager"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Buffer Node\\\" and counter_name == \\\"Page life expectancy\\\"\\r\\n| project sample_time_utc, numa_node = strcat(\\\"NUMA node: \\\", instance_name), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = 0 on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by numa_node\\r\\n| project numa_node, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Page life expectancy",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "page_life_expectancy"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Background writer pages`|Data pages written by indirect checkpoint. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198733).|\r\n|`Checkpoint pages`|Data pages written by automatic or manual checkpoints. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198739).|\r\n|`Lazy writes`|Data pages written by the lazy writer. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198747).|\r\n|`Readahead pages`|Pages read from storage using larger and more efficient IO requests in anticipation of their use by the workload. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198865).|\r\n|`Page reads`|Pages read from storage into the buffer pool. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198853).|\r\n|`Page writes`|Data pages written to data files. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198747).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_buffer_manager"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Page life expectancy`|The time a page is predicted to stay in the buffer pool if it is not referenced by workload. Deep drops in page life expectancy, or consistently low values may be caused by IO intensive queries that flush out most of cached pages from the buffer pool.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "memory_help_ple"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_elastic_pool_memory_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "isPooledDatabase",
          "comparison": "isNotEqualTo",
          "value": "1"
        }
      ],
      "name": "memory_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Transactions and replicas",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Databases\\\" and counter_name in (\\\"Transactions/sec\\\",\\\"Write Transactions/sec\\\",\\\"Log Flushes/sec\\\")\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, series_name = strcat(counter_name, iif(instance_name == \\\"tempdb\\\", \\\" | tempdb\\\", \\\"\\\")), value\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_name\\r\\n| project series_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Transaction and log flush rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Transactions/sec | tempdb",
                    "label": "Transactions | tempdb",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "Write Transactions/sec | tempdb",
                    "label": "Write transactions | tempdb",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "Log Flushes/sec | tempdb",
                    "label": "Log flushes | tempdb",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Transactions/sec",
                    "label": "Transactions",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Log Flushes/sec",
                    "label": "Log flushes",
                    "color": "green"
                  },
                  {
                    "seriesName": "Write Transactions/sec",
                    "label": "Write transactions",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 1
                    }
                  }
                }
              }
            },
            "name": "transactions"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Transactions`|Transaction rate for all transactions, including read and write transactions, and user and system transactions. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198854).|\r\n|`Write transactions`|The rate of transactions that wrote to the transaction log of the database. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198644).|\r\n|`Log flushes`|The rate of writes to transaction log as the number of writes per second.|\r\n\r\nMetrics are provided separately for the user database, and for the `tempdb` database. Data is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transactions"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Databases\\\" and counter_name == \\\"Log Bytes Flushed/sec\\\"\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, series_name = strcat(counter_name, iif(instance_name == \\\"tempdb\\\", \\\" | tempdb\\\", \\\"\\\")), value\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_name\\r\\n| project series_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Log write throughput",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log Bytes Flushed/sec | tempdb",
                    "label": "Log bytes flushed | tempdb",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Log Bytes Flushed/sec",
                    "label": "Log bytes flushed",
                    "color": "green"
                  },
                  {
                    "seriesName": "Log Bytes Received/sec",
                    "label": "Log bytes received",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "Redone Bytes/sec",
                    "label": "Redone bytes",
                    "color": "orange"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "transaction_log"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where instance_name == @\\\"{databaseName}\\\"\\r\\n| where (object_name == \\\"Database Replica\\\" and counter_name == \\\"Transaction Delay\\\")\\r\\n        or\\r\\n        (object_name == \\\"Databases\\\" and counter_name == \\\"Write Transactions/sec\\\")\\r\\n// Transaction Delay reports cumulative delay in ms/second for all transactions. Derive average per-transaction delay by dividing by the number of write transactions for this database\\r\\n| project sample_time_utc, object_name, counter_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| summarize transaction_delay = sumif(value, counter_name == \\\"Transaction Delay\\\"),\\r\\n            write_transactions = sumif(value, counter_name == \\\"Write Transactions/sec\\\")\\r\\n            by sample_time_utc\\r\\n| project sample_time_utc, transaction_delay_per_transaction = iif(write_transactions != 0 and isnotempty(transaction_delay) and isnotempty(write_transactions), transaction_delay / write_transactions, real(null))\\r\\n| make-series transaction_delay_per_transaction = avg(transaction_delay_per_transaction) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}\\r\\n| project transaction_delay_per_transaction = series_fill_linear(transaction_delay_per_transaction), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Transaction delay",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "transaction_delay_per_transaction"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "transaction_delay_per_transaction",
                    "label": "Transaction delay",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "transaction_delay"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log bytes flushed`|The rate of writes to the transaction log, as the amount of data per second. Provided separately for the user database, and for the `tempdb` database.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transaction_log"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Transaction delay`|The average delay encountered by each transaction to guarantee that committed data is hardened in the transaction log of synchronous commit replicas. The value is zero when the database does not have any availability group replicas with synchronous commit.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transaction_delay"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where (replica_type != \\\"Primary\\\" and object_name == \\\"Database Replica\\\" and counter_name in (\\\"Log Bytes Received/sec\\\",\\\"Redone Bytes/sec\\\"))\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| make-series metric = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Secondary replica redo rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log Bytes Flushed/sec | tempdb",
                    "label": "Log bytes flushed | tempdb",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Log Bytes Flushed/sec",
                    "label": "Log bytes flushed",
                    "color": "green"
                  },
                  {
                    "seriesName": "Log Bytes Received/sec",
                    "label": "Log bytes received",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "Redone Bytes/sec",
                    "label": "Redone bytes",
                    "color": "orange"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "redo"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_single_database_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where instance_name == @\\\"{databaseName}\\\"\\r\\n| where replica_type != \\\"Primary\\\" and object_name == \\\"Database Replica\\\" and counter_name in (\\\"Recovery Queue\\\")\\r\\n| project sample_time_utc, counter_name = iif(counter_name == \\\"Recovery Queue\\\", \\\"Redo Queue\\\", counter_name), cntr_value\\r\\n| make-series metric = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Secondary replica redo queue",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Redo Queue",
                    "label": "Redo queue",
                    "color": "orange"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 3,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "secondary_replica_redo_queue"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log bytes received`|The rate of transaction log data received by a secondary replica. This metric is only available for secondary replicas.|\r\n|`Redone bytes`|The rate of redo, or log apply, process on a secondary replica. When redo rate is approximately equal or higher than `Log Bytes Received/sec`, data latency on a secondary replica is minimal; in case of failover to this secondary replica, failover time is minimal as well. This metric is only available for secondary replicas. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198629).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_secondary_redo_rate"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Redo queue`|The amount of transaction log data waiting to be redone, or applied to data files. When redo queue is low, data latency on a secondary replica is minimal; in case of failover to this secondary replica, failover time is minimal as well. This metric is only available for secondary replicas. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198629).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_secondary_redo_queue"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "sqldb_single_database_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "transactions_and_replicas_group"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let metric = datatable(key:int, metric_name:string, tile_ordinal:int) [\\r\\n1, \\\"Data\\\", 1,\\r\\n1, \\\"Tempdb data\\\", 2,\\r\\n1, \\\"Tempdb log\\\", 3,\\r\\n1, \\\"Local storage\\\", 4\\r\\n];\\r\\nlet last_sample = sqldb_elastic_pool_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| top 1 by sample_time_utc desc\\r\\n| project key = int(1), last_data_size_used_ratio = toreal(elastic_pool_data_size_used_mb) / toreal(elastic_pool_data_max_size_mb),\\r\\n                        last_tempdb_data_size_used_ratio = toreal(tempdb_data_size_used_mb) / toreal(tempdb_data_max_size_mb), \\r\\n                        last_tempdb_log_size_used_ratio = toreal(tempdb_log_size_used_mb) / toreal(tempdb_log_max_size_mb),  \\r\\n                        last_local_storage_size_ratio = toreal(used_local_storage_size_mb) / toreal(max_local_storage_size_mb)\\r\\n| join kind=inner metric on key\\r\\n| extend metric_value = case(\\r\\n                            metric_name == \\\"Data\\\", last_data_size_used_ratio,\\r\\n                            metric_name == \\\"Tempdb data\\\", last_tempdb_data_size_used_ratio,\\r\\n                            metric_name == \\\"Tempdb log\\\", last_tempdb_log_size_used_ratio,\\r\\n                            metric_name == \\\"Local storage\\\", last_local_storage_size_ratio,\\r\\n                            real(null)\\r\\n                            )\\r\\n| summarize last_metric_value = max(metric_value) by metric_name;\\r\\nsqldb_elastic_pool_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner metric on key\\r\\n| project key, metric_name, sample_time_utc, \\r\\n          data_size_used_ratio = toreal(elastic_pool_data_size_used_mb) / toreal(elastic_pool_data_max_size_mb), \\r\\n          tempdb_data_size_used_ratio = toreal(tempdb_data_size_used_mb) / toreal(tempdb_data_max_size_mb), \\r\\n          tempdb_log_size_used_ratio = toreal(tempdb_log_size_used_mb) / toreal(tempdb_log_max_size_mb), \\r\\n          local_storage_size_ratio = toreal(used_local_storage_size_mb) / toreal(max_local_storage_size_mb),\\r\\n          tile_ordinal\\r\\n| extend metric_value = case(\\r\\n                            metric_name == \\\"Data\\\", data_size_used_ratio,\\r\\n                            metric_name == \\\"Tempdb data\\\", tempdb_data_size_used_ratio,\\r\\n                            metric_name == \\\"Tempdb log\\\", tempdb_log_size_used_ratio,\\r\\n                            metric_name == \\\"Local storage\\\", local_storage_size_ratio,\\r\\n                            real(null)\\r\\n                            )\\r\\n| make-series metric_value = avg(metric_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by metric_name, key, tile_ordinal\\r\\n| join kind=inner last_sample on metric_name\\r\\n| project sample_time_utc, metric_value, metric_name, last_metric_value, tile_ordinal\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "Storage consumption",
        "noDataMessage": "There is no data for specified parameters.",
        "queryType": 9,
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "metric_name",
            "formatter": 1,
            "tooltipFormat": {
              "tooltip": "Percentage of maximum size. For more information, see Storage consumption details."
            }
          },
          "rightContent": {
            "columnMatch": "last_metric_value",
            "formatter": 12,
            "formatOptions": {
              "min": 0,
              "max": 1,
              "palette": "greenRed"
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "percent",
                "minimumFractionDigits": 2
              },
              "emptyValCustomText": "-"
            }
          },
          "secondaryContent": {
            "columnMatch": "metric_value",
            "formatter": 9,
            "formatOptions": {
              "min": 0,
              "max": 1,
              "palette": "greenRed"
            }
          },
          "showBorder": false,
          "sortCriteriaField": "tile_ordinal",
          "sortOrderField": 1
        },
        "graphSettings": {
          "type": 0
        },
        "chartSettings": {
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "Maximum query store",
              "color": "redBright"
            },
            {
              "seriesName": "Persistent version store",
              "color": "orange"
            },
            {
              "seriesName": "Used query store",
              "color": "green"
            },
            {
              "seriesName": "Online index version store",
              "color": "pink"
            },
            {
              "seriesName": "Hyperscale RBPEX",
              "color": "blue"
            }
          ],
          "showDataPoints": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 0,
              "options": {
                "style": "percent",
                "useGrouping": true,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "sqldb_elastic_pool_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "storage_consumption"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Storage consumption details",
        "expandable": true,
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Metrics on these charts describe storage space consumption in data and transaction log files for this elastic pool and for the `tempdb` database of the same database engine instance. Data is collected from [sys.database_files](https://go.microsoft.com/fwlink/?linkid=2198860), [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647), and several other DMVs."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "storage_utilization_details_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used data\\\",\\r\\n1, \\\"Allocated data\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_elastic_pool_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, elastic_pool_data_size_used_mb, elastic_pool_allocated_storage_size_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used data\\\", elastic_pool_data_size_used_mb,\\r\\n                      metric_name == \\\"Allocated data\\\", elastic_pool_allocated_storage_size_mb,\\r\\n                      long(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Data storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used data",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "33",
            "name": "data_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used tempdb data\\\",\\r\\n1, \\\"Allocated tempdb data\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_elastic_pool_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, tempdb_data_size_used_mb, tempdb_data_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used tempdb data\\\", tempdb_data_size_used_mb,\\r\\n                      metric_name == \\\"Allocated tempdb data\\\", tempdb_data_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Tempdb data storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated tempdb data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used tempdb data",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "33",
            "name": "tempdb_data_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used tempdb log\\\",\\r\\n1, \\\"Allocated tempdb log\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_elastic_pool_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, tempdb_log_size_used_mb, tempdb_log_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used tempdb log\\\", tempdb_log_size_used_mb,\\r\\n                      metric_name == \\\"Allocated tempdb log\\\", tempdb_log_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = avg(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by metric_name\\r\\n| project metric_name, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Tempdb transaction log storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated tempdb log",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used tempdb log",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "33",
            "name": "tempdb_log_storage"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "sqldb_elastic_pool_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "storage_consumption_details_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Storage IO statistics",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Metrics on these charts describe aggregate storage IO statistics including IOPS, throughput, and latency for all databases in this elastic pool and for the `tempdb` database of the same database engine instance. Separate charts are provided for reads and writes. Data is collected from [sys.dm_io_virtual_file_stats()](https://go.microsoft.com/fwlink/?linkid=2198746)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "storage_io_stats_help"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "ca53e0e9-7129-4b85-b842-35b42d1ab5c4",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "IOPS",
                  "subTarget": "IOPS",
                  "style": "link",
                  "linkIsContextBlade": true
                },
                {
                  "id": "8b5fd7cb-85e0-4912-aaf3-de7c1b10d7d4",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Throughput",
                  "subTarget": "Throughput",
                  "style": "link"
                },
                {
                  "id": "f6a93425-3f64-42f3-8715-4d59849ff645",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Latency",
                  "subTarget": "Latency",
                  "style": "link"
                }
              ]
            },
            "name": "storage_io_stats_navigation"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, database_id, num_of_reads, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_reads = iif(num_of_reads >= prev(num_of_reads) and database_id == prev(database_id) and file_id == prev(file_id), num_of_reads - prev(num_of_reads), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| extend iops = toreal(delta_num_of_reads) / delta_io_snapshot_sample_ms * 1000\\r\\n| summarize iops = sum(iops) by sample_time_utc, file_type, io_database_id = case(database_id in (0,2), database_id, int(null)) // aggregate all user database IO\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), iops\\r\\n| make-series metric = avg(iops) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Read IOPS",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Log",
                    "color": "green"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "tempdb | Log",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "RBPEX",
                    "color": "turquoise"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "IOPS"
            },
            "name": "read_iops"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, database_id, num_of_writes, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_writes = iif(num_of_writes >= prev(num_of_writes) and database_id == prev(database_id) and file_id == prev(file_id), num_of_writes - prev(num_of_writes), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| extend iops = toreal(delta_num_of_writes) / delta_io_snapshot_sample_ms * 1000\\r\\n| summarize iops = sum(iops) by sample_time_utc, file_type, io_database_id = case(database_id in (0,2), database_id, int(null))\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), iops\\r\\n| make-series metric = avg(iops) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Write IOPS",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "tempdb | Log",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Log",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "Data",
                    "color": "red"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "RBPEX",
                    "color": "turquoise"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "IOPS"
            },
            "name": "write_iops"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, database_id, num_of_bytes_read, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_bytes_read = iif(num_of_bytes_read >= prev(num_of_bytes_read) and database_id == prev(database_id) and file_id == prev(file_id), num_of_bytes_read - prev(num_of_bytes_read), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_bytes_read = sum(delta_num_of_bytes_read) by sample_time_utc, file_type, io_database_id = case(database_id in (0,2), database_id, int(null)), delta_io_snapshot_sample_ms\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), delta_read_throughput = toreal(delta_num_of_bytes_read) / delta_io_snapshot_sample_ms * 1000\\r\\n| make-series metric = avg(delta_read_throughput) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Read throughput",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Log",
                    "color": "green"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "tempdb | Log",
                    "color": "greenDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Throughput"
            },
            "name": "read_throughput"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, database_id, num_of_bytes_written, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_bytes_written = iif(num_of_bytes_written >= prev(num_of_bytes_written) and database_id == prev(database_id) and file_id == prev(file_id), num_of_bytes_written - prev(num_of_bytes_written), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_bytes_written = sum(delta_num_of_bytes_written) by sample_time_utc, file_type, io_database_id = case(database_id in (0,2), database_id, int(null)), delta_io_snapshot_sample_ms\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), delta_write_throughput = toreal(delta_num_of_bytes_written) / delta_io_snapshot_sample_ms * 1000\\r\\n| make-series metric = avg(delta_write_throughput) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Write throughput",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "tempdb | Log",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Data",
                    "color": "red"
                  },
                  {
                    "seriesName": "Log",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "redDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Throughput"
            },
            "name": "write_throughput"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, database_id, num_of_reads, io_stall_read_ms, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc\\r\\n| extend delta_num_of_reads = iif(num_of_reads >= prev(num_of_reads) and database_id == prev(database_id) and file_id == prev(file_id), num_of_reads - prev(num_of_reads), long(null)),\\r\\n         delta_io_stall_read_ms = iif(io_stall_read_ms >= prev(io_stall_read_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_stall_read_ms - prev(io_stall_read_ms), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_reads = sum(delta_num_of_reads),\\r\\n            delta_io_stall_read_ms = sum(delta_io_stall_read_ms)\\r\\n  by sample_time_utc, file_type, io_database_id = case(database_id in (0,2), database_id, int(null))\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), delta_read_latency_ms = iif(delta_num_of_reads != 0, toreal(delta_io_stall_read_ms) / delta_num_of_reads, real(null))\\r\\n| make-series metric = avg(delta_read_latency_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Read latency",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log",
                    "color": "green"
                  },
                  {
                    "seriesName": "Data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "tempdb | Log",
                    "color": "greenDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Latency"
            },
            "name": "read_latency"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time_utc, file_id, file_type, database_id, num_of_writes, io_stall_write_ms, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc\\r\\n| extend delta_num_of_writes = iif(num_of_writes >= prev(num_of_writes) and database_id == prev(database_id) and file_id == prev(file_id), num_of_writes - prev(num_of_writes), long(null)),\\r\\n         delta_io_stall_write_ms = iif(io_stall_write_ms >= prev(io_stall_write_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_stall_write_ms - prev(io_stall_write_ms), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_writes = sum(delta_num_of_writes),\\r\\n            delta_io_stall_write_ms = sum(delta_io_stall_write_ms)\\r\\n  by sample_time_utc, file_type, io_database_id = case(database_id in (0,2), database_id, int(null))\\r\\n| project sample_time_utc, file_label = strcat(iif(io_database_id == 2, \\\"tempdb | \\\", \\\"\\\"), file_type), delta_write_latency_ms = iif(delta_num_of_writes != 0, toreal(delta_io_stall_write_ms) / delta_num_of_writes, real(null))\\r\\n| make-series metric = avg(delta_write_latency_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by file_label\\r\\n| project file_label, metric = series_fill_linear(metric), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Write latency",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "Data",
                    "color": "red"
                  },
                  {
                    "seriesName": "tempdb | Log",
                    "color": "orange"
                  },
                  {
                    "seriesName": "tempdb | Data",
                    "color": "redDark"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Latency"
            },
            "name": "write_latency"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "sqldb_elastic_pool_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "storage_io_stats_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "287d84d2-28ab-471d-822f-00fe825d3edc",
            "version": "KqlParameterItem/1.0",
            "name": "propertySampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "property_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| make-series metric = count() default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No database property samples are available",
        "timeBrushParameterName": "timeRange",
        "exportParameterName": "propertyHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "purple"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "property_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_samples = count()\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No elastic pool property samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "property_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "662fc17f-ac90-47b3-b9e1-5630c924e154",
            "version": "KqlParameterItem/1.0",
            "name": "propertyLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = max(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "61ec378d-5ee1-46ba-88d4-f895a3ac1a4b",
            "version": "KqlParameterItem/1.0",
            "name": "propertyHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (todatetime(\\\"{propertyHistoricalSample:$.x}\\\") .. (todatetime(\\\"{propertyHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = min(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "d55daf33-5e18-474a-9f0c-04b540096ec8",
            "version": "KqlParameterItem/1.0",
            "name": "propertySampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "propertySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "propertyLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "propertySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "propertyHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "propertyLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "property_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "selected_property_sample"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"elastic_pool_name\\\",\\r\\n1, \\\"service_tier\\\",\\r\\n1, \\\"service_level_objective_long\\\"\\r\\n];\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, elastic_pool_name, service_tier, service_level_objective_long\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"elastic_pool_name\\\", elastic_pool_name,\\r\\n                            property_name == \\\"service_tier\\\", service_tier,\\r\\n                            property_name == \\\"service_level_objective_long\\\", service_level_objective_long,\\r\\n                            \\\"\\\"\\r\\n                            )\\r\\n| project-away elastic_pool_name, service_tier, service_level_objective_long\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "properties_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"database_engine_start_time_utc\\\",\\r\\n1, \\\"database_engine_build_time\\\"\\r\\n];\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, database_engine_start_time_utc, database_engine_build_time\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"database_engine_start_time_utc\\\", database_engine_start_time_utc,\\r\\n                            property_name == \\\"database_engine_build_time\\\", database_engine_build_time,\\r\\n                            datetime(null)\\r\\n                            )\\r\\n| project-away database_engine_start_time_utc, database_engine_build_time\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Values are shown in the local time of the database engine instance"
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "properties_datetime"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"logical_cpu_count\\\",\\r\\n1, \\\"database_engine_memory_mb\\\",\\r\\n1, \\\"database_engine_max_workers\\\",\\r\\n1, \\\"sos_target_memory_mb\\\",\\r\\n1, \\\"database_dtus\\\",\\r\\n1, \\\"database_buffer_pool_memory_mb\\\",\\r\\n1, \\\"database_max_memory_grant_percent\\\",\\r\\n1, \\\"database_max_workers\\\",\\r\\n1, \\\"database_max_data_iops\\\",\\r\\n1, \\\"database_max_log_rate_mbps\\\",\\r\\n1, \\\"elastic_pool_max_workers\\\",\\r\\n1, \\\"elastic_pool_max_data_iops\\\",\\r\\n1, \\\"elastic_pool_max_log_rate_mbps\\\"\\r\\n];\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, logical_cpu_count, database_engine_memory_mb, database_engine_max_workers, sos_target_memory_mb, database_dtus, database_buffer_pool_memory_mb, database_max_memory_grant_percent, database_max_workers, database_max_data_iops, database_max_log_rate_mbps, elastic_pool_max_workers, elastic_pool_max_data_iops, elastic_pool_max_log_rate_mbps\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"logical_cpu_count\\\", toreal(logical_cpu_count),\\r\\n                            property_name == \\\"database_engine_memory_mb\\\", toreal(database_engine_memory_mb),\\r\\n                            property_name == \\\"database_engine_max_workers\\\", toreal(database_engine_max_workers),\\r\\n                            property_name == \\\"sos_target_memory_mb\\\", toreal(sos_target_memory_mb),\\r\\n                            property_name == \\\"database_dtus\\\", toreal(database_dtus),\\r\\n                            property_name == \\\"database_buffer_pool_memory_mb\\\", toreal(database_buffer_pool_memory_mb),\\r\\n                            property_name == \\\"database_max_memory_grant_percent\\\", toreal(database_max_memory_grant_percent),\\r\\n                            property_name == \\\"database_max_workers\\\", toreal(database_max_workers),\\r\\n                            property_name == \\\"database_max_data_iops\\\", toreal(database_max_data_iops),\\r\\n                            property_name == \\\"database_max_log_rate_mbps\\\", toreal(database_max_log_rate_mbps),\\r\\n                            property_name == \\\"elastic_pool_max_workers\\\", toreal(elastic_pool_max_workers),\\r\\n                            property_name == \\\"elastic_pool_max_data_iops\\\", toreal(elastic_pool_max_data_iops),\\r\\n                            property_name == \\\"elastic_pool_max_log_rate_mbps\\\", toreal(elastic_pool_max_log_rate_mbps),\\r\\n                            real(null)\\r\\n                            )\\r\\n| project-away logical_cpu_count, database_engine_memory_mb, database_engine_max_workers, sos_target_memory_mb, database_dtus, database_buffer_pool_memory_mb, database_max_memory_grant_percent, database_max_workers, database_max_data_iops, database_max_log_rate_mbps, elastic_pool_max_workers, elastic_pool_max_data_iops, elastic_pool_max_log_rate_mbps\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "database_properties_number"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "propertySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "properties_and_configuration_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "eb139db6-a5e2-4c94-aead-297fab717765",
            "version": "KqlParameterItem/1.0",
            "name": "activitySampleType",
            "label": "Data to show",
            "type": 10,
            "isRequired": true,
            "value": "Latest",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_elastic_pool_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "33",
      "name": "activity_sample_type_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "78f02e62-147d-49df-b4cb-58a7bcdd524c",
            "version": "KqlParameterItem/1.0",
            "name": "databaseNameFilterValue",
            "label": "Database",
            "type": 1,
            "description": "Enter a value to filter by full or partial database name",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Database name filter value may not contain double quotes"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": ""
          },
          {
            "id": "9353f345-7d22-419c-b9cf-a39647fff8fd",
            "version": "KqlParameterItem/1.0",
            "name": "matchPattern",
            "label": "Match pattern",
            "type": 2,
            "description": "Select a string match operator to filter by database name",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    {\"value\":\"startswith\",\"label\":\"starts with\"},\r\n    {\"value\":\"contains\",\"label\":\"contains\"},\r\n    {\"value\":\"endswith\",\"label\":\"ends with\"},\r\n    {\"value\":\"!startswith\",\"label\":\"does not start with\"},\r\n    {\"value\":\"!contains\",\"label\":\"does not contain\"},\r\n    {\"value\":\"!endswith\",\"label\":\"does not end with\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "contains"
          },
          {
            "id": "95a28bc5-5308-489c-9609-c0e9f694c47b",
            "version": "KqlParameterItem/1.0",
            "name": "databaseNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "startswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name startswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "contains",
                  "resultValType": "static",
                  "resultVal": "| where database_name contains @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "endswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name endswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!startswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name !startswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!contains",
                  "resultValType": "static",
                  "resultVal": "| where database_name !contains @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!endswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name !endswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no database_name filter"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "tabName",
          "comparison": "isNotEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "tabName",
          "comparison": "isNotEqualTo",
          "value": "Storage"
        },
        {
          "parameterName": "tabName",
          "comparison": "isNotEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "33",
      "name": "database_name_filter_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "3b12f28b-ca26-4b69-9191-00f7f087b226",
            "version": "KqlParameterItem/1.0",
            "name": "activitySampleSubtype",
            "label": "Sample type",
            "type": 10,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"all\",\"label\":\"All\"},{\"value\":\"blocked\",\"label\":\"Blocked\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "all"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_elastic_pool_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "customWidth": "33",
      "name": "activity_sample_subtype_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_active_sessions\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend blocking_session_id = iif(\\r\\n                                  blocking_session_id in (0, -4, -5), // Do not treat long latch waits as relevant blocking\\r\\n                                  int(null),\\r\\n                                  blocking_session_id\\r\\n                                  )\\r\\n| extend sample_subtype = iif(isnotempty(blocking_session_id), \\\"blocked\\\", \\\"not_blocked\\\")\\r\\n| where \\\"{activitySampleSubtype}\\\" == \\\"all\\\" or (\\\"{activitySampleSubtype}\\\" == \\\"blocked\\\" and sample_subtype == \\\"{activitySampleSubtype}\\\")\\r\\n| make-series metric = dcount(sample_time_utc) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2 by sample_subtype\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No activity samples are available",
        "timeBrushParameterName": "timeRange",
        "exportFieldName": "",
        "exportParameterName": "activityHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "not_blocked",
              "label": "Not blocked",
              "color": "grayBlue"
            },
            {
              "seriesName": "blocked",
              "label": "Blocked",
              "color": "orange"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_elastic_pool_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "activity_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_active_sessions\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_samples = dcount(sample_time_utc)\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples. Samples are not collected when there are no active sessions.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No activity samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_elastic_pool_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleType",
          "comparison": "isEqualTo",
          "value": "Historical"
        }
      ],
      "name": "activity_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "8ef6f4e0-6f4b-4f96-bb11-1ea8fc44f3c1",
            "version": "KqlParameterItem/1.0",
            "name": "activityLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_active_sessions\\r\\n| where sample_time_utc <= {timeRange:end}\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = max(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "0a1027de-5009-4fd2-8769-366714c9a903",
            "version": "KqlParameterItem/1.0",
            "name": "activityHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Selected time from the history chart is a binned time generated by make-series and is unlikely to match an actual sample.\\r\\n// Look up an actual sample within the sample group selected on the history chart, differentiating between samples in different series.\\r\\nsqldb_elastic_pool_active_sessions\\r\\n| where sample_time_utc between (todatetime(\\\"{activityHistoricalSample:$.x}\\\") .. (todatetime(\\\"{activityHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend blocking_session_id = iif(blocking_session_id == 0, int(null), blocking_session_id)\\r\\n| extend sample_type = iif(isnotempty(blocking_session_id), \\\"blocked\\\", \\\"not_blocked\\\")\\r\\n| where sample_type == \\\"{activityHistoricalSample:$.series}\\\"\\r\\n| summarize sample_time_utc = min(sample_time_utc) // Selecting any sample within a sample group is valid. Use the earliest for determinism.\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "5734b987-5dff-4c5a-8b7f-019462c37c56",
            "version": "KqlParameterItem/1.0",
            "name": "activitySampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "activitySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "activityLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "activitySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "activityHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "activityLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_elastic_pool_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "alwaysHidden",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "activity_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_active_sessions\\r\\n| where sample_time_utc == todatetime(\\\"{activitySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_sessions = count() by sample_time_utc\\r\\n| project sample_time = sample_time_utc, sample_time_utc, offset = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\"), count_sessions\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "offset",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "offset",
              "label": "Time offset"
            },
            {
              "columnId": "count_sessions",
              "label": "Active sessions"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_elastic_pool_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "50",
      "name": "selected_activity_sample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// The sample to be displayed\\r\\nlet current_snapshot = materialize(\\r\\nsqldb_elastic_pool_active_sessions\\r\\n| where sample_time_utc == todatetime(\\\"{activitySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project-away logical_server_name, elastic_pool_name, anchor_database_name, anchor_database_id, anchor_logical_database_id, anchor_physical_database_id, replica_type\\r\\n| extend blocking_session_id = iif(blocking_session_id == 0, int(null), blocking_session_id)\\r\\n);\\r\\n// Blocking-related columns\\r\\nlet b = materialize(\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, blocking_session_id\\r\\n);\\r\\n// Assumption: blocking chains are at most 9 levels deep. If proven incorrect, introduce additional lookups\\r\\nlet head_blockers = materialize(\\r\\nb\\r\\n| lookup (b | project session_id, blocking_session_id2 = blocking_session_id) on $left.blocking_session_id == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id3 = blocking_session_id) on $left.blocking_session_id2 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id4 = blocking_session_id) on $left.blocking_session_id3 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id5 = blocking_session_id) on $left.blocking_session_id4 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id6 = blocking_session_id) on $left.blocking_session_id5 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id7 = blocking_session_id) on $left.blocking_session_id6 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id8 = blocking_session_id) on $left.blocking_session_id7 == $right.session_id\\r\\n| lookup (b | project session_id, blocking_session_id9 = blocking_session_id) on $left.blocking_session_id8 == $right.session_id\\r\\n| project session_id,\\r\\n          request_id,\\r\\n          head_blocking_session_id = coalesce(\\r\\n                                             blocking_session_id9,\\r\\n                                             blocking_session_id8,\\r\\n                                             blocking_session_id7,\\r\\n                                             blocking_session_id6,\\r\\n                                             blocking_session_id5,\\r\\n                                             blocking_session_id4,\\r\\n                                             blocking_session_id3,\\r\\n                                             blocking_session_id2,\\r\\n                                             blocking_session_id\\r\\n                                             )\\r\\n| where isnotempty(head_blocking_session_id)\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"session_status\\\",\\\"workload_group_name\\\",\\\"connection_id\\\",\\\"encrypt_option\\\",\\\"wait_resource\\\",\\\"transaction_isolation_level\\\",\\\"query_hash\\\",\\\"query_plan_hash\\\",\\\"session_cpu_time\\\",\\\"session_duration\\\"\\r\\n]);\\r\\nlet column_labels_number_count = dynamic(\\r\\n[\\r\\n\\\"session_logical_reads\\\",\\\"session_writes\\\",\\\"session_row_count\\\",\\\"request_row_count\\\",\\\"dop\\\",\\\"parallel_worker_count\\\"\\r\\n]);\\r\\nlet column_labels_number_id = dynamic(\\r\\n[\\r\\n\\\"database_id\\\",\\\"workload_group_id\\\",\\\"request_id\\\",\\\"sql_module_object_id\\\",\\\"blocking_session_id\\\"\\r\\n]);\\r\\nlet column_labels_number_kb = dynamic(\\r\\n[\\r\\n\\\"granted_memory\\\",\\\"requested_memory\\\",\\\"max_used_memory\\\",\\\"ideal_memory\\\"\\r\\n]);\\r\\nlet column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"login_time\\\",\\\"request_start_time\\\"\\r\\n]);\\r\\nlet column_labels_task_counts = dynamic(\\r\\n[\\r\\n\\\"pending\\\", \\\"runnable\\\", \\\"running\\\", \\\"suspended\\\", \\\"done\\\", \\\"spinloop\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet session_details_string = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, session_status, workload_group_name, connection_id, encrypt_option, wait_resource, transaction_isolation_level, query_hash, query_plan_hash, session_cpu_time = format_timespan(session_cpu_time_ms * 1ms, \\\"d.hh:mm:ss.fff\\\"), session_duration = format_timespan(session_total_elapsed_time_ms * 1ms, \\\"d.hh:mm:ss.fff\\\")\\r\\n| project session_id, request_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by session_id, request_id // for each session_id and request_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for count numbers grid\\r\\nlet session_details_number_count = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, session_logical_reads, session_writes, session_row_count, request_row_count, dop, parallel_worker_count\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_count to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_count = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// result set for id numbers grid\\r\\nlet session_details_number_id = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, database_id, workload_group_id, sql_module_object_id, blocking_session_id\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_id to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_id = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// result set for byte numbers grid\\r\\nlet session_details_number_kb = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, granted_memory = memory_grant_kb, requested_memory = requested_memory_kb, max_used_memory = max_used_memory_kb, ideal_memory = ideal_memory_kb\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_kb to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_kb = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// result set for datetime grid\\r\\nlet session_details_datetime = (\\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, login_time, request_start_time\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_datetime = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\nlet session_details_task_counts = ( \\r\\ncurrent_snapshot\\r\\n| project session_id, request_id, pending = pending_task_count, runnable = runnable_task_count, running = running_task_count, suspended = suspended_task_count, done = done_task_count, spinloop = spinloop_task_count\\r\\n| project session_id, request_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_task_counts to typeof(string) on (project column_label, column_value = toint(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project session_id, request_id, c = pack(\\\"Task type\\\", column_label, \\\"Count\\\", column_value)\\r\\n| summarize task_counts = dynamic_to_json(make_list(c)) by session_id, request_id\\r\\n);\\r\\n// return last snapshot with json arrays for each detail grid\\r\\ncurrent_snapshot\\r\\n| lookup head_blockers on $left.session_id == $right.session_id and $left.request_id == $right.request_id\\r\\n| join session_details_string on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_number_count on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_number_id on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_number_kb on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_datetime on session_id and $left.request_id == $right.request_id\\r\\n| join session_details_task_counts on session_id and $left.request_id == $right.request_id\\r\\n| join kind=leftouter (\\r\\n                      head_blockers\\r\\n                      | summarize count_blocked_sessions = count() by head_blocking_session_id\\r\\n                      ) on $left.session_id == $right.head_blocking_session_id\\r\\n| project request_total_elapsed_time_ms, request_duration = format_timespan(1ms * request_total_elapsed_time_ms, \\\"d.hh:mm:ss.fff\\\"), session_id, request_id, database = iif(isnotempty(database_name), database_name, tostring(database_id)), request_status, command, input_buffer_text, blocked_by = head_blocking_session_id, count_blocked_sessions, wait_type, wait_time = format_timespan(1ms * iif(wait_time_ms != 0, wait_time_ms, int(null)), \\\"d.hh:mm:ss.fff\\\"), open_transaction_count, request_cpu_time = format_timespan(1ms * request_cpu_time_ms, \\\"d.hh:mm:ss.fff\\\"), request_logical_reads, request_writes, percent_complete = iif(percent_complete == 0, real(null), percent_complete), tempdb_allocations_kb, tempdb_current_kb, sql_module_name, login_name, host_name, program_name, client_net_address,\\r\\n  statement_text_json = dynamic_to_json(pack(\\\"statement_text\\\", statement_text)), input_buffer_text_json = dynamic_to_json(pack(\\\"input_buffer_text\\\", input_buffer_text)),\\r\\n  session_wait_stats = iif(isempty(session_wait_stats), '[{\\\"wait_type\\\":\\\"\\\",\\\"wait_time_ms\\\":\\\"\\\",\\\"signal_wait_time_ms\\\":\\\"\\\",\\\"max_wait_time_ms\\\":\\\"\\\",\\\"waiting_tasks_count\\\":\\\"\\\"}]', session_wait_stats),\\r\\n  details_datetime, details_number_id, details_number_kb, details_string, details_number_count, task_counts\\r\\n| sort by count_blocked_sessions desc nulls last, request_total_elapsed_time_ms desc nulls last // blockers first, followed by sessions with longest running requests, then longest running sessions\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "title": "Active sessions",
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "session_wait_stats",
            "parameterName": "session_wait_stats",
            "parameterType": 1,
            "defaultValue": "[{\"wait_type\":\"\",\"wait_time_ms\":\"\",\"signal_wait_time_ms\":\"\",\"max_wait_time_ms\":\"\",\"waiting_tasks_count\":\"\"}]"
          },
          {
            "fieldName": "task_counts",
            "parameterName": "task_counts",
            "parameterType": 1,
            "defaultValue": "[{\"Task type\":\"\",\"Count\":\"\"}]"
          },
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_count",
            "parameterName": "details_number_count",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_id",
            "parameterName": "details_number_id",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_kb",
            "parameterName": "details_number_kb",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_datetime",
            "parameterName": "details_datetime",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "statement_text_json",
            "parameterName": "statement_text",
            "parameterType": 1,
            "defaultValue": "\"\""
          },
          {
            "fieldName": "input_buffer_text_json",
            "parameterName": "input_buffer_text",
            "parameterType": 1,
            "defaultValue": "\"\""
          }
        ],
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "request_total_elapsed_time_ms",
              "formatter": 5
            },
            {
              "columnMatch": "database",
              "formatter": 0,
              "tooltipFormat": {
                "tooltip": "Database name if known, or database ID"
              }
            },
            {
              "columnMatch": "request_status",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "background",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "running",
                    "representation": "greenDark",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "runnable",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "sleeping",
                    "representation": "gray",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "suspended",
                    "representation": "yellow",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "command",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "SELECT",
                    "representation": "lightBlue",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "INSERT",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "UPDATE",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "DELETE",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "EXECUTE",
                    "representation": "grayBlue",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "MERGE",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "SELECT INTO",
                    "representation": "orange",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "CREATE INDEX",
                    "representation": "turquoise",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "startsWith",
                    "thresholdValue": "COMMIT",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "contains",
                    "thresholdValue": "ROLLBACK",
                    "representation": "red",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "startsWith",
                    "thresholdValue": "DBCC",
                    "representation": "purple",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "startsWith",
                    "thresholdValue": "BACKUP",
                    "representation": "yellow",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "blocked_by",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "!=",
                    "thresholdValue": "0",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Session [\"session_id\"] is blocked. The head blocker of the blocking chain is session [\"blocked_by\"]."
              }
            },
            {
              "columnMatch": "count_blocked_sessions",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": ">",
                    "thresholdValue": "0",
                    "representation": "3",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Session [\"session_id\"] is a head blocker in a blocking chain. It blocks [\"count_blocked_sessions\"] other session(s)."
              }
            },
            {
              "columnMatch": "open_transaction_count",
              "formatter": 2
            },
            {
              "columnMatch": "percent_complete",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": 100,
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 1,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "statement_text_json",
              "formatter": 5
            },
            {
              "columnMatch": "input_buffer_text_json",
              "formatter": 5
            },
            {
              "columnMatch": "session_wait_stats",
              "formatter": 5
            },
            {
              "columnMatch": "details_datetime",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_id",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_kb",
              "formatter": 5
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_count",
              "formatter": 5
            },
            {
              "columnMatch": "task_counts",
              "formatter": 5
            }
          ],
          "filter": true,
          "labelSettings": [
            {
              "columnId": "request_duration",
              "label": "Request duration"
            },
            {
              "columnId": "session_id",
              "label": "Session ID"
            },
            {
              "columnId": "request_id",
              "label": "Request ID"
            },
            {
              "columnId": "database",
              "label": "Database"
            },
            {
              "columnId": "request_status",
              "label": "Status"
            },
            {
              "columnId": "command",
              "label": "Command"
            },
            {
              "columnId": "input_buffer_text",
              "label": "Input buffer"
            },
            {
              "columnId": "blocked_by",
              "label": "Head blocker"
            },
            {
              "columnId": "count_blocked_sessions",
              "label": "Blocked sessions"
            },
            {
              "columnId": "wait_type",
              "label": "Wait type"
            },
            {
              "columnId": "wait_time",
              "label": "Wait time"
            },
            {
              "columnId": "open_transaction_count",
              "label": "Open transactions"
            },
            {
              "columnId": "request_cpu_time",
              "label": "Request CPU"
            },
            {
              "columnId": "request_logical_reads",
              "label": "Request logical reads"
            },
            {
              "columnId": "request_writes",
              "label": "Request writes"
            },
            {
              "columnId": "percent_complete",
              "label": "% complete"
            },
            {
              "columnId": "tempdb_allocations_kb",
              "label": "Tempdb allocations"
            },
            {
              "columnId": "tempdb_current_kb",
              "label": "Tempdb current"
            },
            {
              "columnId": "sql_module_name",
              "label": "Module"
            },
            {
              "columnId": "login_name",
              "label": "Login"
            },
            {
              "columnId": "host_name",
              "label": "Host"
            },
            {
              "columnId": "program_name",
              "label": "Program"
            },
            {
              "columnId": "client_net_address",
              "label": "Client net address"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_elastic_pool_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "active_sessions"
    },
    {
      "type": 1,
      "content": {
        "json": "The grid shows a snapshot of active user sessions in all databases in this elastic pool at a point in time. Snapshots are collected at regular intervals defined by `Active Sessions` dataset configuration. A session is considered active if it is running a request (for example, executing a query), has an open transaction, or is blocking other sessions. Click on a session in the grid to view session details, including SQL query text, session waits, etc.\r\n\r\nData is collected from [sys.dm_exec_connections](https://go.microsoft.com/fwlink/?linkid=2214209), [sys.dm_exec_sessions](https://go.microsoft.com/fwlink/?linkid=2213978) [sys.dm_exec_requests](https://go.microsoft.com/fwlink/?linkid=2214068), [sys.dm_exec_session_wait_stats](https://go.microsoft.com/fwlink/?linkid=2214069), and other views."
      },
      "conditionalVisibilities": [
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_elastic_pool_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "activity_help"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Selected session details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "4f7e9040-f18d-4a23-8092-f0b4ea855401",
                  "cellValue": "sqlTextTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Input buffer text",
                  "subTarget": "InputBuffer",
                  "style": "link"
                },
                {
                  "id": "542bad80-2f31-4b7a-88de-76df2fabff67",
                  "cellValue": "sqlTextTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Statement text",
                  "subTarget": "Statement",
                  "style": "link"
                }
              ]
            },
            "name": "sql_text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{input_buffer_text}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "conditionalVisibility": {
              "parameterName": "sqlTextTabName",
              "comparison": "isEqualTo",
              "value": "InputBuffer"
            },
            "name": "input_buffer_text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{statement_text}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "visualization": "card",
              "textSettings": {
                "style": "editor"
              }
            },
            "conditionalVisibility": {
              "parameterName": "sqlTextTabName",
              "comparison": "isEqualTo",
              "value": "Statement"
            },
            "name": "statement_text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{session_wait_stats}\",\"transformers\":null}",
              "size": 3,
              "title": "Session waits",
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "wait_time_ms",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "signal_wait_time_ms",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "max_wait_time_ms",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "waiting_tasks_count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "wait_type",
                    "label": "Wait type"
                  },
                  {
                    "columnId": "wait_time_ms",
                    "label": "Wait time (ms)"
                  },
                  {
                    "columnId": "signal_wait_time_ms",
                    "label": "Signal wait time (ms)"
                  },
                  {
                    "columnId": "max_wait_time_ms",
                    "label": "Max wait time (ms)"
                  },
                  {
                    "columnId": "waiting_tasks_count",
                    "label": "Waiting tasks"
                  }
                ]
              }
            },
            "name": "session_wait_stats"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_datetime}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_datetime"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_id}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table"
            },
            "customWidth": "33",
            "name": "session_details_number_id"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_kb}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "max": 262144,
                      "palette": "coldHot"
                    },
                    "numberFormat": {
                      "unit": 3,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true,
                        "maximumFractionDigits": 2
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_number_kb"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "2-Read Committed",
                          "representation": "Blank",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "1-Read Uncommitted",
                          "representation": "SmileySad",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "3-Repeatable Read",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "4-Serializable",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "5-Snapshot",
                          "representation": "1",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_count}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_number_count"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{task_counts}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "task_counts"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Activity"
        },
        {
          "parameterName": "sqldb_elastic_pool_active_sessions",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "activitySampleTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "session_details_group"
    },
    {
      "type": 1,
      "content": {
        "json": "* On each heatmap, a hexagon represents a database in this elastic pool\r\n* Heatmaps show top resource consuming databases. Use the name filter to find other databases.\r\n* Click on the database name in a hexagon to open a detailed dashboard for that database\r\n* Hexagons colors are described below. Databases with insufficient data are colored gray.\r\n\r\n|Heatmap|Description|\r\n|:-|:-|\r\n|`CPU`, `Data IO`, `Log write`|Each hexagon is colored depending on average database resource utilization in the selected time range, by band: green (0%-49%), yellow (50%-69%), orange (70%-89%), and red (90%-100%)|\r\n|`Requests`,`Transactions`,`Write transactions`,`Query optimizations`|Each hexagon is colored depending on the average rate of corresponding metric for the database in the selected time range, with colder colors such as blue representing lower rates, and warmer colors such as red representing higher rates|\r\n|`Lock waits`|Each hexagon is colored depending on cumulative wait time of lock (`LCK_M_*`) waits for the database in the selected time range, using the green-to-red color palette. Green represents minimal waits, red represents higher waits compared to other databases in the same elastic pool.|\r\n"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        }
      ],
      "name": "database_heatmap_help"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "8286f98f-4349-4f43-995d-b0f44177b353",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "CPU",
            "subTarget": "CPU",
            "style": "link"
          },
          {
            "id": "10f7a790-10ab-4be5-9ce5-a5993e531712",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Data IO",
            "subTarget": "Data IO",
            "style": "link"
          },
          {
            "id": "32f5213a-7d90-4a46-b208-c4036149b7dd",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Log write",
            "subTarget": "Log write",
            "style": "link"
          },
          {
            "id": "8a1f10ff-c909-4cfa-a882-6e9b54efaa32",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Requests",
            "subTarget": "Requests",
            "style": "link"
          },
          {
            "id": "39c5aa51-c73c-452c-8444-8aa841ea634e",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Lock waits",
            "subTarget": "Lock waits",
            "style": "link"
          },
          {
            "id": "7c63347c-4164-4090-8957-2c3c0d8f55f5",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Transactions",
            "subTarget": "Transactions",
            "style": "link"
          },
          {
            "id": "7922736e-f3cf-468f-a34d-f209d4f177af",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Write transactions",
            "subTarget": "Write transactions",
            "style": "link"
          },
          {
            "id": "e40b63ad-9997-4354-b28e-a860edf3c4a4",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Query optimizations",
            "subTarget": "Query optimizations",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_heatmap_tabs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let cpu_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"CPU usage %\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\ncpu_counter\\r\\n| make-series metric_timeline = avg(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ncpu_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\ncpu_counter\\r\\n| summarize percentage = avg(cntr_value), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), percentage), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 100 by percentage desc\\r\\n| sort by tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "CPU"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let request_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total request count\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nrequest_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nrequest_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nrequest_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize requests_rate = avg(value), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, requests_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), requests_rate), metric_timeline\\r\\n| top 100 by requests_rate desc\\r\\n| sort by tolower(database_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              }
            }
          },
          "centerContent": {
            "columnMatch": "requests_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "requests_rate",
            "type": 4,
            "heatmapPalette": "coldHot",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Requests"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_requests_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_optimizations_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Query optimizations/sec\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nquery_optimizations_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nquery_optimizations_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nquery_optimizations_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize query_optimizations_rate = avg(value), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, query_optimizations_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), query_optimizations_rate), metric_timeline\\r\\n| top 100 by query_optimizations_rate desc\\r\\n| sort by tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              }
            }
          },
          "centerContent": {
            "columnMatch": "query_optimizations_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average query optimization rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average query optimization rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "query_optimizations_rate",
            "type": 4,
            "heatmapPalette": "coldHot",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Query optimizations"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_query_optimizations_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let lock_wait_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total lock wait time (ms)\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nlock_wait_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nlock_wait_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nlock_wait_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize lock_wait_time = avg(value), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name,\\r\\n          lock_wait_time = case(\\r\\n                               isnull(count_samples) or count_samples == 0, real(0),\\r\\n                               toreal(count_samples)/expected_sample_count < 0.5, real(null),\\r\\n                               lock_wait_time\\r\\n                               ),\\r\\n          metric_timeline\\r\\n| top 100 by lock_wait_time desc\\r\\n| sort by tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              }
            }
          },
          "centerContent": {
            "columnMatch": "lock_wait_time",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Cumulative lock wait time (in milliseconds per second) averaged over selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Cumulative lock waits over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "lock_wait_time",
            "type": 4,
            "heatmapPalette": "greenRed",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Lock waits"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "lock_waits_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let transaction_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Databases\\\" and counter_name in (\\\"Transactions/sec\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\ntransaction_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntransaction_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\ntransaction_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize transaction_rate = avg(value), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, transaction_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), transaction_rate), metric_timeline\\r\\n| top 100 by transaction_rate desc\\r\\n| sort by tolower(database_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              }
            }
          },
          "centerContent": {
            "columnMatch": "transaction_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average transaction rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average transaction rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "transaction_rate",
            "type": 4,
            "heatmapPalette": "coldHot",
            "heatmapMin": null,
            "heatmapMax": null
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Transactions"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_transactions_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let write_transaction_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Databases\\\" and counter_name in (\\\"Write Transactions/sec\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nwrite_transaction_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = avg(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nwrite_transaction_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nwrite_transaction_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize write_transaction_rate = avg(value), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, write_transaction_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), write_transaction_rate), metric_timeline\\r\\n| top 100 by write_transaction_rate desc\\r\\n| sort by tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              }
            }
          },
          "centerContent": {
            "columnMatch": "write_transaction_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average write transaction rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average write transaction rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "write_transaction_rate",
            "type": 4,
            "heatmapPalette": "coldHot",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Write transactions"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_write_transactions_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let elastic_pool_properties = (\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize properties_sample_time_utc = max(sample_time_utc) by database_max_data_iops, key = int(1)\\r\\n);\\r\\nlet metric = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total data read IOs\\\",\\\"Total data write IOs\\\")\\r\\n| where isnotempty(database_name)\\r\\n| summarize cntr_value = sum(cntr_value) by sample_time_utc, database_name // combine reads and writes to get total IOs for each sample and database\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend iops = delta_cntr_value / delta_sample_time_utc * 1000, key = int(1)\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| join kind=inner elastic_pool_properties on key // all property rows with distinct database_max_log_rate_mbps\\r\\n| extend sample_time_diff_ms = abs(datetime_diff(\\\"millisecond\\\", sample_time_utc, properties_sample_time_utc)) // calculate the difference in sample times between sqldb_elastic_pool_performance_counters_common and sqldb_elastic_pool_properties\\r\\n| summarize arg_min(sample_time_diff_ms, sample_time_utc, iops, database_max_data_iops) by database_name // restrict to the property row where this difference in minimal\\r\\n| project sample_time_utc, percentage = min_of(100 * (toreal(iops) / toreal(database_max_data_iops)), 100), database_name\\r\\n);\\r\\nlet metric_timeline = \\r\\nmetric\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nmetric\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nmetric\\r\\n| summarize percentage = avg(percentage), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), percentage), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 100 by percentage desc\\r\\n| sort by tolower(database_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average Data IO percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average Data IO utilization over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Data IO"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "database_data_io_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let elastic_pool_properties = (\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize properties_sample_time_utc = max(sample_time_utc) by database_max_log_rate_mbps, key = int(1)\\r\\n);\\r\\nlet metric = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total log write bytes\\\")\\r\\n| where isnotempty(database_name)\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend delta_log_write_throughput_bps = toreal(delta_cntr_value) / toreal(delta_sample_time_utc / 1000), key = int(1)\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| join kind=inner elastic_pool_properties on key // all property rows with distinct database_max_log_rate_mbps\\r\\n| extend sample_time_diff_ms = abs(datetime_diff(\\\"millisecond\\\", sample_time_utc, properties_sample_time_utc)) // calculate the difference in sample times between sqldb_elastic_pool_performance_counters_common and sqldb_elastic_pool_properties\\r\\n| summarize arg_min(sample_time_diff_ms, sample_time_utc, delta_log_write_throughput_bps, database_max_log_rate_mbps) by database_name // restrict to the property row where this difference in minimal\\r\\n| project sample_time_utc, percentage = min_of(100 * (delta_log_write_throughput_bps / toreal(database_max_log_rate_mbps * 1024 * 1024)), 100), database_name\\r\\n);\\r\\nlet metric_timeline = \\r\\nmetric\\r\\n| make-series metric_timeline = avg(percentage) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nmetric\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nmetric\\r\\n| summarize percentage = avg(percentage), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), percentage), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 70, \\\"orange\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 100 by percentage desc\\r\\n| sort by tolower(database_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average Data IO percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average Data IO utilization over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Log write"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "database_log_write_heatmap"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Each connectivity probe opens a new connection and executes a simple read query. A successful connectivity probe establishes that the network connection and simple query processing was successful, but does not guarantee server or database availability and health."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "connectivity_help"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "d22c6ae2-511d-4fc3-be51-11212028d0fe",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivitySampleType",
                  "label": "Data to show",
                  "type": 10,
                  "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "Historical"
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "name": "connectivity_sample_type_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "1b807fef-bbc9-4862-aeb3-22813875dd51",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivitySampleSubtype",
                  "label": "Sample type",
                  "type": 10,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{\"value\":\"all\",\"label\":\"All\"},{\"value\":\"failed\",\"label\":\"Failed\"}]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "all"
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "connectivitySampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "connectivity_sample_subtype_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server and elastic pool names\\r\\nlet connection_server_target = (\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, elastic_pool_name) by connection_server_name, anchor_logical_database_id\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| lookup connection_server_target on connection_server_name, anchor_logical_database_id // A failed probe has empty logical_server_name and elastic_pool_name. Look them up from the most recent successful probe for the same elastic pool.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         elastic_pool_name = iif(isempty(elastic_pool_name), elastic_pool_name1, elastic_pool_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name =~ @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend sample_subtype = iif(probe_return_value != 1, \\\"failed\\\", \\\"successful\\\")\\r\\n| where \\\"{connectivitySampleSubtype}\\\" == \\\"all\\\" or (\\\"{connectivitySampleSubtype}\\\" == \\\"failed\\\" and sample_subtype == \\\"{connectivitySampleSubtype}\\\")\\r\\n| make-series metric = count() default = long(null) on probe_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2 by sample_subtype\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 4,
              "aggregation": 3,
              "title": "Select a sample",
              "noDataMessage": "No connectivity samples are available",
              "timeBrushParameterName": "timeRange",
              "exportParameterName": "connectivityHistoricalSample",
              "exportDefaultValue": "0",
              "queryType": 9,
              "visualization": "barchart",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "failed",
                    "label": "Failed",
                    "color": "red"
                  },
                  {
                    "seriesName": "successful",
                    "label": "Successful",
                    "color": "greenDark"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "connectivitySampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "connectivity_timeline"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server name to target server and elastic pool names\\r\\nlet connection_server_target = (\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, elastic_pool_name) by connection_server_name, anchor_logical_database_id\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| lookup connection_server_target on connection_server_name, anchor_logical_database_id // A failed probe has empty logical_server_name and elastic_pool_name. Look them up from the most recent successful probe for the same elastic pool.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         elastic_pool_name = iif(isempty(elastic_pool_name), elastic_pool_name1, elastic_pool_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name =~ @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend sample_subtype = iif(probe_return_value != 1, \\\"failed\\\", \\\"successful\\\")\\r\\n| summarize count_successful_samples = countif(sample_subtype == \\\"successful\\\"),\\r\\n            count_failed_samples = countif(sample_subtype == \\\"failed\\\")\\r\\n| project strcat(\\\"There are `\\\", count_successful_samples, \\\"` successful and `\\\", count_failed_samples, \\\"` failed connectivity probe(s) in the selected time range. Each vertical bar stands for a group of probes. Bar height is the total number of probes in a group. Select a bar to view one probe from that group, and its preceding and following probes. Zoom in to see smaller groups, down to individual probes.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "No connectivity samples are available",
              "queryType": 9,
              "visualization": "card",
              "textSettings": {
                "style": "markdown"
              }
            },
            "conditionalVisibility": {
              "parameterName": "connectivitySampleType",
              "comparison": "isEqualTo",
              "value": "Historical"
            },
            "name": "connectivity_sample_count"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "56e281c0-0f45-4b7a-9942-9328603b6e16",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivityLatestSampleTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server and elastic pool names\\r\\nlet connection_server_target = (\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, elastic_pool_name) by connection_server_name, anchor_logical_database_id\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| lookup connection_server_target on connection_server_name, anchor_logical_database_id // A failed probe has empty logical_server_name and elastic_pool_name. Look them up from the most recent successful probe for the same elastic pool.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         elastic_pool_name = iif(isempty(elastic_pool_name), elastic_pool_name1, elastic_pool_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name =~ @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize probe_time_utc = max(probe_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "c83db031-6de6-46e6-9cf2-a5863eee0a22",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivityHistoricalSampleTime",
                  "type": 1,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Selected time from the history chart is a binned time generated by make-series and is unlikely to match an actual sample.\\r\\n// Look up an actual sample within the sample group selected on the history chart, differentiating between samples in different series.\\r\\n// Map connection server/database name to target logical server and elastic pool names\\r\\nlet connection_server_target = (\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, elastic_pool_name) by connection_server_name, anchor_logical_database_id\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (todatetime(\\\"{connectivityHistoricalSample:$.x}\\\") .. (todatetime(\\\"{connectivityHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| lookup connection_server_target on connection_server_name, anchor_logical_database_id // A failed probe has empty logical_server_name and elastic_pool_name. Look them up from the most recent successful probe for the same elastic pool.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         elastic_pool_name = iif(isempty(elastic_pool_name), elastic_pool_name1, elastic_pool_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name =~ @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend sample_subtype = iif(probe_return_value != 1, \\\"failed\\\", \\\"successful\\\")\\r\\n| where sample_subtype == \\\"{connectivityHistoricalSample:$.series}\\\"\\r\\n| summarize probe_time_utc = min(probe_time_utc) // Selecting any sample within a sample group is valid. Use the earliest for determinism.\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 9
                },
                {
                  "id": "a46d5538-ceba-4047-bf72-0f6494a4ab51",
                  "version": "KqlParameterItem/1.0",
                  "name": "connectivitySampleTime",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "connectivitySampleType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Latest",
                        "resultValType": "param",
                        "resultVal": "connectivityLatestSampleTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "connectivitySampleType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Historical",
                        "resultValType": "param",
                        "resultVal": "connectivityHistoricalSampleTime"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "connectivityLatestSampleTime"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "formHorizontal",
              "queryType": 9
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "alwaysHidden",
              "comparison": "isNotEqualTo"
            },
            "name": "connectivity_sample_time_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server and elastic pool names\\r\\nlet connection_server_target = (\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, elastic_pool_name) by connection_server_name, anchor_logical_database_id\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc == todatetime(\\\"{connectivitySampleTime}\\\")\\r\\n| lookup connection_server_target on connection_server_name, anchor_logical_database_id // A failed probe has empty logical_server_name and elastic_pool_name. Look them up from the most recent successful probe for the same elastic pool.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         elastic_pool_name = iif(isempty(elastic_pool_name), elastic_pool_name1, elastic_pool_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name =~ @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time = probe_time_utc, probe_time_utc, offset = format_timespan(now() - probe_time_utc, \\\"d.hh:mm:ss\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 4,
              "noDataMessage": "No sample is selected",
              "queryType": 9,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "sample_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "28ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "probe_time_utc",
                    "formatter": 6,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      }
                    },
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "offset",
                    "formatter": 2,
                    "tooltipFormat": {
                      "tooltip": "Time difference between latest probe and displayed probe"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "sample_time",
                    "label": "Probe time"
                  },
                  {
                    "columnId": "probe_time_utc",
                    "label": "Probe time (UTC)"
                  },
                  {
                    "columnId": "offset",
                    "label": "Time offset"
                  }
                ]
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "connectivitySampleTime",
              "comparison": "isNotEqualTo"
            },
            "name": "selected_connectivity_sample"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server and elastic pool names\\r\\nlet connection_server_target = (\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, elastic_pool_name) by connection_server_name, anchor_logical_database_id\\r\\n| project-away probe_time_utc\\r\\n);\\r\\n// Get the latest successful probe before the current probe, and the earliest successful probe after the current probe\\r\\n// For a failed probe, these will be the last successful probe before outage and first successful probe after outage\\r\\n// For a successful probe, these will be the immediately preceding and immediately following probes\\r\\nlet range_bounds = toscalar(\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (({timeRange:start}) .. ({timeRange:end}))\\r\\n| lookup connection_server_target on connection_server_name, anchor_logical_database_id // A failed probe has empty logical_server_name and elastic_pool_name. Look them up from the most recent successful probe for the same elastic pool.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         elastic_pool_name = iif(isempty(elastic_pool_name), elastic_pool_name1, elastic_pool_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name =~ @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize left_bound_probe_time_utc = maxif(probe_time_utc, probe_time_utc < todatetime(\\\"{connectivitySampleTime}\\\") and probe_return_value == 1),\\r\\n            right_bound_probe_time_utc = minif(probe_time_utc, probe_time_utc > todatetime(\\\"{connectivitySampleTime}\\\") and probe_return_value == 1)\\r\\n| extend bound_probe_times = pack_array(left_bound_probe_time_utc, right_bound_probe_time_utc)\\r\\n| project-away left_bound_probe_time_utc, right_bound_probe_time_utc\\r\\n);\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc in (todatetime(\\\"{connectivitySampleTime}\\\"), range_bounds[0], range_bounds[1]) // The number of returned rows may be less than 3 if left/right bound probes fall outside selected time range\\r\\n| lookup connection_server_target on connection_server_name, anchor_logical_database_id // A failed probe has empty logical_server_name and elastic_pool_name. Look them up from the most recent successful probe for the same elastic pool.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         elastic_pool_name = iif(isempty(elastic_pool_name), elastic_pool_name1, elastic_pool_name)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name =~ @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| order by probe_time_utc asc\\r\\n| project probe_time_utc,\\r\\n          offset = format_timespan(probe_time_utc - todatetime(\\\"{connectivitySampleTime}\\\"), \\\"d.hh:mm:ss\\\"),\\r\\n          probe_return_value,\\r\\n          error_number,\\r\\n          error_message,\\r\\n          error_state,\\r\\n          connection_server_name,\\r\\n          connection_database_name,\\r\\n          connection_application_intent,\\r\\n          connection_timeout_seconds,\\r\\n          execution_timeout_seconds,\\r\\n          client_connection_id\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "Connectivity probes",
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "probe_time_utc",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "28ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "offset",
                    "formatter": 2,
                    "formatOptions": {
                      "customColumnWidthSetting": "15ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "The difference between selected probe time and preceding or following probe time"
                    }
                  },
                  {
                    "columnMatch": "probe_return_value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "1",
                          "representation": "success",
                          "text": "{0} - Successful"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "0",
                          "representation": "failed",
                          "text": "{0} - Failed"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Unknown",
                          "text": "{0}{1}"
                        }
                      ],
                      "customColumnWidthSetting": "18ch"
                    }
                  },
                  {
                    "columnMatch": "connection_server_name",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "30ch"
                    }
                  },
                  {
                    "columnMatch": "connection_timeout_seconds",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "execution_timeout_seconds",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "probe_time_utc",
                    "label": "Probe time"
                  },
                  {
                    "columnId": "offset",
                    "label": "Time offset"
                  },
                  {
                    "columnId": "probe_return_value",
                    "label": "Result"
                  },
                  {
                    "columnId": "error_number",
                    "label": "Error number"
                  },
                  {
                    "columnId": "error_message",
                    "label": "Error message"
                  },
                  {
                    "columnId": "error_state",
                    "label": "Error state"
                  },
                  {
                    "columnId": "connection_server_name",
                    "label": "Connection server"
                  },
                  {
                    "columnId": "connection_database_name",
                    "label": "Database"
                  },
                  {
                    "columnId": "connection_application_intent",
                    "label": "Application intent"
                  },
                  {
                    "columnId": "connection_timeout_seconds",
                    "label": "Connection timeout"
                  },
                  {
                    "columnId": "execution_timeout_seconds",
                    "label": "Execution timeout"
                  },
                  {
                    "columnId": "client_connection_id",
                    "label": "Client connection ID"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "connectivitySampleTime",
              "comparison": "isNotEqualTo"
            },
            "name": "connectivity_probe"
          },
          {
            "type": 1,
            "content": {
              "json": "If a failed probe is displayed, then the last successful probe before that failed probe, and the first successful probe after that failed probe are displayed as well, if they are present in the selected time range.\r\n\r\nIf a successful probe is displayed, then the immediately preceding and immediately following successful probes, if any, are displayed as well."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "connectivity_probes_help"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Connectivity"
        },
        {
          "parameterName": "sqldb_elastic_pool_connectivity",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "serverName",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "elasticPoolName",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "connectivity_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}